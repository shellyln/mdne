{"version":3,"sources":["webpack://liyad/webpack/universalModuleDefinition","webpack://liyad/webpack/bootstrap","webpack://liyad/./src/s-exp/errors.ts","webpack://liyad/./src/s-exp/evaluate.ts","webpack://liyad/./src/s-exp/ast.ts","webpack://liyad/./src/s-exp/compile.ops/helpers.ts","webpack://liyad/./src/s-exp/types.ts","webpack://liyad/./src/s-exp/compile.ts","webpack://liyad/./src/s-exp/compile.ops/index.ts","webpack://liyad/./src/s-exp/parser.ts","webpack://liyad/./src/s-exp/operators/core/core.fn.ts","webpack://liyad/./src/s-exp/operators/core/core.operator.ts","webpack://liyad/./src/s-exp/operators/core/core.macro.ts","webpack://liyad/./src/s-exp/operators/core/core.symbol.ts","webpack://liyad/./src/s-exp/operators/core/index.ts","webpack://liyad/./src/s-exp/operators/arithmetic/arithmetic.fn.ts","webpack://liyad/./src/s-exp/operators/arithmetic/arithmetic.operator.ts","webpack://liyad/./src/s-exp/operators/arithmetic/arithmetic.macro.ts","webpack://liyad/./src/s-exp/operators/arithmetic/arithmetic.symbol.ts","webpack://liyad/./src/s-exp/operators/arithmetic/index.ts","webpack://liyad/./src/lib/data.ts","webpack://liyad/./src/s-exp/operators/sequence/sequence.fn.ts","webpack://liyad/./src/s-exp/operators/sequence/sequence.operator.ts","webpack://liyad/./src/s-exp/operators/sequence/sequence.macro.ts","webpack://liyad/./src/s-exp/operators/sequence/sequence.symbol.ts","webpack://liyad/./src/s-exp/operators/sequence/index.ts","webpack://liyad/./src/s-exp/operators/jsx/jsx.fn.ts","webpack://liyad/./src/s-exp/operators/jsx/jsx.operator.ts","webpack://liyad/./src/s-exp/operators/jsx/jsx.macro.ts","webpack://liyad/./src/s-exp/operators/jsx/jsx.symbol.ts","webpack://liyad/./src/s-exp/operators/jsx/index.ts","webpack://liyad/./src/s-exp/operators/concurrent/concurrent.fn.ts","webpack://liyad/./src/s-exp/operators/concurrent/concurrent.operator.ts","webpack://liyad/./src/s-exp/operators/concurrent/concurrent.macro.ts","webpack://liyad/./src/s-exp/operators/concurrent/concurrent.symbol.ts","webpack://liyad/./src/s-exp/operators/concurrent/index.ts","webpack://liyad/./src/s-exp/s-expression.ts","webpack://liyad/./src/s-exp/browser.ts","webpack://liyad/./src/index.ts"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","setEvaluationCount","checkParamsLength","checkUnsafeVarNames","_types__WEBPACK_IMPORTED_MODULE_0__","state","evalCount","config","maxEvalCount","args","min","max","length","Error","varName","toNumber","resolveSplice","resolveMacro","resolveValueSymbolScope","resolveValueSymbol","collectCapturedVariables","getCapturedScopes","installScope","uninstallScope","getScope","getGlobalScope","optimizeTailCall","evaluate","_ast__WEBPACK_IMPORTED_MODULE_0__","_errors__WEBPACK_IMPORTED_MODULE_1__","x","NaN","Number","enableSplice","Array","isArray","reservedNames","splice","slice","concat","macroInfo","macroMap","symbol","lastErr","r1","formalArgs","fn","actualArgs","matchResult","matchMacroArgs","Boolean","lastIsSpread","error","next","nullIfNotDefined","scopes","localScope","scope","capturedScopes","isBlockLocal","globalScope","symInfo","symbolMap","valueSymbolResolverFallback","raiseOnUnresolvedSymbol","names","a","unshift","assign","push","pop","macroName","nm","startsWith","endsWith","tpos","lastIndexOf","tname","fnBody","front","tail","if","self","varBaseName","tempVarsSyms","map","idx","until","let","set","sym","quote","backquote","resolveUnquote","unquote","eval","sprs","spread","reverse","funcInfo","funcMap","v","funcSymbolResolverFallback","resolveFunctionSymbol","JSON","stringify","wrapExternalValue","car","cdr","dotted","wrapByUnquote","isSymbol","applyMacros","stripQuote","stripQuoteOrPass","getScope_stateApplied","resolveValueSymbol_dynamic","checkUnsafeVarNames_dynamic","_evaluate__WEBPACK_IMPORTED_MODULE_1__","_errors__WEBPACK_IMPORTED_MODULE_2__","tok","FatalError","MaxEvaluationCountError","ScriptTerminationError","[object Object]","message","super","where","compileLambda","_compile_ops_helpers__WEBPACK_IMPORTED_MODULE_3__","_compile_ops__WEBPACK_IMPORTED_MODULE_4__","compileCore","_$_vars","compileValue","b","compFnBody","String","ctx","varNames","has","varsCount","compileToken","body","ops","join","arr","Map","varNamesCount","varDefs","makeScope","scoped","varNamesCopy","entries","enableTailCallOptimization","thiz","compFormalArgs","compFnBodyRoot","evalCompiledLambda","_$_state","code","registerOperators","_helpers__WEBPACK_IMPORTED_MODULE_2__","raise","quoted","vName","symName","regToVars","checkNameCalled","checkNamePos","str","checkName","not","w1","w0","hasSpread","isEOF","ch","isSpace","trim","isNumberFirstChar","test","isNumberAfterSignChar","isSymbolFirstChar","lookCurrentLineHint","line","index","pos","strings","getChar","virtualEof","disableEscape","eof","values","split","eofSeq","ch1","ch2","fromCodePoint","parseInt","lookAheads","chs","lookAhead","skipWhitespaces","parseNumber","parseSymbol","enableShorthands","match","ws","parseStringOrComment","valuesStartSeq","valuesStopChar","eofSeqs","types","parseList","parseString","parseHereDoc","attrs","q","inner","parseSingleLineComment","comment","parseMultiLineComment","parseOneToken","ahead","isSpliceUnquote","ret","ast","aheads","enableSpread","enableHereDoc","isHereDoc","Template","ahs","enableVerbatimStringLiteral","listStopChar","initialList","stripComments","parse","globalObj","Function","$car","errors","$$first","$cdr","$cons","$$firstAndSecond","$first","$second","$$second","$last","$rest","$firstAndSecond","$atom","$eq","$notEq","$list","$__scope","returnMultiple","kv","kvSym","kvName","xSym","xName","$__lambda","fa","$comp$__lambda","compile","$apply","apply","$raise","$pipe","$__let","$__set","path","subst","inprog","last","$boolean","$$boolean","$not","$$not","$__and","prev","curr","$__or","$ambiguousEq","$$ambiguousEq","$ambiguousNotEq","$lt","$le","$gt","$ge","$symbol","$isSymbol","$isList","$isString","$isNumber","$isNaN","isNaN","$isFinite","isFinite","$isInteger","isInteger","$toString","$toNumber","$objectAssign","$jsonStringify","$jsonParse","$now","Date","now","$datetimeFromIso","dt","getTime","$datetime","year","padStart","$datetimeLc","$datetimeToIsoString","toISOString","$datetimeToComponents","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","getUTCDay","$datetimeToComponentsLc","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","getTimezoneOffset","getDay","$match","RegExp","exec","$consoleLog","console","log","$consoleError","$consoleTrace","trace","$consoleTime","time","$consoleTimeEnd","timeEnd","$consoleTimeLog","timeLog","core_operator","st","info","fArgs","aArgs","list","e","tempVarSym","keyName","core_macro","core_symbol","POSITIVE_INFINITY","NEGATIVE_INFINITY","EPSILON","MAX_VALUE","MIN_VALUE","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","install","funcs","macros","symbols","$bitLShift","$bitSRShift","$bitURShift","$bitNot","$bitAnd","reduce","$bitOr","$bitXor","$add","$sub","$mul","$sup","Math","pow","$div","$mod","$max","$min","$avg","$floor","floor","$ceil","ceil","$round","round","$abs","abs","$sign","sign","arithmetic_operator","arithmetic_macro","arithmetic_symbol","arithmetic_install","Query","data","condition","y","desc","sort","start","groupBy","array","w","first","intermediate","single","filter","query","$length","$trim","$trimHead","trimLeft","$trimTail","trimRight","$replaceAll","$split","$join","$concat","$slice","$top","$tail","$push","$pop","$__at","$reverse","$reverseDestructive","$find","find","$filter","$map","$reduce","$reduceFromTail","reduceRight","$sort","$sortDestructive","$groupEvery","groupEvery","select","$groupBy","$orderBy","orderBy","$where","sequence_operator","stop","step","from","sequence_macro","sequence_symbol","sequence_install","$jsxProps","styles","matched","classes","z","cs","forEach","fragment","__html","__text","getJsxTagsParams","children","props","$jsxStandardTag","jsx","$jsxComponentTag","component","jsx_operator","jsx_macro","jsx_symbol","jsx_install","lsxConf","components","jsxFlagment","JsxFragment","$__letAsync","promise","then","Promise","resolve","reject","$__setAsync","$then","$resolveAll","promises","all","$resolveAny","invert","res","rej","ps","firstOf","$resolvePipe","lambdas","$resolveFork","resolvers","rejectors","pa","lp","catch","f","concurrent_operator","concurrent_macro","concurrent_symbol","concurrent_install","defaultReservedNames","cons","atom","eq","lambda","defun","cond","while","doWhile","doUntil","defvar","setq","and","or","gensym","defaultConfig","enableEvaluate","returnMultipleRoot","initState","globals","resetState","SExpression","conf","startup","evaluateAST","repl","fRepl","sync","setGlobals","appendGlobals","setStartup","setStartupAST","appendStartup","appendStartupAST","installer","SExpressionAsync","__awaiter","stat","execSync","S","L","LS","lisp","L_async","LS_async","lisp_async","LM","LM_async","LSX","LSX_async","runScriptTags","contentType","codes","document","querySelectorAll","innerHTML","builtinOperators","builtinMacros","builtinSymbols","core","arithmetic","sequence","concurrent"],"mappings":"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","file":"liyad.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"liyad\"] = factory();\n\telse\n\t\troot[\"liyad\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserState,\n         MaxEvaluationCountError } from './types';\n\n\n\nexport function setEvaluationCount(state: SxParserState) {\n    state.evalCount++;\n    if (state.config.maxEvalCount && state.config.maxEvalCount < state.evalCount) {\n        throw new MaxEvaluationCountError();\n    }\n}\n\n\nexport function checkParamsLength(name: string, args: ArrayLike<any>, min: number, max?: number) {\n    if (args.length < min) {\n        throw new Error(`[SX] ${name}: Invalid argument length: expected: ${min} / args: ${args.length}.`);\n    }\n    if (max && max < args.length) {\n        throw new Error(`[SX] ${name}: Invalid argument length: expected: ${max} / args: ${args.length}.`);\n    }\n    return args;\n}\n\n\nexport function checkUnsafeVarNames(name: string, varName: string) {\n    if (varName === '__proto__') {\n        throw new Error(`[SX] ${name}: Invalid var name ${varName}.`);\n    }\n    return varName;\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserState,\n         SxExternalValue,\n         SxSymbol,\n         SxDottedPair,\n         SxDottedFragment,\n         SxToken,\n         SxScope,\n         CapturedScopes,\n         SxMacroInfo }         from './types';\nimport { isSymbol }            from './ast';\nimport { setEvaluationCount,\n         checkUnsafeVarNames } from './errors';\n\n\n\nexport function toNumber(x: any) {\n    switch (typeof x) {\n    case 'object': case 'symbol': case 'function':\n        return NaN;\n    default:\n        return Number(x);\n    }\n}\n\n\nexport function resolveUnquote(state: SxParserState, r: SxToken[]) {\n    for (let i = 0; i < r.length; i++) {\n        const symUnquote = Array.isArray(r[i]) && isSymbol((r[i] as SxToken[])[0], state.config.reservedNames.unquote);\n        if (symUnquote) {\n            r = r.slice(0, i).concat([evaluate(state, (r[i] as SxToken[])[1])], r.slice(i + 1));\n        }\n        if (Array.isArray(r[i])) {\n            r = r.slice(0);\n            r[i] = resolveUnquote(state, r[i] as SxToken[]);\n        }\n    }\n    return resolveSplice(state, r);\n}\n\n\nexport function resolveSplice(state: SxParserState, r: SxToken[]) {\n    if (state.config.enableSplice) {\n        for (let i = r.length - 1; i >= 0; i--) {\n            const symSplice = Array.isArray(r[i]) && isSymbol((r[i] as SxToken[])[0], state.config.reservedNames.splice);\n            if (symSplice) {\n                r = r.slice(0, i).concat((r[i] as SxToken[])[1], r.slice(i + 1));\n            }\n        }\n    }\n    return r;\n}\n\n\nexport function resolveMacro(state: SxParserState, x: SxSymbol, r: SxToken[]) {\n    const macroInfo = state.macroMap.get(x.symbol);\n    let lastErr = null;\n    if (macroInfo) {\n        let m: SxMacroInfo | undefined = macroInfo;\n        const r1 = r.slice(1);\n        while (m) {\n            if (m.formalArgs) {\n                const matchResult = matchMacroArgs(state, x.symbol, m.formalArgs, Boolean(m.lastIsSpread), r1);\n                if (! matchResult.error) {\n                    return {\n                        fn: m.fn(state, x.symbol, matchResult.formalArgs as SxSymbol[]),\n                        actualArgs: r.slice(0, 1).concat(matchResult.actualArgs as SxToken[]),\n                    };\n                }\n                lastErr = matchResult.error;\n                m = m.next;\n            } else {\n                return {\n                    fn: m.fn(state, x.symbol),\n                    actualArgs: r,\n                };\n            }\n        }\n        if (lastErr) {\n            throw new Error(lastErr);\n        }\n    }\n    return false;\n}\n\n\nexport function resolveFunctionSymbol(state: SxParserState, x: SxSymbol) {\n    if (typeof x === 'function') {\n        return x;\n    }\n    const funcInfo = state.funcMap.get(x.symbol);\n    if (funcInfo) {\n        return funcInfo.fn(state, x.symbol);\n    } else {\n        const v = resolveValueSymbol(state, x);\n        if (typeof v === 'function') {\n            return v;\n        }\n        if (state.config.funcSymbolResolverFallback) {\n            return state.config.funcSymbolResolverFallback(state, x.symbol);\n        }\n        if (state.config.raiseOnUnresolvedSymbol) {\n            throw new Error(`[SX] resolveFunctionSymbol: Unresolved symbol: ${x.symbol}.`);\n        }\n        return x.symbol;\n    }\n}\n\n\nexport function resolveValueSymbolScope(state: SxParserState, x: SxSymbol, nullIfNotDefined: boolean) {\n    for (let i = state.scopes.length - 1; i > 0; i--) {\n        const localScope: SxScope = state.scopes[i];\n        if (localScope && Object.prototype.hasOwnProperty.call(localScope.scope, x.symbol)) {\n            return localScope.scope;\n        }\n        if (localScope.capturedScopes &&\n            Object.prototype.hasOwnProperty.call(localScope.capturedScopes, x.symbol)) {\n            return localScope.capturedScopes[x.symbol];\n        }\n        if (! localScope.isBlockLocal) {\n            break;\n        }\n    }\n    const globalScope = getGlobalScope(state);\n    if (Object.prototype.hasOwnProperty.call(globalScope.scope, x.symbol)) {\n        return globalScope.scope;\n    }\n    return nullIfNotDefined ? null : getScope(state).scope;\n}\n\n\nexport function resolveValueSymbol(state: SxParserState, x: SxSymbol) {\n    const scope = resolveValueSymbolScope(state, x, true);\n    if (scope) {\n        return scope[x.symbol];\n    }\n    const symInfo = state.symbolMap.get(x.symbol);\n    if (symInfo) {\n        return symInfo.fn(state, x.symbol);\n    } else {\n        if (state.config.valueSymbolResolverFallback) {\n            return state.config.valueSymbolResolverFallback(state, x.symbol);\n        }\n        if (state.config.raiseOnUnresolvedSymbol) {\n            throw new Error(`[SX] resolveValueSymbol: Unresolved symbol: ${x.symbol}.`);\n        }\n        return x.symbol;\n    }\n}\n\n\nexport function collectCapturedVariables(state: SxParserState, names: SxSymbol[]): CapturedScopes {\n    const capturedScopes: CapturedScopes = {};\n    for (const n of names) {\n        const scope = resolveValueSymbolScope(state, n, true);\n        if (scope === null) {\n            throw new Error(`[SX] collectCapturedVariables: Unresolved symbols ${n}`);\n        }\n        checkUnsafeVarNames('collectCapturedVariables', n.symbol);\n        capturedScopes[n.symbol] = scope;\n    }\n    return capturedScopes;\n}\n\n\nexport function getCapturedScopes(state: SxParserState): CapturedScopes | undefined {\n    const a: CapturedScopes[] = [];\n    for (let i = state.scopes.length - 1; i > 0; i--) {\n        const localScope: SxScope = state.scopes[i];\n        if (localScope.capturedScopes) {\n            a.unshift(localScope.capturedScopes);\n        }\n        if (! localScope.isBlockLocal) {\n            break;\n        }\n    }\n    return a.length > 0 ? Object.assign({}, ...a) : void 0;\n}\n\n\nexport function installScope(state: SxParserState, scope: any, isBlockLocal: boolean, capturedScopes?: CapturedScopes): any {\n    state.scopes.push({isBlockLocal, scope, capturedScopes});\n}\n\n\nexport function uninstallScope(state: SxParserState): any {\n    if (state.scopes.length < 2) {\n        throw new Error(`[SX] uninstallScope: Unable to pop stack.`);\n    }\n    return state.scopes.pop();\n}\n\n\nexport function getScope(state: SxParserState) {\n    return state.scopes[state.scopes.length - 1];\n}\n\n\nexport function getGlobalScope(state: SxParserState) {\n    return state.scopes[0];\n}\n\n\nexport function matchMacroArgs(\n        state: SxParserState, macroName: string,\n        formalArgs: SxSymbol[], lastIsSpread: boolean, actualArgs: SxToken[]) {\n\n    formalArgs = formalArgs.slice(0);\n    actualArgs = actualArgs.slice(0);\n    if ((actualArgs.length + (lastIsSpread ? 1 : 0)) < formalArgs.length) {\n        return ({ error: `[SX] macro call (${macroName}): Actual args too short: actual ${\n            actualArgs.length} / formal ${formalArgs.length}.` });\n    }\n    for (let i = formalArgs.length - (lastIsSpread ? 2 : 1); i >= 0; i--) {\n        let nm = formalArgs[i].symbol;\n        if (nm.startsWith('!')) {\n            formalArgs[i].symbol = formalArgs[i].symbol.slice(1);\n            nm = formalArgs[i].symbol;\n\n            if (! isSymbol(actualArgs[i])) {\n                return ({ error: `[SX] macro call (${macroName}): Actual arg(${i}: ${nm}) is not symbol.` });\n            }\n        } else if (nm.startsWith('<') && nm.endsWith('>')) {\n            formalArgs[i].symbol = formalArgs[i].symbol.slice(1, -1);\n            nm = formalArgs[i].symbol;\n\n            if (isSymbol(actualArgs[i], nm)) {\n                formalArgs = formalArgs.slice(0, i).concat(formalArgs.slice(i + 1));\n                actualArgs = actualArgs.slice(0, i).concat(actualArgs.slice(i + 1));\n            } else {\n                return ({ error: `[SX] macro call (${macroName}): Actual arg(${i}: ${nm}) is not expected symbol.` });\n            }\n        } else {\n            const tpos = nm.lastIndexOf(':');\n            if (0 < tpos) {\n                const tname = nm.slice(tpos + 1);\n                switch (tname) {\n                case 'number':\n                    if (typeof actualArgs[i] !== 'number') {\n                        return ({ error: `[SX] macro call (${macroName}): Actual arg(${i}: ${nm}) is not number.` });\n                    }\n                    break;\n                case 'string':\n                    if (typeof actualArgs[i] !== 'string') {\n                        return ({ error: `[SX] macro call (${macroName}): Actual arg(${i}: ${nm}) is not string.` });\n                    }\n                    break;\n                case 'function':\n                    if (! (Array.isArray(actualArgs[i]) && isSymbol((actualArgs[i] as any)[0]))) {\n                        return ({ error: `[SX] macro call (${macroName}): Actual arg(${i}: ${nm}) is not function.` });\n                    }\n                    break;\n                case 'list':\n                    if (! Array.isArray(actualArgs[i])) {\n                        return ({ error: `[SX] macro call (${macroName}): Actual arg(${i}: ${nm}) is not list.` });\n                    }\n                    break;\n                case 'symbol':\n                    if (! isSymbol(actualArgs[i])) {\n                        return ({ error: `[SX] macro call (${macroName}): Actual arg(${i}: ${nm}) is not symbol.` });\n                    }\n                    break;\n                case 'any':\n                    break;\n                default:\n                    return ({ error: `[SX] macro call (${macroName}): Formal arg(${i}: ${nm}) is unknown type ${tname}.` });\n                }\n                formalArgs[i].symbol = formalArgs[i].symbol.slice(0, tpos);\n            }\n        }\n    }\n    return ({ formalArgs, actualArgs });\n}\n\n\nexport function optimizeTailCall(state: SxParserState, formalArgs: SxSymbol[], fnBody: SxToken[]) {\n    // S expression: ($__lambda '(sym1 ... symN) 'expr1 ... 'exprN)\n    //    formalArgs: 'sym1 ... 'symN\n    //        fnBody: 'expr1 ... 'exprN\n    if (Array.isArray(fnBody[fnBody.length - 1])) {\n        const front = fnBody.slice(0, fnBody.length - 1);\n        const tail = fnBody[fnBody.length - 1];\n        if (tail && (typeof tail[0] === 'object') && tail[0].symbol === state.config.reservedNames.if) {\n            // S expression: ($if cond t-expr f-expr)\n            if (Array.isArray(tail[3]) && (typeof tail[3][0] === 'object') && tail[3][0].symbol === state.config.reservedNames.self) {\n                // S expression (recursive):\n                //     (                                 ;; fnBody\n                //         expr1 ... exprN-1             ;; front\n                //         ($if cond                     ;; tail[0] [1]\n                //             t-expr                    ;;     [2]\n                //             ($self                    ;;     [3]\n                //                 rArgs1 ... rArgsN) )  ;; tail[4] ... [N+4]\n                //     )\n                //\n                //  -> S exp (tail call optimization):\n                //     (                                                                  ;; fnBody\n                //         ($until cond                                                   ;; tail[1]\n                //             ($clisp-let (tempsym1 ... tempsymN)                        ;;\n                //                 expr1 ... exprN-1                                      ;; front\n                //                 ($set tempsym1   rArgs1) ... ($set tempsymN   rArgsN)  ;; tail[4] ... [N+4]\n                //                 ($set     sym1 tempsym1) ... ($set     symN tempsymN)  ;;\n                //             )                                                          ;;\n                //         )                                                              ;;\n                //         expr1 ... exprN-1                                              ;; front\n                //         t-expr                                                         ;; tail[2]\n                //     )\n\n                const varBaseName = `$__tempvar__$$ec${state.evalCount++}$$_`;\n                const tempVarsSyms = formalArgs.map((a, idx) => ({symbol: `${varBaseName}_$i${idx}_${a.symbol}`}));\n\n                return [\n                    [{symbol: state.config.reservedNames.until}, tail[1],\n                        [{symbol: state.config.reservedNames.let}, [...tempVarsSyms],\n                            ...front,\n                            ...((tail[3].slice(1) as any[]).map((x: any, idx) =>\n                                [{symbol: state.config.reservedNames.set}, tempVarsSyms[idx], x])),\n                            ...(tempVarsSyms.map((x, idx) =>\n                                [{symbol: state.config.reservedNames.set}, formalArgs[idx], x])),\n                        ],\n                    ],\n                    ...front,\n                    tail[2],\n                ];\n            }\n        }\n    }\n    return fnBody;\n}\n\n\nexport function evaluate(state: SxParserState, x: SxToken): SxToken {\n    setEvaluationCount(state);\n\n    if (x === null || x === void 0) {\n        return x;\n    }\n    let r: SxToken = x;\n\n    for (;;) {\n        if (Array.isArray(r)) {\n            if (r.length === 0) {\n                return r;\n            }\n            r = resolveSplice(state, r);\n            const sym = isSymbol(r[0]);\n            if (sym) {\n                const m = resolveMacro(state, sym, r);\n                if (m) {\n                    r = m.fn(m.actualArgs as SxToken[]);\n                } else {\n                    break;\n                }\n            } else {\n                break;\n            }\n        } else {\n            break;\n        }\n        setEvaluationCount(state);\n    }\n\n    if (Array.isArray(r)) {\n        r = r.slice(0);\n        if (0 < r.length) {\n            const sym = isSymbol(r[0]);\n            if (sym) {\n                if (sym.symbol === state.config.reservedNames.quote) {\n                    return r.slice(1, 2)[0];\n                }\n                if (sym.symbol === state.config.reservedNames.backquote) {\n                    r = r.slice(1, 2)[0];\n                    if (Array.isArray(r)) {\n                        r = resolveUnquote(state, r);\n                    }\n                    return r;\n                }\n                if (sym.symbol === state.config.reservedNames.eval) {\n                    return evaluate(state, evaluate(state, r.slice(1, 2)[0]));\n                }\n            }\n\n            const sprs = [];\n            for (let i = 1; i < r.length; i++) {\n                const symSpr = Array.isArray(r[i]) && isSymbol((r[i] as SxToken[])[0], state.config.reservedNames.spread);\n                if (symSpr) {\n                    sprs.push(i);\n                    const a = evaluate(state, (r[i] as SxToken[])[1]);\n                    r[i] = Array.isArray(a) ? a : [a];\n                } else {\n                    r[i] = evaluate(state, r[i]);\n                }\n            }\n            for (const i of sprs.reverse()) {\n                r = (r as SxToken[]).slice(0, i).concat(r[i], r.slice(i + 1));\n            }\n\n            let fn: any;\n            if (typeof r[0] === 'function') {\n                fn = r[0];\n            } else if (sym) {\n                fn = resolveFunctionSymbol(state, sym);\n            } else {\n                fn = evaluate(state, r[0]);\n            }\n\n            if (typeof fn === 'function') {\n                r = (fn as any)(...(r.slice(1)));\n            } else {\n                throw new Error(`[SX] evaluate: First item of list is not a function: ${JSON.stringify(r)}.`);\n            }\n        }\n    } else if (state.config.wrapExternalValue && Object.prototype.hasOwnProperty.call(r, 'value')) {\n        r = (r as SxExternalValue).value;\n    } else if (Object.prototype.hasOwnProperty.call(r, 'symbol')) {\n        r = resolveValueSymbol(state, r as SxSymbol);\n    } else if (Object.prototype.hasOwnProperty.call(r, 'car')) {\n        const car = evaluate(state, (r as SxDottedPair).car);\n        const cdr = evaluate(state, (r as SxDottedPair).cdr);\n        if (Array.isArray(cdr)) {\n            const a = (cdr as any[]).slice(0);\n            a.unshift(car);\n            r = a;\n        } else {\n            r = { car, cdr };\n        }\n    } else if (Object.prototype.hasOwnProperty.call(r, 'dotted')) {\n        r = [\n            evaluate(state, (r as SxDottedFragment).dotted),\n        ];\n    } else if (Object.prototype.hasOwnProperty.call(r, 'comment')) {\n        r = [];\n    }\n\n    return r;\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserState,\n         SxSymbol }     from './types';\n\n\n\nexport function quote(state: SxParserState, x: any) {\n    return [{symbol: state.config.reservedNames.quote}, x];\n}\n\n\nexport function isQuoted(state: SxParserState, x: any) {\n    if (Array.isArray(x) && 0 < x.length) {\n        const q = isSymbol(x);\n        if (q && q.symbol === state.config.reservedNames.quote) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\nexport function backquote(state: SxParserState, x: any) {\n    return [{symbol: state.config.reservedNames.backquote}, x];\n}\n\n\nexport function isBackquoted(state: SxParserState, x: any) {\n    if (Array.isArray(x) && 0 < x.length) {\n        const q = isSymbol(x);\n        if (q && q.symbol === state.config.reservedNames.backquote) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\nexport function wrapByUnquote(state: SxParserState, x: any) {\n    return [{symbol: state.config.reservedNames.unquote}, x];\n}\n\n\nexport function isUnquoted(state: SxParserState, x: any) {\n    if (Array.isArray(x) && 0 < x.length) {\n        const q = isSymbol(x);\n        if (q && q.symbol === state.config.reservedNames.unquote) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\nexport function spread(state: SxParserState, x: any) {\n    return [{symbol: state.config.reservedNames.spread}, x];\n}\n\n\nexport function splice(state: SxParserState, x: any) {\n    return [{symbol: state.config.reservedNames.splice}, x];\n}\n\n\nexport function isSymbol(x: any, name?: string): SxSymbol | null {\n    if (x && typeof x === 'object' && Object.prototype.hasOwnProperty.call(x, 'symbol')) {\n        if (name !== void 0) {\n            return x.symbol === name ? x : null;\n        } else {\n            return x;\n        }\n    }\n    return null;\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserState,\n         SxToken }             from '../types';\nimport { isSymbol }            from '../ast';\nimport { resolveSplice,\n         resolveMacro,\n         resolveValueSymbol,\n         getScope }            from '../evaluate';\nimport { setEvaluationCount,\n         checkUnsafeVarNames } from '../errors';\n\n\n\nexport function applyMacros(state: SxParserState, tok: SxToken) {\n    let r: SxToken = tok;\n    for (;;) {\n        if (Array.isArray(r)) {\n            if (r.length === 0) {\n                break;\n            }\n            r = resolveSplice(state, r);\n            const sym = isSymbol(r[0]);\n            if (sym) {\n                const m = resolveMacro(state, sym, r);\n                if (m) {\n                    r = m.fn(m.actualArgs as SxToken[]);\n                } else {\n                    break;\n                }\n            } else {\n                break;\n            }\n        } else {\n            break;\n        }\n        setEvaluationCount(state);\n    }\n    return r;\n}\n\n\nexport function stripQuote(state: SxParserState, tok: SxToken) {\n    if (! (Array.isArray(tok) && isSymbol((tok as any)[0], state.config.reservedNames.quote))) {\n        throw new Error(`[SX] stripQuote: token is not quoted.`);\n    }\n    return (tok as any)[1];\n}\n\n\nexport function stripQuoteOrPass(state: SxParserState, tok: SxToken) {\n    if (Array.isArray(tok) && isSymbol((tok as any)[0], state.config.reservedNames.quote)) {\n        return (tok as any)[1];\n    } else {\n        return tok;\n    }\n}\n\n\nexport function getScope_stateApplied(state: SxParserState) {\n    return (function() { return getScope(state); });\n}\n\n\nexport function resolveValueSymbol_dynamic(state: SxParserState, varName: string) {\n    checkUnsafeVarNames('(compiler)resolveValueSymbol_dynamic', varName);\n    return (function(){ return resolveValueSymbol(state, {symbol: varName}); });\n}\n\nexport function checkUnsafeVarNames_dynamic(name: string) {\n    return (function(varName: string){ return checkUnsafeVarNames(name, varName); });\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\n\nexport type SxMacro = (state: SxParserState, name: string, formalArgs?: SxSymbol[]) => (list: SxToken[]) => SxToken;\n\nexport interface SxMacroInfo {\n    name: string;\n    fn: SxMacro;\n\n    formalArgs?: SxSymbol[];\n    lastIsSpread?: boolean;\n    next?: SxMacroInfo;\n}\n\n\nexport type SxFunc = (state: SxParserState, name: string) => (...args: any[]) => any;\n\nexport interface SxFuncInfo {\n    name: string;\n    fn: SxFunc;\n\n    // TODO: overloading\n    // formalArgs?: SxSymbol[];\n    // lastIsSpread?: boolean;\n    // next?: SxFuncInfo;\n}\n\n\nexport type SxSymbolResolver = (state: SxParserState, name: string) => any;\n\nexport interface SxSymbolInfo {\n    name: string;\n    fn: SxSymbolResolver;\n}\n\n\nexport interface CapturedScopes { [s: string]: { [s: string]: any; }; }\n\nexport interface SxScope {\n    isBlockLocal: boolean;\n    scope: any;           // { [s: string]: any; };\n    capturedScopes?: CapturedScopes;\n}\n\n\nexport interface SxReservedNames {\n    eval: string;\n    quote: string;\n    backquote: string;\n    unquote: string;\n    spread: string;\n    splice: string;\n\n    car: string;\n    cdr: string;\n    cons: string;\n    atom: string;\n    eq: string;\n    list: string;\n\n    let: string;\n    lambda: string;\n    self: string;\n    defun: string;\n    thiz: string;\n\n    if: string;\n    cond: string;\n\n    while: string;\n    doWhile: string;\n    until: string;\n    doUntil: string;\n\n    get: string;\n    defvar: string;\n    setq: string;\n    set: string;\n    call: string;\n\n    not: string;\n    and: string;\n    or: string;\n\n    isSymbol: string;\n    gensym: string;\n    raise: string;\n    catch: string;\n\n    Template: string;\n}\n\nexport interface SxParserConfig {\n    raiseOnUnresolvedSymbol: boolean;\n    enableEvaluate: boolean;\n    enableHereDoc: boolean;\n    enableSpread: boolean;\n    enableSplice: boolean;\n    enableShorthands: boolean;\n    enableVerbatimStringLiteral: boolean;\n    enableTailCallOptimization: boolean;\n    stripComments: boolean;\n    wrapExternalValue: boolean;\n    reservedNames: SxReservedNames;\n    returnMultipleRoot: boolean;\n    maxEvalCount: number;\n\n    jsx?: (comp: any, props: any, ...children: any[]) => any;\n    JsxFragment?: any;\n\n    funcs: SxFuncInfo[];\n    macros: SxMacroInfo[];\n    symbols: SxSymbolInfo[];\n\n    funcSymbolResolverFallback?: SxFunc;\n    valueSymbolResolverFallback?: SxSymbolResolver;\n}\n\nexport interface SxParserState {\n    strings: TemplateStringsArray | string[];\n    values: any[];\n\n    index: number;\n    pos: number;\n    line: number;\n\n    evalCount: number;\n\n    scopes: SxScope[];\n\n    macroMap: Map<string, SxMacroInfo>;\n    funcMap: Map<string, SxFuncInfo>;\n    symbolMap: Map<string, SxSymbolInfo>;\n\n    config: SxParserConfig;\n}\n\nexport interface SxEof {\n    eof: boolean; // true: truely EOF comes. false: detect virtual EOF.\n    eofSeq?: string;\n}\n\nexport interface SxExternalValue {\n    value: any;\n}\n\nexport interface SxSymbol {\n    'symbol': string;\n\n    // TODO: debug info\n    // _fileName?: string;\n    // _line?: number;\n    // _col?: number;\n}\n\nexport interface SxComment {\n    comment: string;\n}\n\nexport interface SxDottedPair {\n    car: SxToken; // left\n    cdr: SxToken; // right\n}\n\nexport interface SxDottedFragment {\n    dotted: SxToken; // right\n}\n\n\nexport type SxTokenChild = SxSymbol | SxDottedPair | SxDottedFragment | SxComment | SxExternalValue | string | number | boolean | null | /*SxToken*/ any[];\nexport type SxToken      = SxSymbol | SxDottedPair | SxDottedFragment | SxComment | SxExternalValue | string | number | boolean | null | SxTokenChild[];\nexport type SxChar = string | SxEof | SxExternalValue;\nexport type SxAtom = SxSymbol | string | number | boolean | null;\nexport type SxList = SxDottedPair | SxAtom[];\n\n\n\nexport type CompilerOperator = (r: SxToken[], args: SxToken[]) => string;\n\n\nexport interface CompilerContext {\n    _$_vars: any[];\n    varsCount: number;\n    varNames: Map<string, string>;\n    varNamesCount: number;\n    varDefs: string;\n    ops: Map<string, CompilerOperator>;\n    makeScope: (scoped: () => void) => void;\n    compileToken: (body: any[], i: number) => string;\n}\n\n\nexport interface LsxConfig {\n    jsx: (comp: any, props: any, ...children: any[]) => any;\n    jsxFlagment: any;\n    components: object;\n}\n\n\nexport class FatalError extends Error {\n    public constructor(message?: string | undefined) {\n        super(message);\n    }\n}\n\n\nexport class MaxEvaluationCountError extends FatalError {\n    public constructor() {\n        super(`[SX] evaluate: The maximum count of evaluations has been exceeded.`);\n    }\n}\n\n\nexport class ScriptTerminationError extends FatalError {\n    public constructor(where: string) {\n        super(`[SX] ${where}: Unexpected termination of script.`);\n    }\n}\n\n\nexport interface SExpressionRepl<R = SxToken> {\n    (strings: TemplateStringsArray | string, ...values: any[]): R;\n    sync: (strings: TemplateStringsArray | string, ...values: any[]) => R;\n}\n\n\nexport interface SExpressionTemplateFn<R = SxToken> {\n    (strings: TemplateStringsArray | string, ...values: any[]): R;\n    evaluateAST: (ast: SxToken[]) => R;\n    repl: () => SExpressionRepl<R>;\n    setGlobals: (globals: object) => SExpressionTemplateFn<R>;\n    appendGlobals: (globals: object) => SExpressionTemplateFn<R>;\n    setStartup: (strings: TemplateStringsArray | string, ...values: any[]) => SExpressionTemplateFn<R>;\n    setStartupAST: (ast: SxToken[]) => SExpressionTemplateFn<R>;\n    appendStartup: (strings: TemplateStringsArray | string, ...values: any[]) => SExpressionTemplateFn<R>;\n    appendStartupAST: (ast: SxToken[]) => SExpressionTemplateFn<R>;\n    install: (installer: (config: SxParserConfig) => SxParserConfig) => SExpressionTemplateFn<R>;\n}\n\n\nexport interface SExpressionAsyncRepl<R = SxToken> {\n    (strings: TemplateStringsArray | string, ...values: any[]): Promise<R>;\n    sync: (strings: TemplateStringsArray | string, ...values: any[]) => Promise<R>;\n}\n\n\nexport interface SExpressionAsyncTemplateFn<R = SxToken> {\n    (strings: TemplateStringsArray | string, ...values: any[]): Promise<R>;\n    evaluateAST: (ast: SxToken[]) => Promise<R>;\n    repl: () => SExpressionAsyncRepl<R>;\n    setGlobals: (globals: object) => SExpressionAsyncTemplateFn<R>;\n    appendGlobals: (globals: object) => SExpressionAsyncTemplateFn<R>;\n    setStartup: (strings: TemplateStringsArray | string, ...values: any[]) => SExpressionAsyncTemplateFn<R>;\n    setStartupAST: (ast: SxToken[]) => SExpressionAsyncTemplateFn<R>;\n    appendStartup: (strings: TemplateStringsArray | string, ...values: any[]) => SExpressionAsyncTemplateFn<R>;\n    appendStartupAST: (ast: SxToken[]) => SExpressionAsyncTemplateFn<R>;\n    install: (installer: (config: SxParserConfig) => SxParserConfig) => SExpressionAsyncTemplateFn<R>;\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserState,\n         SxSymbol,\n         SxToken,\n         SxFuncInfo,\n         CompilerOperator,\n         CompilerContext  }           from './types';\nimport { isSymbol }                   from './ast';\nimport { getCapturedScopes,\n         optimizeTailCall }           from './evaluate';\nimport { checkUnsafeVarNames }        from './errors';\nimport { applyMacros,\n         stripQuoteOrPass,\n         resolveValueSymbol_dynamic } from './compile.ops/helpers';\nimport { registerOperators }          from './compile.ops';\n\n\n\n// tslint:disable-next-line:variable-name\nfunction compileCore(state: SxParserState, formalArgs: SxSymbol[], lastIsSpread: boolean, fnBody: any[], _$_vars: any[]) {\n\n    function makeScope(scoped: () => void) {\n        const varNamesCopy = new Map<string, string>();\n        for (const x of ctx.varNames.entries()) {\n            varNamesCopy.set(x[0], x[1]);\n        }\n        scoped();\n        ctx.varNames = varNamesCopy;\n    }\n\n\n    function compileValue(b: any) {\n        let compFnBody = '';\n        if (b === null) {\n            compFnBody += '(null)';\n        } else if (b === void 0) {\n            compFnBody += '(void 0)';\n        } else switch (typeof b) {\n        case 'boolean': case 'number':\n            compFnBody += `(${String(b)})`;\n            break;\n        case 'object':\n            if (isSymbol(b)) {\n                const sym = b as SxSymbol;\n                checkUnsafeVarNames('(compiler)compileValue', sym.symbol);\n                if (ctx.varNames.has(sym.symbol)) {\n                    compFnBody += `(${ctx.varNames.get(sym.symbol)})`;\n                } else {\n                    _$_vars[ctx.varsCount] = sym.symbol;\n                    compFnBody += `(_$_vars[${String(ctx.varsCount++)}])`;\n                }\n                break;\n            } else {}\n            // FALL_THRU\n        default:\n            _$_vars[ctx.varsCount] = b;\n            compFnBody += `(_$_vars[${String(ctx.varsCount++)}])`;\n            break;\n        }\n        return compFnBody;\n    }\n\n\n    function compileToken(body: any[], i: number) {\n        let compFnBody = '';\n        const b = body[i];\n        if (Array.isArray(b)) {\n            if (0 < b.length) {\n                const r: SxToken = applyMacros(state, b);\n                if (Array.isArray(r)) {\n                    if (0 < r.length) {\n                        if (isSymbol(r[0])) {\n                            const sym = r[0] as SxSymbol;\n                            const args = r.slice(1);\n                            checkUnsafeVarNames('(compiler)compileToken', sym.symbol);\n                            if (ops.has(sym.symbol)) {\n                                compFnBody += (ops.get(sym.symbol) as CompilerOperator)(r, args);\n                            } else {\n                                if (sym.symbol === state.config.reservedNames.spread) {\n                                    compFnBody += `...(${\n                                        args.map((x) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')})`;\n                                } else if (state.funcMap.has(sym.symbol)) {\n                                    _$_vars[ctx.varsCount] = (state.funcMap.get(sym.symbol) as SxFuncInfo).fn(state, '');\n                                    compFnBody += `((_$_vars[${String(ctx.varsCount++)}])(${\n                                        args.map((x) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')}))`;\n                                } else if (ctx.varNames.has(sym.symbol)) {\n                                    compFnBody += `(${String(ctx.varNames.get(sym.symbol))})(${\n                                        args.map((x) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')})`;\n                                } else {\n                                    _$_vars[ctx.varsCount] = resolveValueSymbol_dynamic(state, sym.symbol);\n                                    compFnBody += `((_$_vars[${String(ctx.varsCount++)}])()(${\n                                        args.map((x) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')}))`;\n                                }\n                            }\n                        } else {\n                            switch (typeof r[0]) {\n                            case 'function':\n                                _$_vars[ctx.varsCount] = r[0];\n                                compFnBody += `((_$_vars[${String(ctx.varsCount++)}])(${\n                                    r.slice(1).map((x, idx, arr) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')}))`;\n                                break;\n                            default:\n                                throw new Error(`[SX] compileToken: First item of list is not a function: ${JSON.stringify(r[0])}.`);\n                            }\n                        }\n                    } else {\n                        compFnBody += '([])';\n                    }\n                } else {\n                    compFnBody += compileValue(b);\n                }\n            } else {\n                compFnBody += '([])';\n            }\n        } else {\n            compFnBody += compileValue(b);\n        }\n        return compFnBody;\n    }\n\n\n    const ctx: CompilerContext = {\n        _$_vars,\n        varsCount: 1,\n        varNames: new Map<string, string>(),\n        varNamesCount: 0,\n        varDefs: 'var x0;',\n        ops: new Map<string, CompilerOperator>(),\n        makeScope,\n        compileToken,\n    };\n\n    registerOperators(state, ctx);\n    const ops = ctx.ops;\n\n    if (state.config.enableTailCallOptimization) {\n        fnBody = optimizeTailCall(state, formalArgs, fnBody);\n    }\n\n    // set 'this' object\n    ctx.varNames.set(state.config.reservedNames.thiz, `(this===(Function('return this')())?null:(this===void 0?null:this))`);\n\n    const capturedScopes = getCapturedScopes(state);\n    if (capturedScopes) {\n        for (const x in capturedScopes) {\n            if (Object.prototype.hasOwnProperty.call(capturedScopes, x)) {\n                _$_vars[ctx.varsCount++] = x;\n                _$_vars[ctx.varsCount] = capturedScopes[x];\n                ctx.varNames.set(x, `(_$_vars[${String(ctx.varsCount)}][_$_vars[${String(ctx.varsCount - 1)}]])`);\n                ctx.varsCount++;\n            }\n        }\n    }\n\n    const compFormalArgs = `${formalArgs.map((x, i) => {\n        ctx.varNames.set(formalArgs[i].symbol, 'a' + i);\n        return `${(lastIsSpread && i === formalArgs.length - 1) ? '...' : ''}a${i}`;\n    }).join(',')}`;\n\n    const compFnBodyRoot = `return(${fnBody.map((x, i) => compileToken(fnBody, i)).join(',')})`;\n    return `(function(${compFormalArgs}){\"strict\";${ctx.varDefs}${compFnBodyRoot}})`;\n}\n\n\n// tslint:disable-next-line:variable-name\nfunction evalCompiledLambda(_$_state: SxParserState, _$_vars: any[], code: string) {\n    // tslint:disable-next-line:no-eval\n    _$_vars[0] = eval(code);\n    return _$_vars[0];\n}\n\n\nexport function compileLambda(state: SxParserState, formalArgs: SxSymbol[], lastIsSpread: boolean, fnBody: any[]) {\n    // tslint:disable-next-line:variable-name\n    const _$_vars: any[] = [];\n    return evalCompiledLambda(state, _$_vars, compileCore(state, formalArgs, lastIsSpread, fnBody, _$_vars));\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserState,\n         SxSymbol,\n         SxToken,\n         CompilerContext }             from '../types';\nimport { isSymbol }                    from '../ast';\nimport { checkParamsLength,\n         checkUnsafeVarNames }         from '../errors';\nimport { stripQuote,\n         stripQuoteOrPass,\n         getScope_stateApplied,\n         resolveValueSymbol_dynamic,\n         checkUnsafeVarNames_dynamic } from './helpers';\n\n\n\nexport function registerOperators(state: SxParserState, ctx: CompilerContext) {\n    const {\n        _$_vars,\n        ops,\n        makeScope,\n        compileToken,\n    } = ctx;\n\n\n    ops.set(state.config.reservedNames.quote, function(r: SxToken[], args: SxToken[]) {\n        let compFnBody = '';\n        _$_vars[ctx.varsCount] = r[1];\n        compFnBody += `(_$_vars[${String(ctx.varsCount++)}])`;\n        return compFnBody;\n    });\n\n\n    ops.set(state.config.reservedNames.self, function(r: SxToken[], args: SxToken[]) {\n        let compFnBody = '';\n        compFnBody += `((_$_vars[0])(${\n            args.map(x => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')}))`;\n        return compFnBody;\n    });\n\n\n    ops.set('$__if', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($__if condition 't-expr 'f-expr)\n        //  -> (if condition is true ) S expr  : t-expr\n        //  -> (if condition is false) S expr  : f-expr\n        let compFnBody = '';\n        checkParamsLength('compileToken:$__if', args, 2, 3);\n        compFnBody += `(${compileToken(r, 1)}?(${\n            compileToken([stripQuote(state, r[2])], 0)}):(${\n            compileToken([stripQuote(state, r[3])], 0)}))`;\n        return compFnBody;\n    });\n\n\n    ops.set('$__if-null', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($__if-null condition 'null-expr)\n        //  -> (if condition is not null ) S expr  : condition\n        //  -> (if condition is null)      S expr  : null-expr\n        let compFnBody = '';\n        checkParamsLength('compileToken:$__if-null', args, 2, 2);\n        compFnBody += `((()=>{let _$_rv=${compileToken(r, 1)};return _$_rv?_$_rv:(${\n            compileToken([stripQuote(state, r[2])], 0)}});})())`;\n        return compFnBody;\n    });\n\n\n    ops.set('$__cond', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($__cond 'cond1 'expr1 ... 'condN 'exprN)\n        //  -> (if (eval condI) is true ) S expr  : exprI\n        //  -> (if no matched)            S expr  : null\n        let compFnBody = '';\n        {\n            checkParamsLength('compileToken:$__cond', args, 1);\n            compFnBody += `(`;\n            for (let p = 0; p < args.length; p += 2) {\n                compFnBody += `${compileToken([stripQuote(state, args[p])], 0)}?(${\n                    compileToken([stripQuote(state, args[p + 1])], 0)}):(`;\n            }\n            compFnBody += `null`;\n            for (let p = 0; p < args.length; p += 2) {\n                compFnBody += `)`;\n            }\n            compFnBody += `)`;\n        }\n        return compFnBody;\n    });\n\n\n    ops.set('$__while', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($__while 'condition 'expr1 ... 'exprN)\n        //  -> (if condition is true at least 1 or more times) S expr  : exprN\n        //  -> (else)                                          S expr  : null\n        let compFnBody = '';\n        checkParamsLength('compileToken:$__while', args, 1);\n        compFnBody += `((()=>{let _$_rv=null;while(${\n            compileToken([stripQuote(state, r[1])], 0)}){_$_rv=${\n            r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')\n            }}return _$_rv})())`;\n        return compFnBody;\n    });\n\n\n    ops.set('$__do-while', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($__do-while 'condition 'expr1 ... 'exprN)\n        //  -> (if condition is true at least 1 or more times) S expr  : exprN\n        //  -> (else)                                          S expr  : null\n        let compFnBody = '';\n        checkParamsLength('compileToken:$__do-until', args, 1);\n        compFnBody += `((()=>{let _$_rv=null;do{_$_rv=${\n            r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')}}}while(${\n            compileToken([stripQuote(state, r[1])], 0)})return _$_rv)())`;\n        return compFnBody;\n    });\n\n\n    ops.set('$__until', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($__until 'condition 'expr1 ... 'exprN)\n        //  -> (if condition is true at least 1 or more times) S expr  : exprN\n        //  -> (else)                                          S expr  : null\n        let compFnBody = '';\n        checkParamsLength('compileToken:$__until', args, 1);\n        compFnBody += `((()=>{let _$_rv=null;while(!${\n            compileToken([stripQuote(state, r[1])], 0)}){_$_rv=${\n            r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')\n            }}return _$_rv})())`;\n        return compFnBody;\n    });\n\n\n    ops.set('$__do-until', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($__do-until 'condition 'expr1 ... 'exprN)\n        //  -> (if condition is true at least 1 or more times) S expr  : exprN\n        //  -> (else)                                          S expr  : null\n        let compFnBody = '';\n        checkParamsLength('compileToken:$__do-until', args, 1);\n        compFnBody += `((()=>{let _$_rv=null;do{_$_rv=${\n            r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')}}}while(!${\n            compileToken([stripQuote(state, r[1])], 0)})return _$_rv)())`;\n        return compFnBody;\n    });\n\n\n    ops.set('$__repeat', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($__repeat 'i n-times 'expr1 ... 'exprN)\n        //  -> (if n > 0) S expr  : exprN\n        //  -> (else)     S expr  : null\n        let compFnBody = '';\n        checkParamsLength('compileToken:$__repeat', args, 2);\n        if (! isSymbol(args[0])) {\n            throw new Error(`[SX] compileToken: $__repeat : args[0] is not symbol.`);\n        }\n        makeScope(() => {\n            const name = 'v' + ctx.varNamesCount++;\n            ctx.varNames.set((args[0] as SxSymbol).symbol, name);\n            compFnBody += `(((_$_n)=>{let _$_rv=null;for(let ${name}=0;${name}<_$_n;${name}++){_$_rv=${\n                r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')\n                }}return _$_rv})(${compileToken(args, 1)}))`;\n        });\n        return compFnBody;\n    });\n\n\n    ops.set('$__for', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($__for 'x list 'expr1 ... 'exprN)\n        //  -> (if list.length > 0) S expr  : exprN\n        //  -> (else)               S expr  : null\n        let compFnBody = '';\n        checkParamsLength('compileToken:$__for', args, 2);\n        if (! isSymbol(args[0])) {\n            throw new Error(`[SX] compileToken: $__for : args[0] is not symbol.`);\n        }\n        makeScope(() => {\n            const name = 'v' + ctx.varNamesCount++;\n            ctx.varNames.set((args[0] as SxSymbol).symbol, name);\n            compFnBody += `(((_$_l)=>{let _$_rv=null;for(const ${name} of _$_l){_$_rv=${\n                r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')\n                }}return _$_rv})(${compileToken(args, 1)}))`;\n        });\n        return compFnBody;\n    });\n\n\n    ops.set('$__scope', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($__scope isBlockLocal returnMultiple '((name value) | name ...) 'expr1 ... 'exprN)\n        //  -> (if returnMultiple)  S expr  : [expr1 ... exprN]\n        //  -> (else)               S expr  : exprN\n        let compFnBody = '';\n        checkParamsLength('compileToken:$__scope', args, 2);\n        // r[1]: isBlockLocal\n        // r[2]: returnMultiple\n        if (! Array.isArray(r[3])) {\n            throw new Error(`[SX] compileToken: $__scope : args[2] is not array.`);\n        }\n        makeScope(() => {\n            for (const x of stripQuote(state, r[3]) as any[]) {\n                let name = '';\n                if (Array.isArray(x)) {\n                    if (x.length < 1) {\n                        throw new Error(`[SX] compileToken: $__scope : args[0][?] is too short.`);\n                    }\n                    if (! isSymbol(x[0])) {\n                        throw new Error(`[SX] compileToken: $__scope : args[0][?][0] is not symbol.`);\n                    }\n                    name = x[0].symbol;\n                    compFnBody += `(${'v' + ctx.varNamesCount}=${compileToken(x, 1)})`;\n                } else {\n                    if (! isSymbol(x)) {\n                        throw new Error(`[SX] compileToken: $__scope : args[0][?] is not symbol.`);\n                    }\n                    name = x.symbol;\n                }\n                ctx.varDefs += `var v${ctx.varNamesCount}=void 0;`;\n                ctx.varNames.set(name, 'v' + ctx.varNamesCount++);\n            }\n            const s = `${r.slice(4).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')}`;\n            compFnBody += r[2] ? `[${s}]` : `(${s})`;\n        });\n        return compFnBody;\n    });\n\n\n    ops.set('$__try', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($__try 'expr 'catch-expr)\n        //  ->                               S expr  : expr\n        //  -> (if error is raised in expr)  S expr  : catch-expr\n        let compFnBody = '';\n        checkParamsLength('compileToken:$__try', args, 1, 2);\n        compFnBody += `((()=>{try{${\n            compileToken([stripQuote(state, r[1])], 0)}}catch(e${\n            ctx.varNamesCount}){let e${ctx.varNamesCount + 1}=(_$_vars[${String(ctx.varsCount)}])();`;\n        _$_vars[ctx.varsCount++] = getScope_stateApplied(state);\n        makeScope(() => {\n            ctx.varNames.set('$error', 'e' + ctx.varNamesCount++);\n            ctx.varNames.set('$parent', 'e' + ctx.varNamesCount++);\n            compFnBody += `${\n                compileToken([stripQuote(state, r[2])], 0)}}})())`;\n        });\n        return compFnBody;\n    });\n\n\n    ops.set(state.config.reservedNames.raise, function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($raise 'expr)\n        //  -> S expr  : -\n        let compFnBody = '';\n        compFnBody += `((()=>{throw ${\n            compileToken([stripQuoteOrPass(state, r[1])], 0)}})())`;\n        return compFnBody;\n    });\n\n\n    ops.set('$boolean', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($boolean any)\n        //  -> S expr  : boolean\n        let compFnBody = '';\n        checkParamsLength('compileToken:$boolean', args, 1, 1);\n        compFnBody += `((x0=${compileToken(args, 0)\n            }),(Array.isArray(x0)&&x0.length===0?false:boolean(x0)))`;\n        return compFnBody;\n    });\n\n\n    ops.set('$__get', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($__get 'nameOrIndex1 ... 'nameOrIndexN)\n        //  -> S expr  : any\n        let compFnBody = '';\n        checkParamsLength('compileToken:$__get', args, 1);\n        const quoted = stripQuote(state, r[1]);\n        const name = isSymbol(quoted) ? quoted.symbol : (typeof quoted === 'string' ? quoted : null);\n        if (typeof name !== 'string') {\n            throw new Error(`[SX] compileToken: $__get : operand is not symbol: ${JSON.stringify(r[1])}.`);\n        }\n        let vName = '';\n        if (ctx.varNames.has(name)) {\n            vName = ctx.varNames.get(name) as string;\n        } else {\n            _$_vars[ctx.varsCount] = resolveValueSymbol_dynamic(state, name);\n            vName = `_$_vars[${String(ctx.varsCount++)}]`;\n        }\n        const regToVars = (symName: string) => {\n            _$_vars[ctx.varsCount] = symName;\n            return `_$_vars[${String(ctx.varsCount++)}]`;\n        };\n        compFnBody += `((${vName})${r.slice(2).map((x, idx, arr) => `[${\n            isSymbol(arr[idx]) ?\n                regToVars((arr as any)[idx].symbol) :\n                compileToken(arr, idx)}]`).join('')})`;\n        return compFnBody;\n    });\n\n\n    ops.set('$__let', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($__let 'nameStrOrSymbol expr)\n        //  -> S expr  : any\n        let compFnBody = '';\n        checkParamsLength('compileToken:$__let', args, 2, 2);\n        const quoted = stripQuote(state, r[1]);\n        const name = isSymbol(quoted) ? quoted.symbol : (typeof quoted === 'string' ? quoted : null);\n        if (typeof name !== 'string') {\n            throw new Error(`[SX] compileToken: $__let : operand is not rvalue: ${JSON.stringify(r[1])}.`);\n        }\n        if (! ctx.varNames.has(name)) {\n            ctx.varDefs += `var v${ctx.varNamesCount}=void 0;`;\n            ctx.varNames.set(name, 'v' + ctx.varNamesCount++);\n        }\n        compFnBody += `(${ctx.varNames.get(name)}=${compileToken(r, 2)})`;\n        return compFnBody;\n    });\n\n\n    ops.set('$__set', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($__set 'nameOrListOfNameOrIndex expr)\n        //  -> S expr  : any\n        let compFnBody = '';\n        checkParamsLength('compileToken:$__set', args, 2);\n        const quoted = stripQuote(state, r[1]);\n        const name = isSymbol(quoted) ?\n            quoted.symbol :\n            (typeof quoted === 'string' ?\n                quoted :\n                (Array.isArray(quoted) ?\n                    (isSymbol(quoted[0]) ?\n                        quoted[0].symbol :\n                        (typeof quoted[0] === 'string' ? quoted[0] : null)\n                    ) :\n                    null\n                )\n            );\n        if (typeof name !== 'string') {\n            throw new Error(`[SX] compileToken: $__set : operand is not rvalue: ${JSON.stringify(r[1])}.`);\n        }\n        let vName = '';\n        if (ctx.varNames.has(name)) {\n            vName = ctx.varNames.get(name) as string;\n        } else {\n            _$_vars[ctx.varsCount] = resolveValueSymbol_dynamic(state, name);\n            vName = `_$_vars[${String(ctx.varsCount++)}]`;\n        }\n        const regToVars = (symName: string) => {\n            _$_vars[ctx.varsCount] = checkUnsafeVarNames('compileToken:$__set', symName);\n            return `_$_vars[${String(ctx.varsCount++)}]`;\n        };\n        let checkNameCalled = false;\n        let checkNamePos = '';\n        const checkName = (str: string) => {\n            if (! checkNameCalled) {\n                _$_vars[ctx.varsCount] = checkUnsafeVarNames_dynamic('compileToken:$__set');\n                checkNamePos = String(ctx.varsCount++);\n                checkNameCalled = true;\n            }\n            return `(_$_vars[${checkNamePos}](${str}))`;\n        };\n        compFnBody += `((${vName})${(Array.isArray(quoted) ? quoted.slice(1) : []).map((x, idx, arr) => `[${\n            isSymbol(arr[idx]) ?\n                regToVars((arr as any)[idx].symbol) :\n                checkName(compileToken(arr, idx))}]`).join('')}=${compileToken(r, 2)})`;\n        return compFnBody;\n    });\n\n\n    ops.set(state.config.reservedNames.not, function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($not any)\n        //  -> S expr  : boolean\n        let compFnBody = '';\n        checkParamsLength('compileToken:$not', args, 1, 1);\n        compFnBody += `(!${compileToken(args, 0)})`;\n        return compFnBody;\n    });\n\n\n    ops.set('$__and', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($__and 'expr1 ... 'exprN)\n        //  -> (if all of ($boolean expr1) ... ($boolean exprN) are true) S expr  : exprN\n        //  -> (else)                                                     S expr  : expr-i (false left most)\n        let compFnBody = '';\n        checkParamsLength('compileToken:$__and', args, 1);\n        compFnBody += `(${args.map((x) => compileToken([stripQuote(state, x)], 0)).join('&&')})`;\n        return compFnBody;\n    });\n\n\n    ops.set('$__or', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($__or 'expr1 ... 'exprN)\n        //  -> (if any ($boolean expr1) ... ($boolean exprN) are true) S expr  : expr-i (where i: index of item first ($boolean expr-i) is to be true)\n        //  -> (else)                                                  S expr  : expr-i (false right most)\n        let compFnBody = '';\n        checkParamsLength('compileToken:$__or', args, 1);\n        compFnBody += `(${args.map((x) => compileToken([stripQuote(state, x)], 0)).join('||')})`;\n        return compFnBody;\n    });\n\n\n    ops.set('===', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($eq arg1 arg2)\n        //  -> (if arg1 === arg2)  S expr  : true\n        //  -> (else)              S expr  : false\n        let compFnBody = '';\n        checkParamsLength('compileToken:===', args, 2, 2);\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('===')})`;\n        return compFnBody;\n    });\n\n\n    ops.set('!==', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($not-eq arg1 arg2)\n        //  -> (if arg1 !== arg2)  S expr  : true\n        //  -> (else)              S expr  : false\n        let compFnBody = '';\n        checkParamsLength('compileToken:!==', args, 2, 2);\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('!==')})`;\n        return compFnBody;\n    });\n\n\n    ops.set('==', function(r: SxToken[], args: SxToken[]) {\n        // S expression: (== a b)\n        //  -> S expr  : boolean\n        let compFnBody = '';\n        checkParamsLength('compileToken:==', args, 2, 2);\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('==')})`;\n        return compFnBody;\n    });\n\n\n    ops.set('!=', function(r: SxToken[], args: SxToken[]) {\n        // S expression: (!= a b)\n        //  -> S expr  : boolean\n        let compFnBody = '';\n        checkParamsLength('compileToken:!=', args, 2, 2);\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('!=')})`;\n        return compFnBody;\n    });\n\n\n    ops.set('<', function(r: SxToken[], args: SxToken[]) {\n        // S expression: (< a b)\n        //  -> S expr  : boolean\n        let compFnBody = '';\n        checkParamsLength('compileToken:<', args, 2, 2);\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('<')})`;\n        return compFnBody;\n    });\n\n\n    ops.set('<=', function(r: SxToken[], args: SxToken[]) {\n        // S expression: (<= a b)\n        //  -> S expr  : boolean\n        let compFnBody = '';\n        checkParamsLength('compileToken:<=', args, 2, 2);\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('<=')})`;\n        return compFnBody;\n    });\n\n\n    ops.set('>', function(r: SxToken[], args: SxToken[]) {\n        // S expression: (> a b)\n        //  -> S expr  : boolean\n        let compFnBody = '';\n        checkParamsLength('compileToken:>', args, 2, 2);\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('>')})`;\n        return compFnBody;\n    });\n\n\n    ops.set('>=', function(r: SxToken[], args: SxToken[]) {\n        // S expression: (>= a b)\n        //  -> S expr  : boolean\n        let compFnBody = '';\n        checkParamsLength('compileToken:<=', args, 2, 2);\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('>=')})`;\n        return compFnBody;\n    });\n\n\n    ops.set('$concat', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($concat listOrString1 ... listOrStringN)\n        //  -> S expr  : listOrString\n        let compFnBody = '';\n        checkParamsLength('compileToken:$concat', args, 1);\n        let w1 = '';\n        if (Array.isArray(args[0]) && isSymbol((args[0] as any)[0], state.config.reservedNames.spread)) {\n            const w0 = compileToken(args[0] as any, 1);\n            w1 = `(${w0}[0]).concat((${w0}.length>1?${w0}[1]:(typeof ${w0}[0]==='string'?'':[])),`;\n        } else {\n            w1 = `${compileToken(args as any, 0)}.concat(`;\n        }\n        compFnBody += `(${w1}${\n            args.slice(1).map((x, idx, arr) => compileToken(arr, idx)).join(',')}))`;\n        return compFnBody;\n    });\n\n\n    ops.set('+', function(r: SxToken[], args: SxToken[]) {\n        // S expression: (+ number1 ... numberN)\n        //  -> S expr  : number\n        let compFnBody = '';\n        checkParamsLength('compileToken:+', args, 1);\n\n        let hasSpread = false;\n        args.map((x, idx, arr) => {\n            if (Array.isArray(x) && isSymbol((x as any)[0], state.config.reservedNames.spread)) {\n                hasSpread = true;\n            }\n        });\n        if (hasSpread) {\n            compFnBody += `((()=>{let _$_rv=[];${\n                args.map((x, idx, arr) => `_$_rv.push(${compileToken(arr, idx)})`).join(';')\n            };return _$_rv.reduce((x,y)=>x+y);})())`;\n        } else {\n            compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('+')})`;\n        }\n        return compFnBody;\n    });\n\n\n    ops.set('-', function(r: SxToken[], args: SxToken[]) {\n        // S expression: (- number1 ... numberN)\n        //  -> S expr  : number\n        let compFnBody = '';\n        checkParamsLength('compileToken:-', args, 1);\n\n        let hasSpread = false;\n        args.map((x, idx, arr) => {\n            if (Array.isArray(x) && isSymbol((x as any)[0], state.config.reservedNames.spread)) {\n                hasSpread = true;\n            }\n        });\n        if (hasSpread) {\n            compFnBody += `((()=>{let _$_rv=[];${\n                args.map((x, idx, arr) => `_$_rv.push(${compileToken(arr, idx)})`).join(';')\n                };return (_$_rv.length>1?(_$_rv.reduce((x,y)=>x-y)):(_$_rv.length>0?-_$_rv[0]:NaN));})())`;\n        } else {\n            compFnBody += `(${r.length > 2 ?\n                args.map((x, idx, arr) => compileToken(arr, idx)).join('-') :\n                `-(${String(compileToken(r, 1))})`})`;\n        }\n        return compFnBody;\n    });\n\n\n    ops.set('*', function(r: SxToken[], args: SxToken[]) {\n        // S expression: (* number1 ... numberN)\n        //  -> S expr  : number\n        let compFnBody = '';\n        checkParamsLength('compileToken:*', args, 2);\n\n        let hasSpread = false;\n        args.map((x, idx, arr) => {\n            if (Array.isArray(x) && isSymbol((x as any)[0], state.config.reservedNames.spread)) {\n                hasSpread = true;\n            }\n        });\n        if (hasSpread) {\n            compFnBody += `((()=>{let _$_rv=[];${\n                args.map((x, idx, arr) => `_$_rv.push(${compileToken(arr, idx)})`).join(';')\n                };return _$_rv.reduce((x,y)=>x*y);})())`;\n        } else {\n            compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('*')})`;\n        }\n        return compFnBody;\n    });\n\n\n    ops.set('**', function(r: SxToken[], args: SxToken[]) {\n        // S expression: (** number1 ... numberN)\n        //  -> S expr  : number\n        let compFnBody = '';\n        checkParamsLength('compileToken:**', args, 2);\n\n        let hasSpread = false;\n        args.map((x, idx, arr) => {\n            if (Array.isArray(x) && isSymbol((x as any)[0], state.config.reservedNames.spread)) {\n                hasSpread = true;\n            }\n        });\n        if (hasSpread) {\n            compFnBody += `((()=>{let _$_rv=[];${\n                args.map((x, idx, arr) => `_$_rv.push(${compileToken(arr, idx)})`).join(';')\n                };return _$_rv.reduce((x,y)=>x**y);})())`;\n        } else {\n            compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('**')})`;\n        }\n        return compFnBody;\n    });\n\n\n    ops.set('/', function(r: SxToken[], args: SxToken[]) {\n        // S expression: (/ number1 ... numberN)\n        //  -> S expr  : number\n        let compFnBody = '';\n        checkParamsLength('compileToken:/', args, 2);\n\n        let hasSpread = false;\n        args.map((x, idx, arr) => {\n            if (Array.isArray(x) && isSymbol((x as any)[0], state.config.reservedNames.spread)) {\n                hasSpread = true;\n            }\n        });\n        if (hasSpread) {\n            compFnBody += `((()=>{let _$_rv=[];${\n                args.map((x, idx, arr) => `_$_rv.push(${compileToken(arr, idx)})`).join(';')\n                };return _$_rv.reduce((x,y)=>x/y);})())`;\n        } else {\n            compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('/')})`;\n        }\n        return compFnBody;\n    });\n\n\n    ops.set('%', function(r: SxToken[], args: SxToken[]) {\n        // S expression: (% number1 ... numberN)\n        //  -> S expr  : number\n        let compFnBody = '';\n        checkParamsLength('compileToken:%', args, 2);\n\n        let hasSpread = false;\n        args.map((x, idx, arr) => {\n            if (Array.isArray(x) && isSymbol((x as any)[0], state.config.reservedNames.spread)) {\n                hasSpread = true;\n            }\n        });\n        if (hasSpread) {\n            compFnBody += `((()=>{let _$_rv=[];${\n                args.map((x, idx, arr) => `_$_rv.push(${compileToken(arr, idx)})`).join(';')\n                };return _$_rv.reduce((x,y)=>x%y);})())`;\n        } else {\n            compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('%')})`;\n        }\n        return compFnBody;\n    });\n\n\n    ops.set('<<', function(r: SxToken[], args: SxToken[]) {\n        // S expression: (<< number shift)\n        //  -> S expr  : number\n        let compFnBody = '';\n        checkParamsLength('compileToken:<<', args, 2, 2);\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('<<')})`;\n        return compFnBody;\n    });\n\n\n    ops.set('>>', function(r: SxToken[], args: SxToken[]) {\n        // S expression: (>> number shift)\n        //  -> S expr  : number\n        let compFnBody = '';\n        checkParamsLength('compileToken:>>', args, 2, 2);\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('>>')})`;\n        return compFnBody;\n    });\n\n\n    ops.set('>>>', function(r: SxToken[], args: SxToken[]) {\n        // S expression: (>>> number shift)\n        //  -> S expr  : number\n        let compFnBody = '';\n        checkParamsLength('compileToken:>>>', args, 2, 2);\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('>>>')})`;\n        return compFnBody;\n    });\n\n\n    ops.set('$bit-not', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($bit-not number)\n        //  -> S expr  : number\n        let compFnBody = '';\n        checkParamsLength('compileToken:$bit-not', args, 1, 1);\n        compFnBody += `(~(${compileToken(r, 1)}))`;\n        return compFnBody;\n    });\n\n\n    ops.set('$bit-and', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($bit-and numberA numberB)\n        //  -> S expr  : number\n        let compFnBody = '';\n        checkParamsLength('compileToken:$bit-and', args, 2, 2);\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('&')})`;\n        return compFnBody;\n    });\n\n\n    ops.set('$bit-or', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($bit-or numberA numberB)\n        //  -> S expr  : number\n        let compFnBody = '';\n        checkParamsLength('compileToken:$bit-or', args, 2, 2);\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('|')})`;\n        return compFnBody;\n    });\n\n\n    ops.set('$bit-xor', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($bit-xor numberA numberB)\n        //  -> S expr  : number\n        let compFnBody = '';\n        checkParamsLength('compileToken:$bit-xor', args, 2, 2);\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('^')})`;\n        return compFnBody;\n    });\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserState,\n         SxEof,\n         SxExternalValue,\n         SxSymbol,\n         SxDottedFragment,\n         SxComment,\n         SxToken,\n         SxChar,\n         ScriptTerminationError } from './types';\nimport { quote,\n         backquote,\n         wrapByUnquote,\n         spread,\n         splice }                 from './ast';\n\n\n\nfunction isEOF(ch: SxChar): boolean {\n    return typeof ch === 'object' && Object.prototype.hasOwnProperty.call(ch, 'eof');\n}\n\n\nfunction isSpace(ch: SxChar): boolean {\n    return typeof ch === 'string' && ch.trim().length === 0;\n}\n\n\nfunction isNumberFirstChar(ch: SxChar): boolean {\n    return typeof ch === 'string' && /^[0-9\\+\\-]$/.test(ch);\n}\n\n\nfunction isNumberAfterSignChar(ch: SxChar): boolean {\n    return typeof ch === 'string' && /^[0-9]$/.test(ch);\n}\n\n\nfunction isSymbolFirstChar(ch: SxChar): boolean {\n    return typeof ch === 'string' &&\n        !isSpace(ch) &&\n        !isNumberFirstChar(ch);\n}\n\n\n\nfunction lookCurrentLineHint(state: SxParserState): string {\n    return `line: ${state.line} / strings: ${state.index} / pos: ${state.pos} :${\n        state.strings.length > state.index ?\n            state.strings[state.index].slice(state.pos, state.pos + 20) : ''}`;\n}\n\n\nfunction getChar(state: SxParserState, virtualEof?: string[], disableEscape?: boolean): SxChar {\n    if (state.strings.length <= state.index) {\n        return {eof: true};\n    }\n    if (state.strings[state.index].length <= state.pos) {\n        if ((! state.values) || (state.values.length <= state.index)) {\n            state.pos = 0;\n            state.index++;\n            return getChar(state);\n        } else {\n            const ch = {value: state.values[state.index]};\n            state.pos = 0;\n            state.index++;\n            return ch;\n        }\n    }\n    if (virtualEof) {\n        for (const v of virtualEof) {\n            const ch = state.strings[state.index].slice(state.pos, state.pos + v.length);\n            if (ch === v) {\n                state.pos += v.length;\n                state.line += ch.split('\\n').length - 1;\n                return { eof: false , eofSeq: v };\n            }\n        }\n    }\n    {\n        let ch = state.strings[state.index].slice(state.pos, state.pos + 1);\n        state.pos++;\n\n        if (ch === '\\n') {\n            state.line++;\n        }\n\n        if ((! disableEscape) && ch === '\\\\') {\n            if (state.strings[state.index].length <= state.pos) {\n                throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\n            }\n            ch = state.strings[state.index].slice(state.pos, state.pos + 1);\n            state.pos++;\n\n            switch (ch) {\n            case 'b':\n                ch = '\\b';\n                break;\n            case 't':\n                ch = '\\t';\n                break;\n            case 'n':\n                ch = '\\n';\n                break;\n            case 'v':\n                ch = '\\v';\n                break;\n            case 'f':\n                ch = '\\f';\n                break;\n            case 'r':\n                ch = '\\r';\n                break;\n            case 'U': case 'u':\n                {\n                    if (state.strings[state.index].slice(state.pos, state.pos + 1) === '{') {\n                        let ch1 = '';\n                        for (let i = 0; i < 6; i++) {\n                            const ch2 = state.strings[state.index].slice(state.pos + i, state.pos + 1 + i);\n                            if (ch2 === '}') {\n                                if (i === 0) {\n                                    throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\n                                }\n                                state.pos += i;\n                                break;\n                            } else if (! /^[0-9A-Fa-f]{1}$/.test(ch1)) {\n                                throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\n                            }\n                            ch1 += ch2;\n                        }\n                        if (state.strings[state.index].slice(state.pos, state.pos + 1) !== '}') {\n                            throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\n                        }\n                        state.pos++;\n                        ch = String.fromCodePoint(Number.parseInt(ch1, 16));\n                    } else {\n                        const ch1 = state.strings[state.index].slice(state.pos, state.pos + 4);\n                        if (! /^[0-9A-Fa-f]{4}$/.test(ch1)) {\n                            throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\n                        }\n                        state.pos += 4;\n                        ch = String.fromCodePoint(Number.parseInt(ch1, 16));\n                    }\n                }\n                break;\n            }\n        }\n        return ch;\n    }\n}\n\n\nfunction lookAheads(state: SxParserState, n: number, virtualEof?: string[], disableEscape?: boolean): SxChar[] {\n    const index = state.index;\n    const pos = state.pos;\n    const line = state.line;\n    const chs: SxChar[] = [];\n\n    try {\n        for (let i = 0; i < n; i++) {\n            chs.push(getChar(state, virtualEof, disableEscape));\n        }\n    } finally {\n        state.index = index;\n        state.pos = pos;\n        state.line = line;\n    }\n\n    return chs;\n}\n\n\nfunction lookAhead(state: SxParserState, virtualEof?: string[], disableEscape?: boolean): SxChar {\n    const index = state.index;\n    const pos = state.pos;\n    const line = state.line;\n    let ch: SxChar;\n\n    try {\n        ch = getChar(state, virtualEof, disableEscape);\n    } finally {\n        state.index = index;\n        state.pos = pos;\n        state.line = line;\n    }\n\n    return ch;\n}\n\n\nfunction skipWhitespaces(state: SxParserState): void {\n    let ch = lookAhead(state);\n    while (!isEOF(ch) && isSpace(ch)) {\n        getChar(state);\n        ch = lookAhead(state);\n    }\n}\n\n\n\nfunction parseNumber(state: SxParserState, virtualEof?: string[]): number {\n    let s = '';\n    let ch = lookAhead(state, virtualEof);\n\n    while (! isEOF(ch)) {\n        if (typeof ch === 'string') {\n            if (/^0[XxOoBb][0-9]*$/.test(s + ch)) {\n                getChar(state, virtualEof);\n                s += ch;\n            } else if (/^[0-9\\+\\-\\.EeInfinityNaN]+$/.test(s + ch)) {\n                getChar(state, virtualEof);\n                s += ch;\n            } else {\n                break;\n            }\n        } else {\n            break;\n        }\n\n        ch = lookAhead(state, virtualEof);\n    }\n\n    if (! /^([\\+\\-]?\\d*\\.?\\d+(?:[Ee][\\+\\-]?\\d+)?)|(0[XxOoBb][0-9]+)|([\\+\\-]Infinity)|(NaN)$/.test(s)) {\n        throw new Error(`[SX] parseNumber: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\n    }\n    return Number(s);\n}\n\n\nfunction parseSymbol(state: SxParserState, virtualEof?: string[]): SxSymbol | number | null {\n    let s = '';\n    let ch = lookAhead(state, virtualEof);\n\n    while (! isEOF(ch)) {\n        if (typeof ch === 'string') {\n            if (isSpace(ch)) {\n                break;\n            } else if (ch === '#' && lookAheads(state, 2, virtualEof)[1] === '|') {\n                break;\n            } else if (/^[^.;()\"]+$/.test(s + ch)) {\n                getChar(state, virtualEof);\n                s += ch;\n            } else {\n                break;\n            }\n        } else {\n            if (typeof ch === 'object' && Object.prototype.hasOwnProperty.call(ch, 'value')) {\n                getChar(state, virtualEof);\n                const v = (ch as SxExternalValue).value;\n                s += String(ch);\n            } else {\n                throw new Error(`[SX] parseSymbol: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\n            }\n        }\n\n        ch = lookAhead(state, virtualEof);\n    }\n\n    if (state.config.enableShorthands) {\n        let m: RegExpMatchArray | null = null;\n        // tslint:disable-next-line:no-conditional-assignment\n        if (m = s.match(/^:((?:\\:[^=:]+?)+?)=$/)) {\n            // ::foo:bar:baz= -> ($splice ($set (foo bar baz)))\n            const ws = m[1].slice(1).split(':');\n            const z =\n                [{symbol: state.config.reservedNames.splice},\n                    [{symbol: state.config.reservedNames.set},\n                        ws\n                    ]\n                ];\n            return z as any;\n        }\n        // tslint:disable-next-line:no-conditional-assignment\n        else if (m = s.match(/^:((?:\\:[^@:]+?)+?)@([^@:]+?)$/)) {\n            // ::foo:bar@baz -> ($splice ($call ($get foo bar) baz))\n            const ws = m[1].slice(1).split(':');\n            const z =\n                [{symbol: state.config.reservedNames.splice},\n                    [{symbol: state.config.reservedNames.call},\n                        [{symbol: state.config.reservedNames.get}, ...ws],\n                        {symbol: m[2]},\n                    ]\n                ];\n            return z as any;\n        }\n        // tslint:disable-next-line:no-conditional-assignment\n        else if (m = s.match(/^:((?:\\:[^:]+?)+?)$/)) {\n            // ::foo:bar:baz -> ($get foo bar baz)\n            const ws = m[1].slice(1).split(':');\n            const z = [{symbol: state.config.reservedNames.get}, ...ws];\n            return z as any;\n        }\n    }\n\n    return {symbol: s};\n}\n\n\nfunction parseStringOrComment(\n        state: SxParserState, eof: string[],\n        valuesStartSeq: string | null ,\n        valuesStopChar: string,\n        disableEscape: boolean\n    ): { strings: string[], values: any[] } {\n\n    const eofSeqs = valuesStartSeq ? [...eof, valuesStartSeq] : eof;\n    const strings: string[] = [];\n    const values: any[] = [];\n\n    for (;;) {\n        let s = '';\n        let ch = lookAhead(state, eofSeqs, disableEscape);\n\n        while (! isEOF(ch)) {\n            if (typeof ch === 'string') {\n                getChar(state, eofSeqs, disableEscape);\n                s += ch;\n            } else {\n                if (typeof ch === 'object' && Object.prototype.hasOwnProperty.call(ch, 'value')) {\n                    getChar(state, eofSeqs, disableEscape);\n                    const v = (ch as SxExternalValue).value;\n                    s += String(ch);\n                } else {\n                    throw new Error(`[SX] parseStringOrComment: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\n                }\n            }\n\n            ch = lookAhead(state, eofSeqs, disableEscape);\n        }\n\n        getChar(state, eofSeqs, disableEscape);\n\n        if ((ch as SxEof).eof === true) {\n            throw new ScriptTerminationError('parseStringOrComment');\n        }\n\n        strings.push(s);\n\n        if ((ch as SxEof).eofSeq === valuesStartSeq) {\n            values.push(parseList(state, valuesStopChar, []));\n        } else {\n            break;\n        }\n    }\n\n    return { strings, values };\n}\n\n\nfunction parseString(state: SxParserState, disableEscape: boolean): string {\n    return parseStringOrComment(state, ['\"'], null, ')', disableEscape).strings[0];\n}\n\n\nfunction parseHereDoc(state: SxParserState, symbol: SxSymbol, attrs: SxToken[] | null): SxToken[] {\n    const q: SxToken[] = [symbol];\n\n    if (attrs) {\n        q.push(attrs);\n    }\n\n    const inner = parseStringOrComment(state, ['\"\"\"'], '%%%(', ')', false);\n    for (let i = 0; i < inner.strings.length; i++) {\n        q.push(inner.strings[i]);\n        if (i < inner.values.length) {\n            q.push(inner.values[i]);\n        }\n    }\n\n    return q;\n}\n\n\nfunction parseSingleLineComment(state: SxParserState): SxComment | ' ' {\n    return {\n        comment: parseStringOrComment(state, ['\\r', '\\n'], null, ')', false).strings[0]\n    };\n}\n\n\nfunction parseMultiLineComment(state: SxParserState): SxComment | ' ' {\n    return {\n        comment: parseStringOrComment(state, ['|#'], null, ')', false).strings[0]\n    };\n}\n\n\nfunction parseOneToken(state: SxParserState): SxToken {\n    skipWhitespaces(state);\n    let ch = lookAhead(state);\n\n    while (! isEOF(ch)) {\n        switch (ch) {\n        case ')':\n            throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\n\n        case '(':\n            getChar(state);\n            return parseList(state, ')', []);\n\n        case \"'\": case \"`\": case ',':\n            {\n                getChar(state);\n                const ahead = lookAhead(state);\n                let isSpliceUnquote = false;\n                if (ch === ',' && ahead === '@') {\n                    getChar(state);\n                    isSpliceUnquote = true;\n                }\n                skipWhitespaces(state);\n                const ret = (ch === \"'\" ?\n                        quote :\n                        (ch === \"`\" ? backquote : wrapByUnquote))\n                    (state, parseOneToken(state)\n                );\n                return (isSpliceUnquote ? splice(state, ret) : ret);\n            }\n\n        case \".\":\n            {\n                getChar(state);\n                const aheads = lookAheads(state, 2);\n                if (state.config.enableSpread && aheads[0] === '.' && aheads[1] === '.') {\n                    getChar(state);\n                    getChar(state);\n                    skipWhitespaces(state);\n                    return spread(state, parseOneToken(state));\n                } else {\n                    skipWhitespaces(state);\n                    return {dotted: parseOneToken(state)};\n                }\n            }\n\n        case ';':\n            getChar(state);\n            return parseSingleLineComment(state);\n\n        case '#':\n            {\n                const aheads = lookAheads(state, 2);\n                if (aheads[1] === '|') {\n                    getChar(state);\n                    getChar(state);\n                    return parseMultiLineComment(state);\n                } else {\n                    return parseSymbol(state);\n                }\n            }\n\n        case '\"':\n            {\n                getChar(state);\n                const aheads = lookAheads(state, 4);\n                if (state.config.enableHereDoc && aheads[0] === '\"' && aheads[1] === '\"') {\n                    let isHereDoc = true;\n                    if (isEOF(aheads[2]) || isSpace(aheads[2])) {\n                        // here doc\n                    } else if (isNumberFirstChar(aheads[2])) { // TODO: single +/- char is a symbol.\n                        if (aheads[2] === '+' || aheads[2] === '-') {\n                            if (! isNumberAfterSignChar(aheads[3])) {\n                                isHereDoc = false;\n                            }\n                        }\n                        // here doc\n                    } else if (isSymbolFirstChar(aheads[2])) {\n                        isHereDoc = false;\n                    } else {\n                        // here doc\n                    }\n                    getChar(state);\n                    getChar(state);\n\n                    let sym: SxSymbol | number | null = null;\n                    let attrs: SxToken[] | null = null;\n                    if (isHereDoc) {\n                        sym = {symbol: state.config.reservedNames.Template};\n                    } else {\n                        sym = parseSymbol(state, ['@']);\n                        if (sym === null) {\n                            throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\n                        }\n                        if (typeof sym === 'number') {\n                            throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\n                        }\n                        const ahs = lookAheads(state, 2);\n                        if (ahs[0] === '@') {\n                            if (ahs[1] !== '{') {\n                                throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\n                            }\n                            getChar(state);\n                            getChar(state);\n                            const a = parseList(state, '}', [{symbol: '@'}]);\n                            if (Array.isArray(a)) {\n                                attrs = a;\n                            }\n                        }\n                    }\n\n                    return parseHereDoc(state, sym, attrs);\n                } else {\n                    return parseString(state, false);\n                }\n            }\n\n        case '@':\n            if (state.config.enableVerbatimStringLiteral) {\n                const aheads = lookAheads(state, 2);\n                if (aheads[1] === '\"') {\n                    getChar(state);\n                    getChar(state);\n                    return parseString(state, true);\n                }\n            }\n            // FALL_THRU\n\n        default:\n            if (typeof ch !== 'string') {\n                if (typeof ch === 'object' && Object.prototype.hasOwnProperty.call(ch, 'value')) {\n                    getChar(state);\n                    return state.config.wrapExternalValue ? ch : (ch as SxExternalValue).value;\n                } else {\n                    throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\n                }\n            } else if (isSpace(ch)) {\n                break;\n            } else if (isNumberFirstChar(ch)) { // TODO: single +/- char is a symbol.\n                if (ch === '+' || ch === '-') {\n                    const aheads = lookAheads(state, 2);\n                    if (! isNumberAfterSignChar(aheads[1])) {\n                        return parseSymbol(state);\n                    }\n                }\n                return parseNumber(state);\n            } else if (isSymbolFirstChar(ch)) {\n                return parseSymbol(state);\n            } else {\n                throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\n            }\n        }\n\n        skipWhitespaces(state);\n        ch = lookAhead(state);\n    }\n\n    throw new ScriptTerminationError('parseOneToken');\n}\n\n\nfunction parseList(state: SxParserState, listStopChar: string, initialList: SxToken[]): SxToken {\n    const r: SxToken[] = initialList.slice(0);\n    let dotted = false;\n\n    skipWhitespaces(state);\n    let ch = lookAhead(state);\n\n    while (! isEOF(ch)) {\n        switch (ch) {\n        case listStopChar:\n            getChar(state);\n            if (dotted) {\n                return r[0];\n            } else {\n                return r;\n            }\n\n        default:\n            {\n                const t = parseOneToken(state);\n                if (typeof t === 'object' && Object.prototype.hasOwnProperty.call(t, 'dotted')) {\n                    if (r.length !== 1) {\n                        throw new Error(`[SX] parseList: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\n                    }\n                    dotted = true;\n                    if (Array.isArray(t)) {\n                        t.unshift(r.pop() as SxToken);\n                        r.push(t);\n                    } else {\n                        r.push({car: r.pop() as SxToken, cdr: (t as SxDottedFragment).dotted});\n                    }\n                } else if (typeof t === 'object' && Object.prototype.hasOwnProperty.call(t, 'comment')) {\n                    if (! state.config.stripComments) {\n                        r.push(t);\n                    }\n                } else {\n                    if (dotted) {\n                        throw new Error(`[SX] parseList: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\n                    }\n                    r.push(t);\n                }\n            }\n            break;\n        }\n\n        skipWhitespaces(state);\n        ch = lookAhead(state);\n    }\n\n    throw new ScriptTerminationError('parseList');\n}\n\n\n\nexport function parse(state: SxParserState) {\n    const r: SxToken[] = [];\n\n    skipWhitespaces(state);\n    let ch = lookAhead(state);\n\n    while (! isEOF(ch)) {\n        switch (ch) {\n        case '(':\n            getChar(state);\n            r.push(parseList(state, ')', []));\n            break;\n\n        case \"'\": case \"`\":\n            {\n                getChar(state);\n                skipWhitespaces(state);\n                for (;;) {\n                    const t = parseOneToken(state);\n                    if (typeof t === 'object' && Object.prototype.hasOwnProperty.call(t, 'comment')) {\n                        if (! state.config.stripComments) {\n                            r.push(t);\n                        }\n                    } else {\n                        r.push((ch === \"'\" ? quote : backquote)(state, t));\n                        break;\n                    }\n                }\n                break;\n            }\n\n        case ';':\n            getChar(state);\n            if (state.config.stripComments) {\n                parseSingleLineComment(state);\n            } else {\n                r.push(parseSingleLineComment(state));\n            }\n            break;\n\n        case '#':\n            {\n                const aheads = lookAheads(state, 2);\n                if (aheads[1] === '|') {\n                    getChar(state);\n                    getChar(state);\n                    if (state.config.stripComments) {\n                        parseMultiLineComment(state);\n                    } else {\n                        r.push(parseMultiLineComment(state));\n                    }\n                } else {\n                    getChar(state);\n                    if (state.config.stripComments) {\n                        parseSingleLineComment(state);\n                    } else {\n                        r.push(parseSingleLineComment(state));\n                    }\n                }\n            }\n            break;\n\n        case '\"':\n            {\n                const aheads = lookAheads(state, 3);\n                if (aheads[1] === '\"' && aheads[2] === '\"') {\n                    r.push(parseOneToken(state));\n                    break;\n                }\n            }\n            // FALL_THRU\n\n        default:\n            throw new Error(`[SX] parseInitialState: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\n        }\n\n        skipWhitespaces(state);\n        ch = lookAhead(state);\n    }\n\n    return r;\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserState,\n         SxSymbol,\n         SxToken,\n         FatalError,\n         CapturedScopes,\n         SxMacroInfo }         from '../../types';\nimport { isSymbol,\n         quote }               from '../../ast';\nimport { evaluate,\n         resolveValueSymbolScope,\n         collectCapturedVariables,\n         getCapturedScopes,\n         getScope,\n         getGlobalScope,\n         installScope,\n         uninstallScope,\n         optimizeTailCall,\n         toNumber }            from '../../evaluate';\nimport { compileLambda }       from '../../compile';\nimport { checkParamsLength,\n         checkUnsafeVarNames } from '../../errors';\n\n\n\n// tslint:disable-next-line:function-constructor\nconst globalObj = Function('return this')();\n\n\nexport const $car = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($car '(first second ... last))\n    //  -> S expr  : first\n    checkParamsLength('$car', args, 1, 1);\n\n    const car = $$first(...args);\n    if (! Array.isArray(car)) {\n        throw new Error(`[SX] $car: Invalid argument(s): args[0] is not array.`);\n    }\n    if (car.length === 0) {\n        throw new Error(`[SX] $car: Invalid argument(s): args[0] is nil.`);\n    }\n    return car[0];\n};\nexport const $$car = $car(null as any, null as any);\n\n\nexport const $cdr = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($cdr '(first second ... last))\n    //  -> S expr  : (second ... last)\n    checkParamsLength('$cdr', args, 1, 1);\n\n    const car = $$first(...args);\n    if (! Array.isArray(car)) {\n        throw new Error(`[SX] $cdr: Invalid argument(s): args[0] is not array.`);\n    }\n    if (car.length === 0) {\n        throw new Error(`[SX] $cdr: Invalid argument(s): args[0] is nil.`);\n    }\n    return car.slice(1);\n};\nexport const $$cdr = $cdr(null as any, null as any);\n\n\nexport const $cons = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($cons arg1 '(arg2-item1 ...) ... argN)\n    //  -> S expr  : (arg1 arg2-item1 ...)\n    // S expression: ($cons arg1 nilOrNull ... argN)\n    //  -> S expr  : (arg1)\n    // S expression: ($cons arg1 arg2 ... argN)\n    //  -> S expr  : arg1.arg2\n    checkParamsLength('$cons', args, 2, 2);\n\n    let {car, cdr} = $$firstAndSecond(...args);\n    if (car === null) {\n        car = [];\n    }\n    if (cdr === null) {\n        cdr = [];\n    }\n\n    if (Array.isArray(cdr)) {\n        cdr = cdr.slice(0);\n        cdr.unshift(car);\n        return cdr;\n    } else {\n        return {car, cdr};\n    }\n};\nexport const $$cons = $cons(null as any, null as any);\n\n\nexport const $first = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($first first second ... last)\n    //  -> S expr  : first\n    // S expression: ($first)\n    //  -> S expr  : null\n    const car: any = args.slice(0, 1);\n    return (car.length === 1) ? car[0] : null;\n};\nexport const $$first = $first(null as any, null as any);\n\n\nexport const $second = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($second first second ... last)\n    //  -> S expr  : second\n    // S expression: ($second first)\n    //  -> S expr  : null\n    const cdr: any = args.slice(1, 2);\n    return (cdr.length === 1) ? cdr[0] : null;\n};\nexport const $$second = $second(null as any, null as any);\n\n\nexport const $last = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($last first second ... last)\n    //  -> S expr  : last\n    // S expression: ($last)\n    //  -> S expr  : null\n    const car: any = args.slice(args.length - 1, args.length);\n    return (car.length === 1) ? car[0] : null;\n};\nexport const $$last = $last(null as any, null as any);\n\n\nexport const $rest = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($rest first second ... last)\n    //  -> S expr  : (second ... last)\n    // S expression: ($rest first)\n    //  -> S expr  : null\n    const cdr: any = args.slice(1);\n    return (0 < cdr.length) ? cdr : null;\n};\nexport const $$rest = $rest(null as any, null as any);\n\n\nexport const $firstAndSecond = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($first-and-second first second ... last)\n    //  -> S expr  : first.second\n    let car: any = args.slice(0, 1);\n    car = (car.length === 1) ? car[0] : null;\n\n    let cdr: any = args.slice(1, 2);\n    cdr = (cdr.length === 1) ? cdr[0] : null;\n\n    return {car, cdr};\n};\nexport const $$firstAndSecond = $firstAndSecond(null as any, null as any);\n\n\nexport const $atom = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($atom arg1 ...)\n    //  -> (if arg1 is list or dotted pair)  S expr  : false\n    //  -> (if arg1 is nil or anything else) S expr  : true\n    checkParamsLength('$atom', args, 1, 1);\n\n    const car = $$first(...args);\n\n    if (car === null || car === void 0) {\n        return true;\n    }\n    if (Array.isArray(car)) {\n        if (car.length === 0) return  true;\n        else                  return false;\n    }\n\n    switch (typeof car) {\n    case 'number': case 'string': case 'function': case 'boolean':\n        return true;\n    case 'object':\n        return isSymbol(car) ? true : false;\n    }\n    return false;\n};\nexport const $$atom = $atom(null as any, null as any);\n\n\nexport const $eq = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($eq arg1 arg2)\n    //  -> (if arg1 === arg2)  S expr  : true\n    //  -> (else)              S expr  : false\n    checkParamsLength('$eq', args, 2, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    return car === cdr;\n};\nexport const $$eq = $eq(null as any, null as any);\n\n\nexport const $notEq = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($not-eq arg1 arg2)\n    //  -> (if arg1 !== arg2)  S expr  : true\n    //  -> (else)              S expr  : false\n    checkParamsLength('$notEq', args, 2, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    return car !== cdr;\n};\nexport const $$notEq = $notEq(null as any, null as any);\n\n\nexport const $list = (state: SxParserState, name: string) => (...args: any[]) =>\n    // S expression: ($list arg1 ... argN)\n    //  -> S expr  : (arg1 ... argN)\n    args.slice(0);\nexport const $$list = $list(null as any, null as any);\n\n\n// tslint:disable-next-line:variable-name\nexport const $__scope = (state: SxParserState, name: string, capturedScopes?: CapturedScopes) => (...args: any[]) => {\n    // S expression: ($__scope isBlockLocal returnMultiple '((name value) | name ...) 'expr1 ... 'exprN)\n    //  -> (if returnMultiple)  S expr  : [expr1 ... exprN]\n    //  -> (else)               S expr  : exprN\n    checkParamsLength('$__scope', args, 3);\n\n    const isBlockLocal = $$first(...args);\n    const returnMultiple = $$second(...args);\n    const {car, cdr} = $$firstAndSecond(...args.slice(2));\n    let r: SxToken = null;\n\n    const scope: any = {};\n    if (Array.isArray(car)) {\n        for (const x of car) {\n            if (Array.isArray(x)) {\n                const kv = $$firstAndSecond(...x);\n                const kvSym = isSymbol(kv.car);\n                const kvName = kvSym ? kvSym.symbol : String(kv.car);\n                checkUnsafeVarNames('$__scope', kvName);\n                scope[kvName] = evaluate(state, kv.cdr);\n            } else {\n                const xSym = isSymbol(x);\n                const xName = xSym ? xSym.symbol : String(x);\n                checkUnsafeVarNames('$__scope', xName);\n                scope[xName] = null;\n            }\n        }\n    }\n    installScope(state, scope, isBlockLocal, capturedScopes);\n\n    try {\n        if (4 < args.length) {\n            if (returnMultiple) {\n                r = [];\n                for (const x of args.slice(3)) {\n                    r.push(evaluate(state, x));\n                }\n            } else {\n                for (const x of args.slice(3)) {\n                    r = evaluate(state, x);\n                }\n            }\n        } else {\n            r = evaluate(state, cdr);\n        }\n    } finally {\n        uninstallScope(state);\n    }\n\n    return r;\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__globalScope = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__global returnMultiple 'expr1 ... 'exprN)\n    //  -> (if returnMultiple)  S expr  : [expr1 ... exprN]\n    //  -> (else)               S expr  : exprN\n    checkParamsLength('$__globalScope', args, 1);\n\n    const returnMultiple = $$first(...args);\n    const cdr = $$second(...args);\n    let r: SxToken = null;\n\n    installScope(state, getGlobalScope(state).scope, true);\n    try {\n        if (2 < args.length) {\n            if (returnMultiple) {\n                r = [];\n                for (const x of args.slice(1)) {\n                    r.push(evaluate(state, x));\n                }\n            } else {\n                for (const x of args.slice(1)) {\n                    r = evaluate(state, x);\n                }\n            }\n        } else {\n            r = evaluate(state, cdr);\n        }\n    } finally {\n        uninstallScope(state);\n    }\n\n    return r;\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__capture = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__capture '(sym1 ... symN) 'expr1 ... 'exprN)\n    //  -> S expr  : exprN\n    checkParamsLength('$__capture', args, 1);\n\n    const formalArgs: SxSymbol[] = args[0];\n    if (! Array.isArray(formalArgs)) {\n        throw new Error(`[SX] $__lambda: Invalid argument(s): args[0] is not array.`);\n    }\n\n    let r: SxToken = null;\n\n    const capturedScopes = collectCapturedVariables(state, formalArgs);\n    installScope(state, {}, true, capturedScopes);\n    try {\n        for (const x of args.slice(1)) {\n            r = evaluate(state, x);\n        }\n    } finally {\n        uninstallScope(state);\n    }\n\n    return r;\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__lambda = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__lambda '(sym1 ... symN) 'expr1 ... 'exprN)\n    //  -> S expr  : fn\n    checkParamsLength('$__lambda', args, 2);\n\n    const formalArgs: SxSymbol[] = args[0];\n    if (! Array.isArray(formalArgs)) {\n        throw new Error(`[SX] $__lambda: Invalid argument(s): args[0] is not array.`);\n    }\n\n    let lastIsSpread = false;\n    for (let i = 0; i < formalArgs.length; i++) {\n        const fa = formalArgs[i];\n        if (i === formalArgs.length - 1 && state.config.enableSpread &&\n            Array.isArray(fa) && isSymbol(fa[0], state.config.reservedNames.spread)) {\n            if (! isSymbol(fa[1])) {\n                throw new Error(`[SX] $__lambda: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\n            }\n            formalArgs[i] = fa[1];\n            lastIsSpread = true;\n        } else if (! isSymbol(fa)) {\n            throw new Error(`[SX] $__lambda: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\n        }\n    }\n\n    let fnBody = args.slice(1);\n    if (state.config.enableTailCallOptimization) {\n        fnBody = optimizeTailCall(state, formalArgs, fnBody);\n    }\n\n    const capturedScopes = getCapturedScopes(state);\n\n    const fn = function(this: any, ...actualArgs: any[]) {\n        if ((actualArgs.length + (lastIsSpread ? 1 : 0)) < formalArgs.length) {\n            throw new Error(`[SX] func call: Actual args too short: actual ${\n                actualArgs.length} / formal ${formalArgs.length}.`);\n        }\n        // TODO: add type checking\n        return $__scope(state, name, capturedScopes)(false, false, [\n            [state.config.reservedNames.self, fn],\n            [state.config.reservedNames.thiz, this === globalObj || this === void 0 ? null : quote(state, this)],\n            ...(formalArgs.map((x: SxSymbol, index) => [\n                x.symbol,\n                quote(state,\n                    (lastIsSpread && index === formalArgs.length - 1) ?\n                        actualArgs.slice(index) : actualArgs[index]\n                )\n            ])),\n        ], ...fnBody);\n    };\n    return fn;\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $comp$__lambda = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__lambda '(sym1 ... symN) 'expr1 ... 'exprN)\n    //  -> S expr  : fn\n    checkParamsLength('$$__lambda', args, 2);\n\n    const formalArgs: SxSymbol[] = args[0];\n    if (! Array.isArray(formalArgs)) {\n        throw new Error(`[SX] $$__lambda: Invalid argument(s): args[0] is not array.`);\n    }\n\n    let lastIsSpread = false;\n    for (let i = 0; i < formalArgs.length; i++) {\n        const fa = formalArgs[i];\n        if (i === formalArgs.length - 1 && state.config.enableSpread &&\n            Array.isArray(fa) && isSymbol(fa[0], state.config.reservedNames.spread)) {\n            if (! isSymbol(fa[1])) {\n                throw new Error(`[SX] $$__lambda: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\n            }\n            formalArgs[i] = fa[1];\n            lastIsSpread = true;\n        } else if (! isSymbol(fa)) {\n            throw new Error(`[SX] $$__lambda: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\n        }\n    }\n\n    const fnBody = args.slice(1);\n    return compileLambda(state, formalArgs, lastIsSpread, fnBody);\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__defun = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__defun 'name '(sym1 ... symN) 'expr ... 'expr)\n    //  -> S expr  : fn\n    checkParamsLength('$__defun', args, 3);\n\n    const car: SxSymbol = $$first(...args);\n    const fn = $__lambda(state, name)(...args.slice(1));\n\n    checkUnsafeVarNames('$__defun', car.symbol);\n    // TODO: overloading\n    state.funcMap.set(car.symbol, {\n        name: car.symbol,\n        fn: (st, nm) => fn,\n        // formalArgs: ,\n        // lastIsSpread: ,\n        // next: ,\n    });\n    return fn;\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $comp$__defun = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__defun 'name '(sym1 ... symN) 'expr ... 'expr)\n    //  -> S expr  : fn\n    checkParamsLength('$$__defun', args, 3);\n\n    const car: SxSymbol = $$first(...args);\n    const fn = $comp$__lambda(state, name)(...args.slice(1));\n\n    checkUnsafeVarNames('$$__defun', car.symbol);\n    // TODO: overloading\n    state.funcMap.set(car.symbol, {\n        name: car.symbol,\n        fn: (st, nm) => fn,\n        // formalArgs: ,\n        // lastIsSpread: ,\n        // next: ,\n    });\n    return fn;\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__refun = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($refun 'name)\n    //  -> S expr  : fn\n    checkParamsLength('$__refun', args, 1, 1);\n\n    const car: SxSymbol = $$first(...args);\n\n    checkUnsafeVarNames('$__refun', car.symbol);\n    const info = state.funcMap.get(car.symbol);\n    if (!info) {\n        throw new Error(`[SX] $__refun: function ${car.symbol} is not defined.`);\n    }\n    return info.fn(state, car.symbol);\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__defmacro = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__defmacro 'name '(sym1 ... symN) 'expr ... 'expr)\n    //  -> S expr  : fn\n    checkParamsLength('$__defmacro', args, 3);\n\n    const car: SxSymbol = $$first(...args);\n    const formalArgs: SxSymbol[] = args[1];\n    if (! Array.isArray(formalArgs)) {\n        throw new Error(`[SX] $__defmacro: Invalid argument(s): args[1] is not array.`);\n    }\n\n    let lastIsSpread = false;\n    for (let i = 0; i < formalArgs.length; i++) {\n        const fa = formalArgs[i];\n        if (i === formalArgs.length - 1 && state.config.enableSpread &&\n            Array.isArray(fa) && isSymbol(fa[0], state.config.reservedNames.spread)) {\n            if (! isSymbol(fa[1])) {\n                throw new Error(`[SX] $__defmacro: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\n            }\n            formalArgs[i] = fa[1];\n            lastIsSpread = true;\n        } else if (! isSymbol(fa)) {\n            throw new Error(`[SX] $__defmacro: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\n        }\n    }\n\n    const fnBody = args.slice(2);\n    const capturedScopes = getCapturedScopes(state);\n\n    const fn = (fArgs: SxSymbol[]) => (...aArgs: any[]) => {\n        return $__scope(state, name, capturedScopes)(false, false, [\n            [state.config.reservedNames.self, fn],\n            ...(fArgs.map((x: SxSymbol, index) => [\n                x.symbol,\n                quote(state,\n                    (lastIsSpread && index === fArgs.length - 1) ?\n                        aArgs.slice(index) : aArgs[index]\n                )\n            ])),\n        ], ...fnBody);\n    };\n\n    const m: SxMacroInfo = {\n        name: car.symbol,\n        fn: (st: SxParserState, nm: string, fArgs: SxSymbol[]) => (list: SxToken[]) => fn(fArgs)(...(list.slice(1))),\n        formalArgs,\n        lastIsSpread,\n    };\n\n    checkUnsafeVarNames('$__defmacro', car.symbol);\n\n    if (state.macroMap.has(car.symbol)) {\n        let curr = state.macroMap.get(car.symbol);\n        (curr as SxMacroInfo).next = m;\n        if (curr && curr.formalArgs) {\n            if (curr.formalArgs.length < formalArgs.length) {\n                state.macroMap.set(car.symbol, m);\n                m.next = curr;\n            } else {\n                let prev = curr;\n                curr = curr.next;\n                while (curr) {\n                    if (curr.formalArgs) {\n                        if (curr.formalArgs.length < formalArgs.length) {\n                            prev.next = m;\n                            m.next = curr;\n                            break;\n                        }\n                    }\n                    prev = curr;\n                    curr = curr.next;\n                }\n            }\n        }\n    } else {\n        state.macroMap.set(car.symbol, m);\n    }\n    return fn;\n};\n\n\nexport const $apply = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($apply fn arg1 ... argN)\n    //  -> S expr  : fn'\n    checkParamsLength('$apply', args, 1);\n\n    const car: () => any = $$first(...args);\n    if (typeof car !== 'function') {\n        throw new Error(`[SX] $apply: Invalid argument(s): args[0] is not function.`);\n    }\n\n    return (\n        (...p: any[]) => car.apply(null, args.slice(1).concat(p))\n    );\n};\nexport const $$apply = $apply(null as any, null as any);\n\n\n// tslint:disable-next-line:variable-name\nexport const $__call = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__call thisArg 'symbol arg1 ... argN)\n    //  -> S expr  : fn\n    checkParamsLength('$__call', args, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    const sym = isSymbol(cdr);\n    const xName = sym ? sym.symbol : evaluate(state, cdr) as any;\n\n    checkUnsafeVarNames('$__call', xName);\n\n    return Function.prototype.apply.call(\n        car[xName],\n        car,\n        args.slice(2)\n    );\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__try = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__try 'expr 'catch-expr)\n    //  ->                               S expr  : expr\n    //  -> (if error is raised in expr)  S expr  : catch-expr\n    checkParamsLength('$__try', args, 1, 2);\n\n    let r: SxToken = [];\n    try {\n        r = evaluate(state, args[0]);\n    } catch (e) {\n        if (e instanceof FatalError) {\n            throw e;\n        }\n        if (1 < args.length) {\n            r = $__scope(state, name)(true, false, [\n                ['$error', quote(state, e)],\n                ['$parent', quote(state, getScope(state))],\n            ], args[1]);\n        } else {\n            r = null;\n        }\n    }\n    return r;\n};\n\n\nexport const $raise = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($raise 'expr)\n    //  -> S expr  : -\n    const car = $$first(...args);\n    throw car;\n};\nexport const $$raise = $raise(null as any, null as any);\n\n\n// tslint:disable-next-line:variable-name\nexport const $__if = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__if condition 't-expr 'f-expr)\n    //  -> (if condition is true ) S expr  : t-expr\n    //  -> (if condition is false) S expr  : f-expr\n    checkParamsLength('$__if', args, 2, 3);\n\n    const car = $$first(...args);\n    let r: SxToken = [];\n    if ($$boolean(car)) {\n        r = evaluate(state, args[1]);\n    } else {\n        if (2 < args.length) {\n            r = evaluate(state, args[2]);\n        } else {\n            r = null;\n        }\n    }\n    return r;\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__ifNull = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__if-null condition 'null-expr)\n    //  -> (if condition is not null ) S expr  : condition\n    //  -> (if condition is null)      S expr  : null-expr\n    checkParamsLength('$__ifNull', args, 2, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    let r: SxToken = [];\n    if (! $$ambiguousEq(car, null)) {\n        r = car;\n    } else {\n        r = evaluate(state, cdr);\n    }\n    return r;\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__cond = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__cond 'cond1 'expr1 ... 'condN 'exprN)\n    //  -> (if (eval condI) is true ) S expr  : exprI\n    //  -> (if no matched)            S expr  : null\n    checkParamsLength('$__cond', args, 1);\n\n    for (let i = 0; i < args.length - 1; i += 2) {\n        const c = args[i];\n        const x = args[i + 1];\n        if ($$boolean(evaluate(state, c))) {\n            return evaluate(state, x);\n        }\n    }\n    return null;\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__while = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__while 'condition 'expr1 ... 'exprN)\n    //  -> (if condition is true at least 1 or more times) S expr  : exprN\n    //  -> (else)                                          S expr  : null\n    checkParamsLength('$__while', args, 1);\n\n    const car = $$first(...args);\n    const cdr = args.slice(1);\n    let r: SxToken = null;\n    while ($$boolean(evaluate(state, car))) {\n        for (const x of cdr) {\n            r = evaluate(state, x);\n        }\n    }\n    return r;\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__doWhile = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__do-while 'condition 'expr1 ... 'exprN)\n    //  -> (if condition is true at least 1 or more times) S expr  : exprN\n    //  -> (else)                                          S expr  : null\n    checkParamsLength('$__doWhile', args, 1);\n\n    const car = $$first(...args);\n    const cdr = args.slice(1);\n    let r: SxToken = null;\n\n    do {\n        for (const x of cdr) {\n            r = evaluate(state, x);\n        }\n    } while ($$boolean(evaluate(state, car)));\n    return r;\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__until = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__until 'condition 'expr1 ... 'exprN)\n    //  -> (if condition is true at least 1 or more times) S expr  : exprN\n    //  -> (else)                                          S expr  : null\n    checkParamsLength('$__until', args, 1);\n\n    const car = $$first(...args);\n    const cdr = args.slice(1);\n    let r: SxToken = null;\n    while ($$not(evaluate(state, car))) {\n        for (const x of cdr) {\n            r = evaluate(state, x);\n        }\n    }\n    return r;\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__doUntil = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__do-until 'condition 'expr1 ... 'exprN)\n    //  -> (if condition is true at least 1 or more times) S expr  : exprN\n    //  -> (else)                                          S expr  : null\n    checkParamsLength('$__doUntil', args, 1);\n\n    const car = $$first(...args);\n    const cdr = args.slice(1);\n    let r: SxToken = null;\n    do {\n        for (const x of cdr) {\n            r = evaluate(state, x);\n        }\n    } while ($$not(evaluate(state, car)));\n    return r;\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__repeat = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__repeat 'i n-times 'expr1 ... 'exprN)\n    //  -> (if n > 0) S expr  : exprN\n    //  -> (else)     S expr  : null\n    checkParamsLength('$__repeat', args, 2);\n\n    const sym = isSymbol($$first(...args));\n    if (! sym) {\n        throw new Error(`[SX] $__repeat: Invalid argument(s): item(s) of args[0] is not symbol.`);\n    }\n\n    checkUnsafeVarNames('$__repeat', sym.symbol);\n    const scope = resolveValueSymbolScope(state, sym, false);\n\n    const n = toNumber($$second(...args));\n    const cdr = args.slice(2);\n    let r: SxToken = null;\n    for (let i = 0; i < n; i++) {\n        scope[sym.symbol] = i;\n        for (const x of cdr) {\n            r = evaluate(state, x);\n        }\n    }\n    return r;\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__for = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__for 'x list 'expr1 ... 'exprN)\n    //  -> (if list.length > 0) S expr  : exprN\n    //  -> (else)               S expr  : null\n    checkParamsLength('$__for', args, 2);\n\n    const sym = isSymbol($$first(...args));\n    if (! sym) {\n        throw new Error(`[SX] $__for: Invalid argument(s): item(s) of args[0] is not symbol.`);\n    }\n\n    checkUnsafeVarNames('$__for', sym.symbol);\n    const scope = resolveValueSymbolScope(state, sym, false);\n\n    const list = $$second(...args);\n    if (! Array.isArray(list)) {\n        throw new Error(`[SX] $__for: Invalid argument(s): item(s) of args[1] is not array.`);\n    }\n\n    const cdr = args.slice(2);\n    let r: SxToken = null;\n    for (const q of list) {\n        scope[sym.symbol] = q;\n        for (const x of cdr) {\n            r = evaluate(state, x);\n        }\n    }\n    return r;\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $pipe = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__get v fn1 ... fnN)\n    //  -> S expr  : any\n    checkParamsLength('$pipe', args, 1);\n\n    let v = args[0];\n    for (let i = 1; i < args.length; i++) {\n        v = args[i](v);\n    }\n    return v;\n};\nexport const $$pipe = $pipe(null as any, null as any);\n\n\n// tslint:disable-next-line:variable-name\nexport const $__get = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__get 'nameOrIndex1 ... 'nameOrIndexN)\n    //  -> S expr  : any\n    checkParamsLength('$__get', args, 1);\n\n    let v: any = null;\n    let sym = isSymbol(args[0]);\n\n    if (!sym) {\n        switch (typeof args[0]) {\n        case 'string': case 'number':\n            sym = {symbol: String(args[0])};\n            break;\n        default:\n            v = evaluate(state, args[0]);\n            break;\n        }\n    }\n\n    if (sym) {\n        const scope = resolveValueSymbolScope(state, sym, true);\n        if (! scope) {\n            throw new Error(`[SX] $__get: Invalid argument(s): args[0]: symbol \"${sym.symbol}\" is not defined.`);\n        }\n        v = scope[sym.symbol];\n    }\n\n    for (let i = 1; i < args.length; i++) {\n        let q: any = args[i];\n        let inprog = true;\n        while (inprog) {\n            switch (typeof q) {\n            case 'function':\n                v = q(v);\n                inprog = false;\n                break;\n            case 'object':\n                if (Array.isArray(q)) {\n                    q = evaluate(state, q);\n                } else {\n                    sym = isSymbol(q);\n                    if (sym) {\n                        q = sym.symbol;\n                    } else if (Object.prototype.hasOwnProperty.call(q, 'value')) {\n                        q = evaluate(state, q);\n                    } else {\n                        throw new Error(`[SX] $__get: Invalid argument(s): invalid name path.`);\n                    }\n                }\n                break;\n            case 'number':\n                if (q < 0) {\n                    q = v.length + q;\n                }\n                // FALL_THRU\n            case 'string':\n                checkUnsafeVarNames('$__get', q);\n                v = v[q];\n                inprog = false;\n                break;\n            default:\n                throw new Error(`[SX] $__get: Invalid argument(s): invalid name path.`);\n            }\n        }\n    }\n    return v;\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__let = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__let 'nameStrOrSymbol expr)\n    //  -> S expr  : any\n    checkParamsLength('$__let', args, 2, 2);\n\n    let sym = isSymbol($$first(...args));\n\n    if (! sym) {\n        if (typeof args[0] === 'string') {\n            sym = {symbol: args[0]};\n        } else {\n            throw new Error(`[SX] $__let: Invalid argument(s): invalid name.`);\n        }\n    }\n\n    checkUnsafeVarNames('$__let', sym.symbol);\n\n    const scope = resolveValueSymbolScope(state, sym, false);\n    scope[sym.symbol] = args[1];\n\n    return args[1];\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__set = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__set 'nameOrListOfNameOrIndex expr)\n    //  -> S expr  : any\n    checkParamsLength('$__set', args, 2, 2);\n\n    let path: any = [];\n\n    if (Array.isArray(args[0])) {\n        path = args[0];\n    } else {\n        path.push(args[0]);\n    }\n\n    let sym = isSymbol(path[0]);\n\n    if (! sym) {\n        if (typeof path[0] === 'string') {\n            checkUnsafeVarNames('$__set', path[0]);\n            sym = {symbol: path[0]};\n        } else {\n            throw new Error(`[SX] $__set: Invalid argument(s): invalid name.`);\n        }\n    }\n\n    let scope = resolveValueSymbolScope(state, sym, true);\n    if (scope === null) {\n        throw new Error(`[SX] $__set: Unresolved symbol: ${sym.symbol}.`);\n    }\n\n    let subst = false;\n\n    for (let i = 0; i < path.length; i++) {\n        let q: any = path[i];\n        let inprog = true;\n        const last = i === path.length - 1;\n        while (inprog) {\n            switch (typeof q) {\n            case 'function':\n                scope = q(scope);\n                inprog = false;\n                break;\n            case 'object':\n                if (Array.isArray(q)) {\n                    q = evaluate(state, q);\n                } else {\n                    sym = isSymbol(q);\n                    if (sym) {\n                        q = sym.symbol;\n                    } else if (Object.prototype.hasOwnProperty.call(q, 'value')) {\n                        q = evaluate(state, q);\n                    } else {\n                        throw new Error(`[SX] $__set: Invalid argument(s): invalid name.`);\n                    }\n                }\n                break;\n            case 'number':\n                if (q < 0) {\n                    q = scope.length + q;\n                }\n                // FALL_THRU\n            case 'string':\n                checkUnsafeVarNames('$__set', q);\n                if (last) {\n                    scope[q] = args[1];\n                    subst = true;\n                } else {\n                    scope = scope[q];\n                }\n                inprog = false;\n                break;\n            default:\n                throw new Error(`[SX] $__set: Invalid argument(s): invalid name.`);\n            }\n        }\n    }\n\n    if (! subst) {\n        throw new Error(`[SX] $__set: Invalid argument(s): last path is not lvalue.`);\n    }\n\n    return args[1];\n};\n\n\nexport const $boolean = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($boolean any)\n    //  -> S expr  : boolean\n    checkParamsLength('$boolean', args, 1, 1);\n\n    const car = $$first(...args);\n    if (Array.isArray(car) && car.length === 0) return false;\n    else return Boolean(car);\n};\nexport const $$boolean = $boolean(null as any, null as any);\n\n\nexport const $not = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($not any)\n    //  -> S expr  : boolean\n    checkParamsLength('$not', args, 1, 1);\n\n    return ! $$boolean(...args);\n};\nexport const $$not = $not(null as any, null as any);\n\n\n// tslint:disable-next-line:variable-name\nexport const $__and = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__and 'expr1 ... 'exprN)\n    //  -> (if all of ($boolean expr1) ... ($boolean exprN) are true) S expr  : exprN\n    //  -> (else)                                                     S expr  : expr-i (false left most)\n    checkParamsLength('$__and', args, 1);\n\n    let prev = null;\n    for (let i = 0; i < args.length; i++) {\n        const curr = evaluate(state, args[i]);\n        if (! $$boolean(curr)) {\n            return curr;\n        }\n        prev = curr;\n    }\n    return prev;\n};\n// tslint:disable-next-line:variable-name\nexport const $$__and = $__and(null as any, null as any);\n\n\n// tslint:disable-next-line:variable-name\nexport const $__or = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__or 'expr1 ... 'exprN)\n    //  -> (if any ($boolean expr1) ... ($boolean exprN) are true) S expr  : expr-i (where i: index of item first ($boolean expr-i) is to be true)\n    //  -> (else)                                                  S expr  : expr-i (false right most)\n    checkParamsLength('$__or', args, 1);\n\n    let prev = null;\n    for (let i = 0; i < args.length; i++) {\n        const curr = evaluate(state, args[i]);\n        if ($$boolean(curr)) {\n            return curr;\n        }\n        prev = curr;\n    }\n    return prev;\n};\n// tslint:disable-next-line:variable-name\nexport const $$__or = $__or(null as any, null as any);\n\n\nexport const $ambiguousEq = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: (== a b)\n    //  -> S expr  : boolean\n    checkParamsLength('$ambiguousEq', args, 2, 2);\n\n    let {car, cdr} = $$firstAndSecond(...args);\n    if (Array.isArray(car) && car.length === 0) car = null;\n    if (Array.isArray(cdr) && cdr.length === 0) cdr = null;\n    if (car === void 0) car = null;\n    if (cdr === void 0) cdr = null;\n    // tslint:disable-next-line:triple-equals\n    return car == cdr;\n};\nexport const $$ambiguousEq = $ambiguousEq(null as any, null as any);\n\n\nexport const $ambiguousNotEq = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: (!= a b)\n    //  -> S expr  : boolean\n    return ! $$ambiguousEq(...args);\n};\nexport const $$ambiguousNotEq = $ambiguousNotEq(null as any, null as any);\n\n\nexport const $lt = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: (< a b)\n    //  -> S expr  : boolean\n    checkParamsLength('$lt', args, 2, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    return toNumber(car) < toNumber(cdr);\n};\nexport const $$lt = $lt(null as any, null as any);\n\n\nexport const $le = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: (<= a b)\n    //  -> S expr  : boolean\n    checkParamsLength('$le', args, 2, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    return toNumber(car) <= toNumber(cdr);\n};\nexport const $$le = $le(null as any, null as any);\n\n\nexport const $gt = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: (> a b)\n    //  -> S expr  : boolean\n    checkParamsLength('$gt', args, 2, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    return toNumber(car) > toNumber(cdr);\n};\nexport const $$gt = $gt(null as any, null as any);\n\n\nexport const $ge = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: (>= a b)\n    //  -> S expr  : boolean\n    checkParamsLength('$ge', args, 2, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    return toNumber(car) >= toNumber(cdr);\n};\nexport const $$ge = $ge(null as any, null as any);\n\n\nexport const $symbol = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($symbol)\n    // S expression: ($symbol name)\n    //  -> S expr  : symbol\n    checkParamsLength('$symbol', args, 1, 1);\n\n    if (typeof args[0] === 'string') {\n        return {symbol: args[0]};\n    } else {\n        throw new Error(`[SX] $symbol: Invalid argument(s): item(s) of args[0] is not string.`);\n    }\n};\nexport const $$symbol = $symbol(null as any, null as any);\n\n\n// tslint:disable-next-line:variable-name\nexport const $__gensym = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__gensym)\n    // S expression: ($__gensym name)\n    //  -> S expr  : symbol\n    checkParamsLength('$__gensym', args, 0, 1);\n\n    const varBaseName = `$__tempvar__$$ec${state.evalCount++}$$_`;\n    const tempVarSym = ({symbol: `${varBaseName}_$gensym`});\n    if (args.length === 1) {\n        const a = isSymbol(args[0]);\n        if (a) {\n            $__let(state, '')(a, tempVarSym);\n        } else if (typeof args[0] === 'string') {\n            $__let(state, '')({symbol: args[0]}, tempVarSym);\n        } else {\n            throw new Error(`[SX] $__gensym: Invalid argument(s): item(s) of args[0] is not symbol.`);\n        }\n    }\n    return tempVarSym;\n};\n\n\nexport const $isSymbol = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($is-symbol x)\n    // S expression: ($is-symbol x name)\n    //  -> S expr  : boolean\n    checkParamsLength('$isSymbol', args, 1, 2);\n\n    if (args.length === 1) {\n        return (isSymbol(args[0]) ? true : false);\n    } else {\n        if (typeof args[1] === 'string') {\n            return (isSymbol(args[0], args[1]) ? true : false);\n        } else {\n            throw new Error(`[SX] $isSymbol: Invalid argument(s): item(s) of args[1] is not string.`);\n        }\n    }\n};\nexport const $$isSymbol = $isSymbol(null as any, null as any);\n\n\nexport const $isList = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($is-list x)\n    //  -> S expr  : boolean\n    checkParamsLength('$isList', args, 1, 1);\n\n    return Array.isArray($$first(...args));\n};\nexport const $$isList = $isList(null as any, null as any);\n\n\nexport const $isString = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($is-string x)\n    //  -> S expr  : boolean\n    checkParamsLength('$isString', args, 1, 1);\n\n    return typeof $$first(...args) === 'string';\n};\nexport const $$isString = $isString(null as any, null as any);\n\n\nexport const $isNumber = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($is-number x)\n    //  -> S expr  : boolean\n    checkParamsLength('$isNumber', args, 1, 1);\n\n    return typeof $$first(...args) === 'number';\n};\nexport const $$isNumber = $isNumber(null as any, null as any);\n\n\nexport const $isNaN = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($is-NaN x)\n    //  -> S expr  : boolean\n    checkParamsLength('$isNaN', args, 1, 1);\n\n    return Number.isNaN($$first(...args));\n};\nexport const $$isNaN = $isNaN(null as any, null as any);\n\n\nexport const $isFinite = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($is-finate x)\n    //  -> S expr  : boolean\n    checkParamsLength('$isFinite', args, 1, 1);\n\n    return Number.isFinite($$first(...args));\n};\nexport const $$isFinite = $isFinite(null as any, null as any);\n\n\nexport const $isInteger = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($is-integer x)\n    //  -> S expr  : boolean\n    checkParamsLength('$isInteger', args, 1, 1);\n\n    return Number.isInteger($$first(...args));\n};\nexport const $$isInteger = $isInteger(null as any, null as any);\n\n\nexport const $toString = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($to-string x)\n    //  -> S expr  : string\n    checkParamsLength('$toString', args, 1, 1);\n\n    return String($$first(...args));\n};\nexport const $$toString = $toString(null as any, null as any);\n\n\nexport const $toNumber = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($to-number x)\n    //  -> S expr  : number\n    checkParamsLength('$toNumber', args, 1, 1);\n\n    return toNumber($$first(...args));\n};\nexport const $$toNumber = $toNumber(null as any, null as any);\n\n\n// tslint:disable-next-line:variable-name\nexport const $__toObject = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__# '(name value...)...)\n    //  -> JSON    : {name: value, ...}\n    const r: any = {};\n    for (const x of args) {\n        if (Array.isArray(x) && 0 < x.length) {\n            const sym = isSymbol(x[0]);\n            const keyName =\n                sym ? sym.symbol :\n                String(evaluate(state, x[0]));\n\n            checkUnsafeVarNames('$__#', keyName);\n            if (x.length === 1) {\n                // S expression: (# ... (keyName) ...)\n                //  -> JSON    : {..., keyName: true, ...}\n                r[keyName] = true;\n            } else if (x.length === 2) {\n                // S expression: (# ... (keyName value) ...)\n                //  -> JSON    : {..., keyName: value, ...}\n                r[keyName] = evaluate(state, x[1]);\n            } else {\n                // S expression: (# ... (keyName value1 value2 ...) ...)\n                //  -> JSON    : {..., keyName: [value1, value2, ], ...}\n                r[keyName] =\n                    evaluate(state, ([{symbol: state.config.reservedNames.list}] as SxToken[])\n                    .concat(x.slice(1)));\n            }\n        } else {\n            throw new Error(`[SX] $__toObject: Invalid argument(s): args[?] is not array.`);\n        }\n    }\n    return r;\n};\n\n\nexport const $objectAssign = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($object-assign x)\n    //  -> S expr  : string\n    checkParamsLength('$objectAssign', args, 1);\n\n    return Object.assign(args[0], ...(args.slice(1)));\n};\nexport const $$objectAssign = $objectAssign(null as any, null as any);\n\n\nexport const $jsonStringify = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($json-stringify x)\n    //  -> S expr  : string\n    checkParamsLength('$jsonStringify', args, 1, 1);\n\n    return JSON.stringify($$first(...args));\n};\nexport const $$jsonStringify = $jsonStringify(null as any, null as any);\n\n\nexport const $jsonParse = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($json-parse x)\n    //  -> S expr  : object\n    checkParamsLength('$jsonParse', args, 1, 1);\n\n    const s = $$first(...args);\n    if (typeof s !== 'string') {\n        throw new Error(`[SX] $jsonParse: Invalid argument(s): args[0] is not string.`);\n    }\n    return JSON.parse(s);\n};\nexport const $$jsonParse = $jsonParse(null as any, null as any);\n\n\nexport const $now = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($now)\n    //  -> S expr  : number\n    return Date.now();\n};\nexport const $$now = $now(null as any, null as any);\n\n\nexport const $datetimeFromIso = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($datetime-from-iso str)\n    //  -> S expr  : number\n    checkParamsLength('$datetimeFromIso', args, 1, 1);\n\n    const s = $$first(...args);\n    if (typeof s !== 'string') {\n        throw new Error(`[SX] $datetimeFromIso: Invalid argument(s): args[0] is not string.`);\n    }\n    if (! /^(?:(?:-[0-9]{6,})|[0-9]{4,})-(?:[0-1][0-9])-(?:[0-3][0-9])(?:T(?:[0-2][0-9])(?:[:](?:[0-6][0-9])(?:[:](?:[0-6][0-9])(?:.[0-9]{1,})?)?)?(?:Z|[-+][0-9]{2}(?:[:]?[0-6][0-9])?)?)?$/.test(s)) {\n        throw new Error(`[SX] $datetimeFromIso: Invalid datetime (pattern unmatched): ${s}.`);\n    }\n    const dt = new Date(s).getTime();\n    if (Number.isNaN(dt)) {\n        throw new Error(`[SX] $datetimeFromIso: Invalid datetime: ${s}.`);\n    }\n    return dt;\n};\nexport const $$datetimeFromIso = $datetimeFromIso(null as any, null as any);\n\n\nexport const $datetime = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($datetime year month1-12 day)\n    // S expression: ($datetime year month1-12 day hours)\n    // S expression: ($datetime year month1-12 day hours minutes)\n    // S expression: ($datetime year month1-12 day hours minutes seconds)\n    // S expression: ($datetime year month1-12 day hours minutes seconds milliseconds)\n    //  -> S expr  : number\n    checkParamsLength('$datetime', args, 3, 7);\n\n    let s = '';\n    const year = Number(args[0]);\n    if (year >= 0) {\n        s += String(year).padStart(4, '0');\n    } else {\n        s += '-' + String(-year).padStart(6, '0');\n    }\n    // month1\n    s += '-' + String(Number(args[1])).padStart(2, '0');\n    // day\n    s += '-' + String(Number(args[2])).padStart(2, '0');\n    // hours\n    if (args.length >= 4) {\n        s += 'T' + String(Number(args[3])).padStart(2, '0');\n        // minutes\n        if (args.length >= 5) {\n            s += ':' + String(Number(args[4])).padStart(2, '0');\n        } else {\n            s += ':00';\n        }\n        // seconds\n        if (args.length >= 6) {\n            s += ':' + String(Number(args[5])).padStart(2, '0');\n        }\n        // milliseconds\n        if (args.length >= 7) {\n            s += '.' + String(Number(args[6])).padStart(3, '0').slice(0, 3);\n        }\n        s += 'Z';\n    }\n    const dt = new Date(s).getTime();\n    if (Number.isNaN(dt)) {\n        throw new Error(`[SX] $datetime: Invalid datetime: ${s}.`);\n    }\n    return dt;\n};\nexport const $$datetime = $datetime(null as any, null as any);\n\n\nexport const $datetimeLc = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($datetime-lc year month1-12 day)\n    // S expression: ($datetime-lc year month1-12 day hours)\n    // S expression: ($datetime-lc year month1-12 day hours minutes)\n    // S expression: ($datetime-lc year month1-12 day hours minutes seconds)\n    // S expression: ($datetime-lc year month1-12 day hours minutes seconds milliseconds)\n    //  -> S expr  : number\n    checkParamsLength('$datetimeLc', args, 3, 7);\n\n    let s = '';\n    const year = Number(args[0]);\n    if (year >= 0) {\n        s += String(year).padStart(4, '0');\n    } else {\n        s += '-' + String(-year).padStart(6, '0');\n    }\n    // month1\n    s += '-' + String(Number(args[1])).padStart(2, '0');\n    // day\n    s += '-' + String(Number(args[2])).padStart(2, '0');\n    // hours\n    if (args.length >= 4) {\n        s += 'T' + String(Number(args[3])).padStart(2, '0');\n        // minutes\n        if (args.length >= 5) {\n            s += ':' + String(Number(args[4])).padStart(2, '0');\n        } else {\n            s += ':00';\n        }\n        // seconds\n        if (args.length >= 6) {\n            s += ':' + String(Number(args[5])).padStart(2, '0');\n        }\n        // milliseconds\n        if (args.length >= 7) {\n            s += '.' + String(Number(args[6])).padStart(3, '0').slice(0, 3);\n        }\n    } else {\n        s += 'T00:00:00.000';\n    }\n    const dt = new Date(s).getTime();\n    if (Number.isNaN(dt)) {\n        throw new Error(`[SX] $datetimeLc: Invalid datetime: ${s}.`);\n    }\n    return dt;\n};\nexport const $$datetimeLc = $datetimeLc(null as any, null as any);\n\n\nexport const $datetimeToIsoString = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($datetime-to-iso-string number)\n    //  -> S expr  : string\n    checkParamsLength('$datetimeToIsoString', args, 1, 1);\n\n    const n = $$first(...args);\n    if (typeof n !== 'number') {\n        throw new Error(`[SX] $datetimeToIsoString: Invalid argument(s): args[0] is not number.`);\n    }\n    const dt = new Date(n);\n    if (Number.isNaN(dt.getTime())) {\n        throw new Error(`[SX] $datetimeToIsoString: Invalid datetime: ${n}.`);\n    }\n    return dt.toISOString();\n};\nexport const $$datetimeToIsoString = $datetimeToIsoString(null as any, null as any);\n\n\nexport const $datetimeToComponents = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($datetime-to-components number)\n    //  -> S expr  : list\n    checkParamsLength('$datetimeToComponents', args, 1, 1);\n\n    const n = $$first(...args);\n    if (typeof n !== 'number') {\n        throw new Error(`[SX] $datetimeToComponents: Invalid argument(s): args[0] is not number.`);\n    }\n    const dt = new Date(n);\n    if (Number.isNaN(dt.getTime())) {\n        throw new Error(`[SX] $datetimeToComponents: Invalid datetime: ${n}.`);\n    }\n    return ([\n        dt.getUTCFullYear(),\n        dt.getUTCMonth() + 1,\n        dt.getUTCDate(),\n        dt.getUTCHours(),\n        dt.getUTCMinutes(),\n        dt.getUTCSeconds(),\n        dt.getUTCMilliseconds(),\n        0, // TZ\n        dt.getUTCDay(),\n    ]);\n};\nexport const $$datetimeToComponents = $datetimeToComponents(null as any, null as any);\n\n\nexport const $datetimeToComponentsLc = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($datetime-to-components-lc number)\n    //  -> S expr  : list\n    checkParamsLength('$datetimeToComponentsLc', args, 1, 1);\n\n    const n = $$first(...args);\n    if (typeof n !== 'number') {\n        throw new Error(`[SX] $datetimeToComponentsLc: Invalid argument(s): args[0] is not number.`);\n    }\n    const dt = new Date(n);\n    if (Number.isNaN(dt.getTime())) {\n        throw new Error(`[SX] $datetimeToComponentsLc: Invalid datetime: ${n}.`);\n    }\n    return ([\n        dt.getFullYear(),\n        dt.getMonth() + 1,\n        dt.getDate(),\n        dt.getHours(),\n        dt.getMinutes(),\n        dt.getSeconds(),\n        dt.getMilliseconds(),\n        -dt.getTimezoneOffset(), // time difference between local time and UTC time, in minutes.\n                                 // If your time zone is UTC+2:00, +120 will be returned.\n        dt.getDay(),\n    ]);\n};\nexport const $$datetimeToComponentsLc = $datetimeToComponentsLc(null as any, null as any);\n\n\nexport const $match = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($match pattern-str string)\n    // S expression: ($match pattern-str options-str string)\n    //  -> S expr  : array\n    checkParamsLength('$match', args, 2, 3);\n\n    if (args.length === 2) {\n        const m = new RegExp(args[0]);\n        return m.exec(args[1]);\n    } else {\n        const m = new RegExp(args[0], args[1]);\n        return m.exec(args[2]);\n    }\n};\nexport const $$match = $match(null as any, null as any);\n\n\nexport const $consoleLog = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($console-log expr1 ... exprN)\n    //  -> S expr  : null\n    console.log(...args);\n    return null;\n};\nexport const $$consoleLog = $consoleLog(null as any, null as any);\n\n\nexport const $consoleError = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($console-error expr1 ... exprN)\n    //  -> S expr  : null\n    console.error(...args);\n    return null;\n};\nexport const $$consoleError = $consoleError(null as any, null as any);\n\n\nexport const $consoleTrace = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($console-trace expr1 ... exprN)\n    //  -> S expr  : null\n    console.trace(...args);\n    return null;\n};\nexport const $$consoleTrace = $consoleTrace(null as any, null as any);\n\n\nexport const $consoleTime = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($console-time)\n    // S expression: ($console-time label)\n    //  -> S expr  : null\n    console.time(...args);\n    return null;\n};\nexport const $$consoleTime = $consoleTime(null as any, null as any);\n\n\nexport const $consoleTimeEnd = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($console-time-end)\n    // S expression: ($console-time-end label)\n    //  -> S expr  : null\n    console.timeEnd(...args);\n    return null;\n};\nexport const $$consoleTimeEnd = $consoleTimeEnd(null as any, null as any);\n\n\nexport const $consoleTimeLog = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($console-time-log label)\n    // S expression: ($console-time-log label value ... value)\n    //  -> S expr  : null\n    (console as any).timeLog(...args);\n    return null;\n};\nexport const $$consoleTimeLog = $consoleTimeLog(null as any, null as any);\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxFuncInfo } from '../../types';\nimport * as ops       from './core.fn';\n\n\n\nexport const funcs: SxFuncInfo[] = [{\n    name: '$car',\n    fn: ops.$car,\n}, {\n    name: '$cdr',\n    fn: ops.$cdr,\n}, {\n    name: '$cons',\n    fn: ops.$cons,\n}, {\n    name: '$first',\n    fn: ops.$first,\n}, {\n    name: '$second',\n    fn: ops.$second,\n}, {\n    name: '$last',\n    fn: ops.$last,\n}, {\n    name: '$progn', // alias of $last\n    fn: ops.$last,\n}, {\n    name: '$rest',\n    fn: ops.$rest,\n}, {\n    name: '$first-and-second',\n    fn: ops.$firstAndSecond,\n}, {\n    name: '$atom',\n    fn: ops.$atom,\n}, {\n    name: '$eq',\n    fn: ops.$eq,\n}, {\n    name: '===',\n    fn: ops.$eq,\n}, {\n    name: '$not-eq',\n    fn: ops.$notEq,\n}, {\n    name: '!==',\n    fn: ops.$notEq,\n}, {\n    name: '$list',\n    fn: ops.$list,\n}, {\n    name: '$__scope',\n    fn: ops.$__scope,\n}, {\n    name: '$__global',\n    fn: ops.$__globalScope,\n}, {\n    name: '$__capture',\n    fn: ops.$__capture,\n}, {\n    name: '$__lambda',\n    fn: ops.$__lambda,\n}, {\n    name: '$$__lambda',\n    fn: ops.$comp$__lambda,\n}, {\n    name: '$__defun',\n    fn: ops.$__defun,\n}, {\n    name: '$$__defun',\n    fn: ops.$comp$__defun,\n}, {\n    name: '$__refun',\n    fn: ops.$__refun,\n}, {\n    name: '$__defmacro',\n    fn: ops.$__defmacro,\n}, {\n    name: '$apply',\n    fn: ops.$apply,\n}, {\n    name: '$__call',\n    fn: ops.$__call,\n}, {\n    name: '$__try',\n    fn: ops.$__try,\n}, {\n    name: '$raise',\n    fn: ops.$raise,\n}, {\n    name: '$__if',\n    fn: ops.$__if,\n}, {\n    name: '$__if-null',\n    fn: ops.$__ifNull,\n}, {\n    name: '$__cond',\n    fn: ops.$__cond,\n}, {\n    name: '$__while',\n    fn: ops.$__while,\n}, {\n    name: '$__do-while',\n    fn: ops.$__doWhile,\n}, {\n    name: '$__until',\n    fn: ops.$__until,\n}, {\n    name: '$__do-until',\n    fn: ops.$__doUntil,\n}, {\n    name: '$__repeat',\n    fn: ops.$__repeat,\n}, {\n    name: '$__for',\n    fn: ops.$__for,\n}, {\n    name: '$pipe',\n    fn: ops.$pipe,\n}, {\n    name: '$__get',\n    fn: ops.$__get,\n}, {\n    name: '$__let',\n    fn: ops.$__let,\n}, {\n    name: '$__set',\n    fn: ops.$__set,\n}, {\n    name: '$boolean',\n    fn: ops.$boolean,\n}, {\n    name: '$not',\n    fn: ops.$not,\n}, {\n    name: '$__and',\n    fn: ops.$__and,\n}, {\n    name: '$__or',\n    fn: ops.$__or,\n}, {\n    name: '==',\n    fn: ops.$ambiguousEq,\n}, {\n    name: '!=',\n    fn: ops.$ambiguousNotEq,\n}, {\n    name: '<',\n    fn: ops.$lt,\n}, {\n    name: '<=',\n    fn: ops.$le,\n}, {\n    name: '>',\n    fn: ops.$gt,\n}, {\n    name: '>=',\n    fn: ops.$ge,\n}, {\n    name: '$symbol',\n    fn: ops.$symbol,\n}, {\n    name: '$__gensym',\n    fn: ops.$__gensym,\n}, {\n    name: '$is-symbol',\n    fn: ops.$isSymbol,\n}, {\n    name: '$is-list',\n    fn: ops.$isList,\n}, {\n    name: '$is-string',\n    fn: ops.$isString,\n}, {\n    name: '$is-number',\n    fn: ops.$isNumber,\n}, {\n    name: '$is-NaN',\n    fn: ops.$isNaN,\n}, {\n    name: '$is-finite',\n    fn: ops.$isFinite,\n}, {\n    name: '$is-integer',\n    fn: ops.$isInteger,\n}, {\n    name: '$to-string',\n    fn: ops.$toString,\n}, {\n    name: '$to-number',\n    fn: ops.$toNumber,\n}, {\n    name: '$__#',\n    fn: ops.$__toObject,\n}, {\n    name: '$object-assign',\n    fn: ops.$objectAssign,\n}, {\n    name: '$json-stringify',\n    fn: ops.$jsonStringify,\n}, {\n    name: '$now',\n    fn: ops.$now,\n}, {\n    name: '$datetime-from-iso',\n    fn: ops.$datetimeFromIso,\n}, {\n    name: '$datetime',\n    fn: ops.$datetime,\n}, {\n    name: '$datetime-lc',\n    fn: ops.$datetimeLc,\n}, {\n    name: '$datetime-to-iso-string',\n    fn: ops.$datetimeToIsoString,\n}, {\n    name: '$datetime-to-components',\n    fn: ops.$datetimeToComponents,\n}, {\n    name: '$datetime-to-components-lc',\n    fn: ops.$datetimeToComponentsLc,\n}, {\n    name: '$json-parse',\n    fn: ops.$jsonParse,\n}, {\n    name: '$match',\n    fn: ops.$match,\n}, {\n    name: '$console-log',\n    fn: ops.$consoleLog,\n}, {\n    name: '$console-error',\n    fn: ops.$consoleError,\n}, {\n    name: '$console-trace',\n    fn: ops.$consoleTrace,\n}, {\n    name: '$console-time',\n    fn: ops.$consoleTime,\n}, {\n    name: '$console-time-end',\n    fn: ops.$consoleTimeEnd,\n}, {\n    name: '$console-time-log',\n    fn: ops.$consoleTimeLog,\n}];\n\n\nexport default funcs;\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxMacroInfo,\n         SxParserState }     from '../../types';\nimport { isSymbol,\n         quote }             from '../../ast';\nimport { checkParamsLength } from '../../errors';\n\n\n\nexport const macros: SxMacroInfo[] = [{\n    name: '$scope',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($scope isBlockLocal returnMultiple ((name value) | name ...) expr ... expr)\n        //  -> S expr  : ($__scope isBlockLocal returnMultiple '((name value) | name ...) 'expr ... 'expr)\n        return [{symbol: '$__scope'},\n            list[1],\n            list[2],\n            ...(list.slice(3).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$local',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($local ((name value) | name ...) expr ... expr)\n        //  -> S expr  : ($__scope isBlockLocal=true returnMultiple=false '((name value) | name ...) 'expr ... 'expr)\n        return [{symbol: '$__scope'},\n            true,\n            false,\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$global',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($__global expr1 ... exprN)\n        //  -> S expr  : ($__global returnMultiple=false 'expr ... 'expr)\n        return [{symbol: '$__global'},\n            false,\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$clisp-let', // alias of $local\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($clisp-let ((name value) | name ...) expr ... expr)\n        //  -> S expr  : ($__scope isBlockLocal=true returnMultiple=false '((name value) | name ...) 'expr ... 'expr)\n        return [{symbol: '$__scope'},\n            true,\n            false,\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$capture',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($capture (sym1 ... symN) expr ... expr)\n        //  -> S expr  : ($__capture '(sym1 ... symN) 'expr ... 'expr)\n        return [{symbol: '$__capture'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$closure',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($closure (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\n        //  -> S expr  : ($__capture '(u-sym1 ... u-symM) ($__lambda '(sym1 ... symN) 'expr ... 'expr) )\n        const symUse = isSymbol(list[2], 'use');\n        if (! symUse) {\n            throw new Error(`[SX] $closure: Invalid syntax: missing 'use' keyword.`);\n        }\n        return [{symbol: '$__capture'}, quote(state, list[3]), quote(state, [{symbol: '$__lambda'},\n            quote(state, list[1]),\n            ...(list.slice(4).map(x => quote(state, x))),\n        ])];\n    },\n}, {\n    name: '|->',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: (|-> (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\n        //  -> S expr  : ($closure (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\n        return [{symbol: '$closure'},\n            ...list.slice(1),\n        ];\n    },\n}, {\n    name: '$$closure',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($$closure (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\n        //  -> S expr  : ($__capture '(u-sym1 ... u-symM) ($$__lambda '(sym1 ... symN) 'expr ... 'expr) )\n        const symUse = isSymbol(list[2], 'use');\n        if (! symUse) {\n            throw new Error(`[SX] $closure: Invalid syntax: missing 'use' keyword.`);\n        }\n        return [{symbol: '$__capture'}, quote(state, list[3]), quote(state, [{symbol: '$$__lambda'},\n            quote(state, list[1]),\n            ...(list.slice(4).map(x => quote(state, x))),\n        ])];\n    },\n}, {\n    name: '|=>',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: (|-> (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\n        //  -> S expr  : ($closure (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\n        return [{symbol: '$$closure'},\n            ...list.slice(1),\n        ];\n    },\n}, {\n    name: '$lambda',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($lambda (sym1 ... symN) expr ... expr)\n        //  -> S expr  : ($__lambda '(sym1 ... symN) 'expr ... 'expr)\n        return [{symbol: '$__lambda'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '->',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($lambda (sym1 ... symN) expr ... expr)\n        //  -> S expr  : ($__lambda '(sym1 ... symN) 'expr ... 'expr)\n        return [{symbol: '$__lambda'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$$lambda',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($$lambda (sym1 ... symN) expr ... expr)\n        //  -> S expr  : ($$__lambda '(sym1 ... symN) 'expr ... 'expr)\n        return [{symbol: '$$__lambda'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '=>',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($$lambda (sym1 ... symN) expr ... expr)\n        //  -> S expr  : ($$__lambda '(sym1 ... symN) 'expr ... 'expr)\n        return [{symbol: '$$__lambda'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$defun',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($defun name (sym1 ... symN) expr ... expr)\n        //  -> S expr  : ($__defun 'name '(sym1 ... symN) 'expr ... 'expr)\n        return [{symbol: '$__defun'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$$defun',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($$defun name (sym1 ... symN) expr ... expr)\n        //  -> S expr  : ($$__defun 'name '(sym1 ... symN) 'expr ... 'expr)\n        return [{symbol: '$$__defun'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$refun',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($refun name)\n        //  -> S expr  : ($__refun 'name)\n        return [{symbol: '$__refun'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '<-',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: (<- name)\n        //  -> S expr  : ($__refun 'name)\n        return [{symbol: '$__refun'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$defmacro',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($defmacro name (sym1 ... symN) expr ... expr)\n        //  -> S expr  : ($__defmacro 'name '(sym1 ... symN) 'expr ... 'expr)\n        return [{symbol: '$__defmacro'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$call',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($call thisArg symbol arg1 ... argN)\n        //  -> S expr  : ($__call thisArg 'symbol arg1 ... argN)\n        checkParamsLength('$call', list, 3);\n\n        return [{symbol: '$__call'},\n            list[1],\n            quote(state, list[2]),\n            ...(list.slice(3)),\n        ];\n    },\n}, {\n    name: '$try',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($try expr catch-expr)\n        //  -> S expr  : ($__try 't-expr 'catch-expr)\n        return [{symbol: '$__try'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$if',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($if cond t-expr f-expr)\n        //  -> S expr  : ($__if cond 't-expr 'f-expr)\n        return [{symbol: '$__if'},\n            list[1],\n            ...(list.slice(2).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$if-null',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($if-null cond null-expr)\n        //  -> S expr  : ($__if-null cont 'null-expr)\n        return [{symbol: '$__if-null'},\n            list[1],\n            ...(list.slice(2).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '??',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: (?? cond null-expr)\n        //  -> S expr  : ($__if-null cont 'null-expr)\n        return [{symbol: '$__if-null'},\n            list[1],\n            ...(list.slice(2).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$cond',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($cond cond1 expr1 ... condN exprN)\n        //  -> S expr  : ($__cond 'cond1 'expr1 ... 'condN 'exprN)\n        return [{symbol: '$__cond'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$while',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($while condition expr1 exprN)\n        //  -> S expr  : ($__while 'condition 'expr1 'exprN)\n        return [{symbol: '$__while'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$do-while',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($do-while condition expr1 exprN)\n        //  -> S expr  : ($__do-while 'condition 'expr1 'exprN)\n        return [{symbol: '$__do-while'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$until',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($until condition expr1 exprN)\n        //  -> S expr  : ($__until 'condition 'expr1 'exprN)\n        return [{symbol: '$__until'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$do-until',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($do-until condition expr1 exprN)\n        //  -> S expr  : ($__do-until 'condition 'expr1 'exprN)\n        return [{symbol: '$__do-until'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$repeat',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($repeat i of n-times expr1 exprN)\n        //  -> S expr  : ($__repeat 'i n-times 'expr1 'exprN)\n        const symOf = isSymbol(list[2], 'of');\n        if (! symOf) {\n            throw new Error(`[SX] $repeat: Invalid syntax: missing 'of' keyword.`);\n        }\n        return [{symbol: '$__repeat'},\n            quote(state, list[1]),\n            list[3],\n            ...(list.slice(4).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$for',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($for x of list expr1 exprN)\n        //  -> S expr  : ($__for 'x list 'expr1 'exprN)\n        const symOf = isSymbol(list[2], 'of');\n        if (! symOf) {\n            throw new Error(`[SX] $for: Invalid syntax: missing 'of' keyword.`);\n        }\n        return [{symbol: '$__for'},\n            quote(state, list[1]),\n            list[3],\n            ...(list.slice(4).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$get',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($get nameOrIndex1 ... nameOrIndexN)\n        //  -> S expr  : ($__get 'nameOrIndex1 ... 'nameOrIndexN)\n        return [{symbol: '$__get'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$let',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($let nameStrOrSymbol expr)\n        //  -> S expr  : ($__let 'nameStrOrSymbol expr)\n        checkParamsLength('$let', list, 3, 3);\n\n        return [{symbol: '$__let'},\n            quote(state, list[1]),\n            list[2],\n        ];\n    },\n}, {\n    name: '$clisp-defvar',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($let nameStrOrSymbol expr)\n        //  -> S expr  : ($__let 'nameStrOrSymbol expr)\n        checkParamsLength('$clisp-defvar', list, 3, 3);\n\n        return [{symbol: '$global'},\n            [{symbol: '$__let'},\n                quote(state, list[1]),\n                list[2]\n            ],\n        ];\n    },\n}, {\n    name: '$set',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($set nameOrListOfNameOrIndex expr)\n        //  -> S expr  : ($__set 'nameOrListOfNameOrIndex expr)\n        checkParamsLength('$set', list, 3, 3);\n\n        return [{symbol: '$__set'},\n            quote(state, list[1]),\n            list[2],\n        ];\n    },\n}, {\n    name: '$clisp-setq', // alias of $set\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($clisp-setq symbol expr)\n        //  -> S expr  : ($__set 'symbol expr)\n        checkParamsLength('$clisp-setq', list, 3, 3);\n\n        return [{symbol: '$__set'},\n            quote(state, list[1]),\n            list[2],\n        ];\n    },\n}, {\n    name: '$and',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($and expr1 ... exprN)\n        //  -> S expr  : ($__and 'expr1 ... 'exprN)\n        return [{symbol: '$__and'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$or',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($or expr1 ... exprN)\n        //  -> S expr  : ($__or 'expr1 ... 'exprN)\n        return [{symbol: '$__or'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$gensym',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($gensym)\n        // S expression: ($gensym name)\n        //  -> S expr  : ($__gensym 'name)\n        return [\n            {symbol: '$__gensym'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '#',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: (# (name value...)...)\n        //  -> S expr  : ($__# '(name value...)...)\n        return [\n            {symbol: '$__#'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}];\n\n\nexport default macros;\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserState,\n         SxSymbolInfo } from '../../types';\n\n\n\nexport const symbols: SxSymbolInfo[] = [\n    {name: 'nil', fn: (state: SxParserState, name: string) => []},\n    {name: 'null', fn: (state: SxParserState, name: string) => null},\n\n    {name: 'undefined', fn: (state: SxParserState, name: string) => void 0},\n\n    {name: 'true', fn: (state: SxParserState, name: string) => true},\n    {name: '#true', fn: (state: SxParserState, name: string) => true},\n    {name: '#t', fn: (state: SxParserState, name: string) => true},\n\n    {name: 'false', fn: (state: SxParserState, name: string) => false},\n    {name: '#false', fn: (state: SxParserState, name: string) => false},\n    {name: '#f', fn: (state: SxParserState, name: string) => false},\n\n    {name: '#Number:Infinity', fn: (state: SxParserState, name: string) => Number.POSITIVE_INFINITY},\n    {name: '+Infinity', fn: (state: SxParserState, name: string) => Number.POSITIVE_INFINITY},\n    {name: '-Infinity', fn: (state: SxParserState, name: string) => Number.NEGATIVE_INFINITY},\n\n    {name: '#Number:Epsilon', fn: (state: SxParserState, name: string) => Number.EPSILON},\n    {name: '#Number:MaxValue', fn: (state: SxParserState, name: string) => Number.MAX_VALUE},\n    {name: '#Number:MinValue', fn: (state: SxParserState, name: string) => Number.MIN_VALUE},\n    {name: '#Number:MinSafeInteger', fn: (state: SxParserState, name: string) => Number.MAX_SAFE_INTEGER},\n    {name: '#Number:MinSafeInteger', fn: (state: SxParserState, name: string) => Number.MIN_SAFE_INTEGER},\n\n    {name: 'NaN', fn: (state: SxParserState, name: string) => Number.NaN},\n];\n\n\nexport default symbols;\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserConfig } from '../../types';\nimport operators          from './core.operator';\nimport macros             from './core.macro';\nimport symbols            from './core.symbol';\n\n\n\nexport default function install(config: SxParserConfig): SxParserConfig {\n    config.funcs = (config.funcs || []).concat(operators);\n    config.macros = (config.macros || []).concat(macros);\n    config.symbols = (config.symbols || []).concat(symbols);\n    return config;\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserState }     from '../../types';\nimport { toNumber }          from '../../evaluate';\nimport { checkParamsLength } from '../../errors';\nimport { $$first,\n         $$firstAndSecond }  from '../core/core.fn';\n\n\n\nexport const $bitLShift = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: (<< number shift)\n    //  -> S expr  : number\n    checkParamsLength('$bitLShift', args, 2, 2);\n\n    let {car, cdr} = $$firstAndSecond(...args);\n    car = toNumber(car);\n    cdr = toNumber(cdr);\n\n    if (0 <= cdr) {\n        return cdr < 32 ? car << cdr : 0;\n    } else {\n        return cdr > -32 ? car >>> (-cdr) : 0;\n    }\n};\nexport const $$bitLShift = $bitLShift(null as any, null as any);\n\n\nexport const $bitSRShift = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: (>> number shift)\n    //  -> S expr  : number\n    checkParamsLength('$bitSRShift', args, 2, 2);\n\n    let {car, cdr} = $$firstAndSecond(...args);\n    car = toNumber(car);\n    cdr = toNumber(cdr);\n\n    if (0 <= cdr) {\n        return cdr < 32 ? car >> cdr : (car & 0x080000000) ? -1 : 0;\n    } else {\n        return cdr > -32 ? car << (-cdr) : 0;\n    }\n};\nexport const $$bitSRShift = $bitSRShift(null as any, null as any);\n\n\nexport const $bitURShift = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: (>>> number shift)\n    //  -> S expr  : number\n    checkParamsLength('$bitURShift', args, 2, 2);\n\n    let {car, cdr} = $$firstAndSecond(...args);\n    car = toNumber(car);\n    cdr = toNumber(cdr);\n\n    if (0 <= cdr) {\n        return cdr < 32 ? car >>> cdr : 0;\n    } else {\n        return cdr > -32 ? car << (-cdr) : 0;\n    }\n};\nexport const $$bitURShift = $bitURShift(null as any, null as any);\n\n\nexport const $bitNot = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($bit-not number)\n    //  -> S expr  : number\n    checkParamsLength('$bitNot', args, 1, 1);\n\n    const car = $$first(...args);\n    return ~toNumber(car);\n};\nexport const $$bitNot = $bitNot(null as any, null as any);\n\n\nexport const $bitAnd = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($bit-and numberA numberB)\n    //  -> S expr  : number\n    checkParamsLength('$bitAnd', args, 2);\n\n    const car = $$first(...args);\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) & toNumber(curr), toNumber(car));\n};\nexport const $$bitAnd = $bitAnd(null as any, null as any);\n\n\nexport const $bitOr = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($bit-or numberA numberB)\n    //  -> S expr  : number\n    checkParamsLength('$bitOr', args, 2);\n\n    const car = $$first(...args);\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) | toNumber(curr), toNumber(car));\n};\nexport const $$bitOr = $bitOr(null as any, null as any);\n\n\nexport const $bitXor = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($bit-xor numberA numberB)\n    //  -> S expr  : number\n    checkParamsLength('$bitXor', args, 2);\n\n    const car = $$first(...args);\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) ^ toNumber(curr), toNumber(car));\n};\nexport const $$bitXor = $bitXor(null as any, null as any);\n\n\nexport const $add = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: (+ number1 ... numberN)\n    //  -> S expr  : number\n    checkParamsLength('$add', args, 1);\n\n    return args.reduce((prev, curr) => toNumber(prev) + toNumber(curr), 0);\n};\nexport const $$add = $add(null as any, null as any);\n\n\nexport const $sub = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: (- number1 ... numberN)\n    //  -> S expr  : number\n    checkParamsLength('$sub', args, 1);\n\n    const car = $$first(...args);\n    const last = args.slice(1);\n    if (last.length === 0) {\n        // negate\n        return -toNumber(car);\n    } else {\n        // subtract\n        return args.slice(1).reduce((prev, curr) => toNumber(prev) - toNumber(curr), toNumber(car));\n    }\n};\nexport const $$sub = $sub(null as any, null as any);\n\n\nexport const $mul = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: (* number1 ... numberN)\n    //  -> S expr  : number\n    checkParamsLength('$mul', args, 2);\n\n    const car = $$first(...args);\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) * toNumber(curr), toNumber(car));\n};\nexport const $$mul = $mul(null as any, null as any);\n\n\nexport const $sup = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: (** number1 ... numberN)\n    //  -> S expr  : number\n    checkParamsLength('$sup', args, 2);\n\n    const car = $$first(...args);\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) ** toNumber(curr), toNumber(car));\n};\nexport const $$sup = $sup(null as any, null as any);\n\n\nexport const $div = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: (/ number1 ... numberN)\n    //  -> S expr  : number\n    checkParamsLength('$div', args, 2);\n\n    const car = $$first(...args);\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) / toNumber(curr), toNumber(car));\n};\nexport const $$div = $div(null as any, null as any);\n\n\nexport const $mod = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: (% number1 ... numberN)\n    //  -> S expr  : number\n    checkParamsLength('$mod', args, 2);\n\n    const car = $$first(...args);\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) % toNumber(curr), toNumber(car));\n};\nexport const $$mod = $mod(null as any, null as any);\n\n\nexport const $max = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($max val1 ... valN)\n    //  -> S expr  : value\n    return Math.max(...(args.map(x => toNumber(x))));\n};\nexport const $$max = $max(null as any, null as any);\n\n\nexport const $min = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($min val1 ... valN)\n    //  -> S expr  : value\n    return Math.min(...(args.map(x => toNumber(x))));\n};\nexport const $$min = $min(null as any, null as any);\n\n\nexport const $avg = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($avg val1 ... valN)\n    //  -> S expr  : value\n    const a = args.map(x => toNumber(x));\n    return a.length > 0 ? a.reduce((prev, curr) => prev + curr, 0) / a.length : NaN;\n};\nexport const $$avg = $avg(null as any, null as any);\n\n\nexport const $floor = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($floor number)\n    //  -> S expr  : number\n    checkParamsLength('$floor', args, 1, 1);\n\n    return Math.floor(toNumber($$first(...args)));\n};\nexport const $$floor = $floor(null as any, null as any);\n\n\nexport const $ceil = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($ceil number)\n    //  -> S expr  : number\n    checkParamsLength('$ceil', args, 1, 1);\n\n    return Math.ceil(toNumber($$first(...args)));\n};\nexport const $$ceil = $ceil(null as any, null as any);\n\n\nexport const $round = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($round number)\n    //  -> S expr  : number\n    checkParamsLength('$round', args, 1, 1);\n\n    return Math.round(toNumber($$first(...args)));\n};\nexport const $$round = $round(null as any, null as any);\n\n\nexport const $abs = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($abs number)\n    //  -> S expr  : number\n    checkParamsLength('$abs', args, 1, 1);\n\n    return Math.abs(toNumber($$first(...args)));\n};\nexport const $$abs = $abs(null as any, null as any);\n\n\nexport const $sign = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($sign number)\n    //  -> S expr  : number\n    checkParamsLength('$sign', args, 1, 1);\n\n    return Math.sign(toNumber($$first(...args)));\n};\nexport const $$sign = $sign(null as any, null as any);\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxFuncInfo } from '../../types';\nimport * as ops       from './arithmetic.fn';\n\n\n\nexport const funcs: SxFuncInfo[] = [{\n    name: '<<',\n    fn: ops.$bitLShift,\n}, {\n    name: '$bit-l-shift',\n    fn: ops.$bitLShift,\n}, {\n    name: '>>',\n    fn: ops.$bitSRShift,\n}, {\n    name: '$bit-sr-shift',\n    fn: ops.$bitSRShift,\n}, {\n    name: '>>>',\n    fn: ops.$bitURShift,\n}, {\n    name: '$bit-ur-shift',\n    fn: ops.$bitURShift,\n}, {\n    name: '$bit-not',\n    fn: ops.$bitNot,\n}, {\n    name: '$bit-and',\n    fn: ops.$bitAnd,\n}, {\n    name: '$bit-or',\n    fn: ops.$bitOr,\n}, {\n    name: '$bit-xor',\n    fn: ops.$bitXor,\n}, {\n    name: '+',\n    fn: ops.$add,\n}, {\n    name: '$add',\n    fn: ops.$add,\n}, {\n    name: '$sum',\n    fn: ops.$add,\n}, {\n    name: '-',\n    fn: ops.$sub,\n}, {\n    name: '$sub',\n    fn: ops.$sub,\n}, {\n    name: '$neg',\n    fn: ops.$sub,\n}, {\n    name: '*',\n    fn: ops.$mul,\n}, {\n    name: '$mul',\n    fn: ops.$mul,\n}, {\n    name: '**',\n    fn: ops.$sup,\n}, {\n    name: '$sup',\n    fn: ops.$sup,\n}, {\n    name: '/',\n    fn: ops.$div,\n}, {\n    name: '$div',\n    fn: ops.$div,\n}, {\n    name: '%',\n    fn: ops.$mod,\n}, {\n    name: '$mod',\n    fn: ops.$mod,\n}, {\n    name: '$max',\n    fn: ops.$max,\n}, {\n    name: '$min',\n    fn: ops.$min,\n}, {\n    name: '$avg',\n    fn: ops.$avg,\n}, {\n    name: '$floor',\n    fn: ops.$floor,\n}, {\n    name: '$ceil',\n    fn: ops.$ceil,\n}, {\n    name: '$round',\n    fn: ops.$round,\n}, {\n    name: '$abs',\n    fn: ops.$abs,\n}, {\n    name: '$sign',\n    fn: ops.$sign,\n}];\n\n\nexport default funcs;\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxMacroInfo,\n         SxParserState }     from '../../types';\nimport { isSymbol,\n         quote }             from '../../ast';\nimport { checkParamsLength } from '../../errors';\n\n\n\nexport const macros: SxMacroInfo[] = [{\n    name: '$incl',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($incl name)\n        //  -> S expr  : ($set name ($add name 1))\n        checkParamsLength('$incl', list, 2, 2);\n\n        return [{symbol: '$set'},\n            list[1],\n            [{symbol: '$add'}, list[1], 1],\n        ];\n    },\n}, {\n    name: '++',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: (++ name)\n        //  -> S expr  : ($set name ($add name 1))\n        checkParamsLength('++', list, 2, 2);\n\n        return [{symbol: '$set'},\n            list[1],\n            [{symbol: '$add'}, list[1], 1],\n        ];\n    },\n}, {\n    name: '$decl',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($decl name)\n        //  -> S expr  : ($set name ($add name -1))\n        checkParamsLength('$decl', list, 2, 2);\n\n        return [{symbol: '$set'},\n            list[1],\n            [{symbol: '$add'}, list[1], -1],\n        ];\n    },\n}, {\n    name: '--',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: (-- name)\n        //  -> S expr  : ($set name ($add name -1))\n        checkParamsLength('--', list, 2, 2);\n\n        return [{symbol: '$set'},\n            list[1],\n            [{symbol: '$add'}, list[1], -1],\n        ];\n    },\n}, {\n    name: '$incln',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($incln name v)\n        //  -> S expr  : ($set name ($add name v))\n        checkParamsLength('$incln', list, 3, 3);\n        if (typeof list[2] !== 'number') {\n            throw new Error(`[SX] $incln: Invalid parameter: arg(1) is not number.`);\n        }\n\n        return [{symbol: '$set'},\n            list[1],\n            [{symbol: '$add'}, list[1], list[2]],\n        ];\n    },\n}, {\n    name: '+=',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: (++ name v)\n        //  -> S expr  : ($set name ($add name v))\n        checkParamsLength('+=', list, 3, 3);\n        if (typeof list[2] !== 'number') {\n            throw new Error(`[SX] +=: Invalid parameter: arg(1) is not number.`);\n        }\n\n        return [{symbol: '$set'},\n            list[1],\n            [{symbol: '$add'}, list[1], list[2]],\n        ];\n    },\n}, {\n    name: '$decln',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($decln name v)\n        //  -> S expr  : ($set name ($add name -v))\n        checkParamsLength('$decln', list, 3, 3);\n        if (typeof list[2] !== 'number') {\n            throw new Error(`[SX] $decln: Invalid parameter: arg(1) is not number.`);\n        }\n\n        return [{symbol: '$set'},\n            list[1],\n            [{symbol: '$add'}, list[1], -(list[2] as number)],\n        ];\n    },\n}, {\n    name: '-=',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: (-- name)\n        //  -> S expr  : ($set name ($add name -v))\n        checkParamsLength('-=', list, 3, 3);\n        if (typeof list[2] !== 'number') {\n            throw new Error(`[SX] -=: Invalid parameter: arg(1) is not number.`);\n        }\n\n        return [{symbol: '$set'},\n            list[1],\n            [{symbol: '$add'}, list[1], -(list[2] as number)],\n        ];\n    },\n}];\n\n\nexport default macros;\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxSymbolInfo } from '../../types';\n\n\n\nexport const symbols: SxSymbolInfo[] = [];\n\n\nexport default symbols;\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserConfig } from '../../types';\nimport operators          from './arithmetic.operator';\nimport macros             from './arithmetic.macro';\nimport symbols            from './arithmetic.symbol';\n\n\n\nexport default function install(config: SxParserConfig): SxParserConfig {\n    config.funcs = (config.funcs || []).concat(operators);\n    config.macros = (config.macros || []).concat(macros);\n    config.symbols = (config.symbols || []).concat(symbols);\n    return config;\n}\n","// Copyright (c) 2017, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\n\nexport class Query<T> {\n    public constructor(public data: T[]) {\n    }\n\n    public orderBy(condition: Array<string | string[/* colName: string, ('asc' | 'desc') */]> | ((a: T, b: T) => number)): Query<T> {\n        let fn: (a: T, b: T) => number;\n        if (Array.isArray(condition)) {\n            fn = (x: T, y: T) => {\n                for (const c of condition) {\n                    if (typeof c === 'string') {\n                        if (x[c] > y[c]) return 1;\n                        if (x[c] < y[c]) return -1;\n                    } else {\n                        const desc = c[1] === 'desc' ? -1 : 1;\n                        if (x[c[0]] > y[c[0]]) return 1 * desc;\n                        if (x[c[0]] < y[c[0]]) return -1 * desc;\n                    }\n                }\n                return 0;\n            };\n        } else {\n            fn = condition;\n        }\n        return new Query(this.data.slice(0).sort(fn));\n    }\n\n    public groupBy(condition: string[/* colName: string */] | ((a: T, b: T, index: number, array: T[]) => boolean)): Query<T[]> {\n        let fn: (a: T, b: T, index: number, array: T[]) => boolean;\n        if (Array.isArray(condition)) {\n            fn = (x: T, y: T) => {\n                for (const c of condition) {\n                    if (x[c] !== y[c]) return false;\n                }\n                return true;\n            };\n        } else{\n            fn = condition;\n        }\n        const r: T[][] = [];\n        let start = 0;\n        let i = 1;\n        for (; i < this.data.length; i++) {\n            if (! fn(this.data[start], this.data[i], i, this.data)) {\n                r.push(this.data.slice(start, i));\n                start = i;\n            }\n        }\n        r.push(this.data.slice(start, i));\n        return new Query(r);\n    }\n\n    public groupEvery(n: number | {single: number, first?: number, intermediate: number, last?: number}): Query<T[]> {\n        if (typeof n === 'number') {\n            return this.groupBy((a, b, index, array) => {\n                if ((index % n) === 0) return false;\n                return true;\n            });\n        } else {\n            const w = Object.assign({first: n.intermediate, last: n.intermediate}, n);\n            const r = this.groupBy((a, b, index, array) => {\n                if (w.single >= array.length) {\n                    if ((index % w.single) === 0) return false;\n                    return true;\n                } else if (index <= w.first) {\n                    if ((index % w.first) === 0) return false;\n                    return true;\n                } else {\n                    if (((index - w.first) % w.intermediate) === 0) return false;\n                    return true;\n                }\n            });\n            if (r.data.length === 1) {\n                if (w.single < r.data[0].length) {\n                    r.data.push([]);\n                }\n            } else {\n                if (w.first < r.data[0].length) {\n                    // case of w.first === 0\n                    r.data.unshift([]);\n                }\n            }\n            if (r.data.length > 1) {\n                if (r.data[r.data.length - 1].length > w.last) {\n                    r.data.push([]);\n                }\n            }\n            return r;\n        }\n    }\n\n    public where(fn: (value: T, index: number, array: T[]) => boolean): Query<T> {\n        return new Query(this.data.filter(fn));\n    }\n\n    public select(): T[];\n    public select<R>(fn: (value: T, index: number, array: T[]) => R): R[];\n    public select<R>(fn?: (value: T, index: number, array: T[]) => R): Array<R | T> {\n        return fn ? this.data.map(fn) : this.data as any;\n    }\n}\n\n\n\nexport function query<T>(data: T[]): Query<T> {\n    return new Query<T>(data);\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserState }     from '../../types';\nimport { toNumber,\n         evaluate }          from '../../evaluate';\nimport { checkParamsLength } from '../../errors';\nimport { $$first,\n         $$firstAndSecond }  from '../core/core.fn';\nimport { query }             from '../../../lib/data';\n\n\n\nexport const $range = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($range start end)\n    // S expression: ($range start end step)\n    //  -> S expr  : list\n    checkParamsLength('$range', args, 2, 3);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    const start = toNumber(car) || 0;\n    const stop = toNumber(cdr) || 0;\n\n    const step = (args.length > 2 ? toNumber(args[2]) || 0 : 0) || (start <= stop ? 1 : -1);\n    const n = Math.sign(stop - start) + Math.sign(step) !== 0 ?\n        (Math.floor((Math.abs(stop - start) / Math.abs(step))) + 1) : 0;\n\n    state.evalCount += n;\n    evaluate(state, 0);\n    return Array.from({length: n}, (x, i) => start + i * step);\n};\n\n\nexport const $length = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($length listOrString)\n    //  -> S expr  : number\n    checkParamsLength('$length', args, 1, 1);\n\n    const car = $$first(...args);\n    switch (typeof car) {\n    case 'object':\n        if (! ('length' in car)) {\n            break;\n        }\n        // FALL_THRU\n    case 'string':\n        return car.length;\n    }\n    throw new Error(`[SX] $length: Invalid argument type: object has no property 'length'.`);\n};\nexport const $$length = $length(null as any, null as any);\n\n\nexport const $trim = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($trim string)\n    //  -> S expr  : string\n    checkParamsLength('$trim', args, 1, 1);\n\n    const car = $$first(...args);\n    if (typeof car === 'string') {\n        return car.trim();\n    }\n    throw new Error(`[SX] $trim: Invalid argument type: args[0] is not string.`);\n};\nexport const $$trim = $trim(null as any, null as any);\n\n\nexport const $trimHead = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($trim-head string)\n    //  -> S expr  : string\n    checkParamsLength('$trimHead', args, 1, 1);\n\n    const car = $$first(...args);\n    if (typeof car === 'string') {\n        return car.trimLeft();\n    }\n    throw new Error(`[SX] $trimHead: Invalid argument type: args[0] is not string.`);\n};\nexport const $$trimHead = $trimHead(null as any, null as any);\n\n\nexport const $trimTail = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($trim-tail string)\n    //  -> S expr  : string\n    checkParamsLength('$trimTail', args, 1, 1);\n\n    const car = $$first(...args);\n    if (typeof car === 'string') {\n        return car.trimRight();\n    }\n    throw new Error(`[SX] $trimTail: Invalid argument type: args[0] is not string.`);\n};\nexport const $$trimTail = $trimTail(null as any, null as any);\n\n\nexport const $replaceAll = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($replace-all src-string match-string replacement-string)\n    //  -> S expr  : string\n    checkParamsLength('$replaceAll', args, 3, 3);\n\n    if (typeof args[0] === 'string' && typeof args[1] === 'string' && typeof args[2] === 'string') {\n        return args[0].split(args[1]).join(args[2]);\n    }\n    throw new Error(`[SX] $replaceAll: Invalid argument type: args[0] or [1] or [2] is not string.`);\n};\nexport const $$replaceAll = $replaceAll(null as any, null as any);\n\n\nexport const $split = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($split src-string match-string)\n    //  -> S expr  : (string ... string)\n    checkParamsLength('$split', args, 2, 2);\n\n    if (typeof args[0] === 'string' && typeof args[1] === 'string') {\n        return args[0].split(args[1]);\n    }\n    throw new Error(`[SX] $split: Invalid argument type: args[0] or [1] is not string.`);\n};\nexport const $$split = $split(null as any, null as any);\n\n\nexport const $join = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($join '(str1 ... strN) separator)\n    //  -> S expr  : (string ... string)\n    checkParamsLength('$join', args, 1, 2);\n\n    if (typeof Array.isArray(args[0])) {\n        if (args.length > 1) {\n            if (typeof args[1] === 'string') {\n                return args[0].join(args[1]);\n            }\n            throw new Error(`[SX] $join: Invalid argument type: args[1] is not string.`);\n        } else {\n            return args[0].join();\n        }\n    }\n    throw new Error(`[SX] $join: Invalid argument type: args[0] is not array.`);\n};\nexport const $$join = $join(null as any, null as any);\n\n\nexport const $concat = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($concat listOrString1 ... listOrStringN)\n    //  -> S expr  : listOrString\n    checkParamsLength('$concat', args, 1);\n\n    const car = $$first(...args);\n    switch (typeof car) {\n    case 'object':\n        if (! ('concat' in car)) {\n            break;\n        }\n        // FALL_THRU\n    case 'string':\n        return car.concat(...args.slice(1));\n    }\n    throw new Error(`[SX] $concat: Invalid argument type: object has no property 'concat'.`);\n};\nexport const $$concat = $concat(null as any, null as any);\n\n\nexport const $slice = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($slice start end listOrString)\n    // S expression: ($slice start listOrString)\n    //  -> S expr  : listOrString\n    checkParamsLength('$slice', args, 2, 3);\n\n    if (args.length === 3) {\n        if (typeof args[2] === 'string' || Array.isArray(args[2])) {\n            return args[2].slice(toNumber(args[0]), toNumber(args[1]));\n        }\n    }\n    if (args.length === 2) {\n        if (typeof args[1] === 'string' || Array.isArray(args[1])) {\n            return args[1].slice(toNumber(args[0]));\n        }\n    }\n    throw new Error(`[SX] $slice: Invalid argument type: args[${args.length - 1}] is not string or array.`);\n};\nexport const $$slice = $slice(null as any, null as any);\n\n\nexport const $top = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($top n listOrString)\n    //  -> S expr  : listOrString\n    checkParamsLength('$top', args, 2, 2);\n\n    if (typeof args[1] === 'string' || Array.isArray(args[1])) {\n        return args[1].slice(0, toNumber(args[0]));\n    }\n    throw new Error(`[SX] $top: Invalid argument type: args[1] is not string or array.`);\n};\nexport const $$top = $top(null as any, null as any);\n\n\nexport const $tail = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($tail n listOrString)\n    //  -> S expr  : listOrString\n    checkParamsLength('$tail', args, 2, 2);\n\n    if (typeof args[1] === 'string' || Array.isArray(args[1])) {\n        const n = -toNumber(args[0]);\n        return args[1].slice(n >= 0 || Number.isNaN(n) ? args[1].length : n);\n    }\n    throw new Error(`[SX] $tail: Invalid argument type: args[1] is not string or array.`);\n};\nexport const $$tail = $tail(null as any, null as any);\n\n\nexport const $push = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($push list value)\n    //  -> S expr  : list\n    checkParamsLength('$push', args, 2, 2);\n\n    if (typeof Array.isArray(args[0])) {\n        args[0].push(args[1]);\n        return args[0];\n    }\n    throw new Error(`[SX] $push: Invalid argument type: args[1] is not array.`);\n};\nexport const $$push = $push(null as any, null as any);\n\n\nexport const $pop = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($pop list)\n    //  -> S expr  : value\n    checkParamsLength('$pop', args, 1, 1);\n\n    if (typeof Array.isArray(args[0])) {\n        const v = args[0].pop();\n        return v;\n    }\n    throw new Error(`[SX] $pop: Invalid argument type: args[1] is not array.`);\n};\nexport const $$pop = $pop(null as any, null as any);\n\n\n// tslint:disable-next-line:variable-name\nexport const $__at = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__at index listOrString)\n    //  -> S expr  : any\n    checkParamsLength('$__at', args, 2, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    return cdr[car];\n};\n// tslint:disable-next-line:variable-name\nexport const $$__at = $__at(null as any, null as any);\n\n\nexport const $reverse = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($reverse listOrString)\n    //  -> S expr  : listOrString\n    checkParamsLength('$reverse', args, 1, 1);\n\n    const car = $$first(...args);\n    if (Array.isArray(car)) {\n        return car.slice(0).reverse();\n    }\n    throw new Error(`[SX] $reverse: Invalid argument type: args[0] is not array.`);\n};\nexport const $$reverse = $reverse(null as any, null as any);\n\n\nexport const $reverseDestructive = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($reverse! listOrString)\n    //  -> S expr  : listOrString\n    checkParamsLength('$reverse!', args, 1, 1);\n\n    const car = $$first(...args);\n    if (Array.isArray(car)) {\n        return car.reverse();\n    }\n    throw new Error(`[SX] $reverse!: Invalid argument type: args[0] is not array.`);\n};\nexport const $$reverseDestructive = $reverseDestructive(null as any, null as any);\n\n\nexport const $find = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($find list (lambda (v index array) (... boolean)))\n    //  -> S expr  : list\n    checkParamsLength('$find', args, 2, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    if (Array.isArray(car)) {\n        return car.find(cdr);\n    }\n    throw new Error(`[SX] $find: Invalid argument type: args[0] is not array.`);\n};\nexport const $$find = $find(null as any, null as any);\n\n\nexport const $filter = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($filter list (lambda (v index array) (... boolean)))\n    //  -> S expr  : list\n    checkParamsLength('$filter', args, 2, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    if (Array.isArray(car)) {\n        return car.filter(cdr);\n    }\n    throw new Error(`[SX] $filter: Invalid argument type: args[0] is not array.`);\n};\nexport const $$filter = $filter(null as any, null as any);\n\n\nexport const $map = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($map list (lambda (v index array) (... any)))\n    //  -> S expr  : list\n    checkParamsLength('$map', args, 2, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    if (Array.isArray(car)) {\n        return car.map(cdr);\n    }\n    throw new Error(`[SX] $map: Invalid argument type: args[0] is not array.`);\n};\nexport const $$map = $map(null as any, null as any);\n\n\nexport const $reduce = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($reduce list (lambda (acc v index array) (... any)) initial-value)\n    // S expression: ($reduce list (lambda (acc v index array) (... any)))\n    //  -> S expr  : list\n    checkParamsLength('$reduce', args, 2, 3);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    if (Array.isArray(car)) {\n        if (args.length < 3) {\n            return car.reduce(cdr);\n        } else {\n            return car.reduce(cdr, args[2]);\n        }\n    }\n    throw new Error(`[SX] $reduce: Invalid argument type: args[0] is not array.`);\n};\nexport const $$reduce = $reduce(null as any, null as any);\n\n\nexport const $reduceFromTail = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($reduce-from-tail list (lambda (acc v index array) (... any)) initial-value)\n    // S expression: ($reduce-from-tail list (lambda (acc v index array) (... any)))\n    //  -> S expr  : list\n    checkParamsLength('$reduceFromTail', args, 2, 3);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    if (Array.isArray(car)) {\n        if (args.length < 3) {\n            return car.reduceRight(cdr);\n        } else {\n            return car.reduceRight(cdr, args[2]);\n        }\n    }\n    throw new Error(`[SX] $reduceFromTail: Invalid argument type: args[0] is not array.`);\n};\nexport const $$reduceFromTail = $reduceFromTail(null as any, null as any);\n\n\nexport const $sort = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($sort list (lambda (a b) (... number_a-b)))\n    //  -> S expr  : list\n    checkParamsLength('$sort', args, 2, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    if (Array.isArray(car)) {\n        return car.slice(0).sort(cdr);\n    }\n    throw new Error(`[SX] $sort: Invalid argument type: args[0] is not array.`);\n};\nexport const $$sort = $sort(null as any, null as any);\n\n\nexport const $sortDestructive = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($sort! list (lambda (a b) (... number_a-b)))\n    //  -> S expr  : list\n    checkParamsLength('$sort!', args, 2, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    if (Array.isArray(car)) {\n        return car.sort(cdr);\n    }\n    throw new Error(`[SX] $sort!: Invalid argument type: args[0] is not array.`);\n};\nexport const $$sortDestructive = $sortDestructive(null as any, null as any);\n\n\nexport const $groupEvery = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($group-every optionsOrNumber (x1 ... xN))\n    //  -> S expr  : ((x1 ... ) ... ( ... xN))\n    checkParamsLength('$group-every', args, 2, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    if (! Array.isArray(cdr)) {\n        throw new Error(`[SX] $group-every: Invalid argument type: args[1] is not array.`);\n    }\n\n    return query(cdr as any[]).groupEvery(car).select();\n};\nexport const $$groupEvery = $groupEvery(null as any, null as any);\n\n\nexport const $groupBy = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($group-by conditions (x1 ... xN))\n    //  -> S expr  : ((x1 ... ) ... ( ... xN))\n    checkParamsLength('$group-by', args, 2, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    if (! Array.isArray(cdr)) {\n        throw new Error(`[SX] $group-by: Invalid argument type: args[1] is not array.`);\n    }\n\n    return query(cdr as any[]).groupBy(car).select();\n};\nexport const $$groupBy = $groupBy(null as any, null as any);\n\n\nexport const $orderBy = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($order-by conditions (x1 ... xN))\n    //  -> S expr  : (x1 ... xN)\n    checkParamsLength('$order-by', args, 2, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    if (! Array.isArray(cdr)) {\n        throw new Error(`[SX] $order-by: Invalid argument type: args[1] is not array.`);\n    }\n\n    return query(cdr as any[]).orderBy(car).select();\n};\nexport const $$orderBy = $orderBy(null as any, null as any);\n\n\nexport const $where = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($where (-> (v index array) ... boolean) (x1 ... xN))\n    //  -> S expr  : (x'1 ... x'M)\n    checkParamsLength('$where', args, 2, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    if (typeof args[0] !== 'function') {\n        throw new Error(`[SX] $where: Invalid argument type: args[0] is not function.`);\n    }\n    if (! Array.isArray(cdr)) {\n        throw new Error(`[SX] $where: Invalid argument type: args[1] is not array.`);\n    }\n\n    return query(cdr as any[]).where(car).select();\n};\nexport const $$where = $where(null as any, null as any);\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxFuncInfo } from '../../types';\nimport * as ops       from './sequence.fn';\n\n\n\nexport const funcs: SxFuncInfo[] = [{\n    name: '$range',\n    fn: ops.$range,\n}, {\n    name: '$length',\n    fn: ops.$length,\n}, {\n    name: '$trim',\n    fn: ops.$trim,\n}, {\n    name: '$trim-head',\n    fn: ops.$trimHead,\n}, {\n    name: '$trim-tail',\n    fn: ops.$trimTail,\n}, {\n    name: '$replace-all',\n    fn: ops.$replaceAll,\n}, {\n    name: '$split',\n    fn: ops.$split,\n}, {\n    name: '$join',\n    fn: ops.$join,\n}, {\n    name: '$concat',\n    fn: ops.$concat,\n}, {\n    name: '$slice',\n    fn: ops.$slice,\n}, {\n    name: '$top',\n    fn: ops.$top,\n}, {\n    name: '$tail',\n    fn: ops.$tail,\n}, {\n    name: '$push',\n    fn: ops.$push,\n}, {\n    name: '$pop',\n    fn: ops.$pop,\n}, {\n    name: '$__at',\n    fn: ops.$__at,\n}, {\n    name: '$reverse',\n    fn: ops.$reverse,\n}, {\n    name: '$reverse!',\n    fn: ops.$reverseDestructive,\n}, {\n    name: '$find',\n    fn: ops.$find,\n}, {\n    name: '$filter',\n    fn: ops.$filter,\n}, {\n    name: '$map',\n    fn: ops.$map,\n}, {\n    name: '$reduce',\n    fn: ops.$reduce,\n}, {\n    name: '$reduce-from-head',\n    fn: ops.$reduce,\n}, {\n    name: '$reduce-from-tail',\n    fn: ops.$reduceFromTail,\n}, {\n    name: '$sort',\n    fn: ops.$sort,\n}, {\n    name: '$sort!',\n    fn: ops.$sortDestructive,\n}, {\n    name: '$group-every',\n    fn: ops.$groupEvery,\n}, {\n    name: '$group-by',\n    fn: ops.$groupBy,\n}, {\n    name: '$order-by',\n    fn: ops.$orderBy,\n}, {\n    name: '$where',\n    fn: ops.$where,\n}];\n\n\nexport default funcs;\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxMacroInfo,\n         SxParserState } from '../../types';\nimport { isSymbol }      from '../../ast';\n\n\n\nexport const macros: SxMacroInfo[] = [{\n    name: '$[',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($[ index ] listOrObject)\n        //  -> S expr  : ($__at listOrObject)\n        const symOf = isSymbol(list[2], ']');\n        if (! symOf) {\n            throw new Error(`[SX] $repeat: Invalid syntax: missing ']' keyword.`);\n        }\n        return [{symbol: '$__at'},\n            list[1],\n            list[3],\n        ];\n    },\n}];\n\n\nexport default macros;\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxSymbolInfo } from '../../types';\n\n\n\nexport const symbols: SxSymbolInfo[] = [];\n\n\nexport default symbols;\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserConfig } from '../../types';\nimport operators          from './sequence.operator';\nimport macros             from './sequence.macro';\nimport symbols            from './sequence.symbol';\n\n\n\nexport default function install(config: SxParserConfig): SxParserConfig {\n    config.funcs = (config.funcs || []).concat(operators);\n    config.macros = (config.macros || []).concat(macros);\n    config.symbols = (config.symbols || []).concat(symbols);\n    return config;\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserState,\n         SxToken }             from '../../types';\nimport { isSymbol,\n         quote }               from '../../ast';\nimport { evaluate,\n         getScope }            from '../../evaluate';\nimport { checkParamsLength,\n         checkUnsafeVarNames } from '../../errors';\nimport { $$first,\n         $$firstAndSecond,\n         $__scope,\n         $$boolean }           from '../core/core.fn';\n\n\n\n// tslint:disable-next-line:variable-name\nexport const $__outputIf = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__outputIf cond 'expr)\n    //  -> (if cond is true ) S expr  : expr\n    //  -> (if cond is false) S expr  : ()\n    checkParamsLength('$__outputIf', args, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    let r: SxToken = [];\n    if ($$boolean(car)) {\n        if (2 < args.length) {\n            r.push({symbol: state.config.reservedNames.Template}, ...args.slice(1));\n            r = evaluate(state, r);\n        } else {\n            r = evaluate(state, cdr);\n        }\n    }\n    return r;\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__outputForOf = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__outputForOf list 'expr)\n    //  -> S expr  : (Template expr ... expr)\n    checkParamsLength('$__outputForOf', args, 2);\n\n    const car = $$first(...args);\n    const r: SxToken[] = [];\n    if (Array.isArray(car)) {\n        for (let i = 0; i < car.length; i++) {\n            const x = car[i];\n            const v = $__scope(state, name)(true, true, [\n                ['$data', quote(state, x)],\n                ['$index', i],\n                ['$array', quote(state, car)],\n                ['$parent', quote(state, getScope(state).scope)],\n            ], ...args.slice(1));\n\n            if (2 < args.length && Array.isArray(v)) {\n                r.push(...v);\n            } else {\n                r.push(v);\n            }\n        }\n    } else {\n        throw new Error(`[SX] $__outputForOf: Invalid argument(s): args[0] is not array.`);\n    }\n    // All of r items are already evaluated.\n    return evaluate(state,\n        ([{symbol: state.config.reservedNames.Template}] as SxToken[])\n        .concat(r.map(z => [{symbol: state.config.reservedNames.quote}, z])));\n};\n\n\nexport const $jsxProps = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: (@ (name value...)...)\n    //  -> JSON    : {name: value, ...}\n    const r: any = {};\n    for (const x of args) {\n        if (Array.isArray(x) && 0 < x.length) {\n            const sym = isSymbol(x[0]);\n            const keyName =\n                sym ? sym.symbol :\n                String(evaluate(state, x[0]));\n            switch (keyName) {\n            case 'style':\n                {\n                    if (x.length === 1) {\n                        // S expression: (@ ... (style) ...)\n                        //  -> JSON    : {..., style: \"\", ...}\n                        r[keyName] = \"\";\n                    } else if (x.length >= 2) {\n                        // S expression: (@ ... (style \"styleName1: styleValue1; ...\" ...) ...)\n                        // S expression: (@ ... (style (styleName1 styleValue1) ...) ...)\n                        //  -> JSON    : {..., style: {styleName1: styleValue1}, ...}\n                        const styles: object = {};\n                        for (const s of x.slice(1)) {\n                            if (Array.isArray(s) && 1 < s.length) {\n                                styles[String(evaluate(state, s[0]))] = String(evaluate(state, s[1]));\n                            } else if (typeof s === 'string') {\n                                for (const v of s.split(';')) {\n                                    const matched = /^\\s*(\\S+)\\s*:\\s*(.*?)\\s*$/.exec(v);\n                                    if (matched) {\n                                        styles[matched[1]] = matched[2];\n                                    }\n                                }\n                            }\n                        }\n                        r[keyName] = styles;\n                    }\n                }\n                break;\n            case 'class': case 'styleClass':\n                {\n                    if (x.length === 1) {\n                        // S expression: (@ ... (class) ...)\n                        //  -> JSON    : {..., class: [], ...}\n                        r[keyName] = [];\n                    } else if (x.length >= 2) {\n                        // S expression: (@ ... (class \"className1 className2 ...\") ...)\n                        // S expression: (@ ... (class (className1 className2 ...)) ...)\n                        //  -> JSON    : {..., class: [className1 className2 ...], ...}\n                        let classes: any[] = [];\n                        for (const c of x.slice(1)) {\n                            if (Array.isArray(c)) {\n                                classes = classes.concat(c.map(z => evaluate(state, z)));\n                            } else if (typeof c === 'string') {\n                                classes = classes.concat(c.split(' '));\n                            }\n                        }\n                        const cs: string[] = [];\n                        const fn: (a: any[]) => void = (a) => a\n                            .forEach(c => (c === null || c === void 0) ?\n                                void 0 :\n                                (Array.isArray(c) ? fn(c) : cs.push(String(c))));\n                        fn(classes);\n                        r[keyName] = cs;\n                    }\n                }\n                break;\n            case 'className':\n                {\n                    if (x.length === 1) {\n                        // S expression: (@ ... (class) ...)\n                        //  -> JSON    : {..., class: \"\", ...}\n                        r[keyName] = '';\n                    } else if (x.length >= 2) {\n                        // S expression: (@ ... (class \"className1 className2 ...\") ...)\n                        // S expression: (@ ... (class (className1 className2 ...)) ...)\n                        //  -> JSON    : {..., class: \"className1 className2 ...\", ...}\n                        let classes: string = '';\n                        for (const c of x.slice(1)) {\n                            let fragment = '';\n                            if (Array.isArray(c)) {\n                                const cs: string[] = [];\n                                const fn: (a: any[]) => void = (a) => a\n                                    .map(z => evaluate(state, z))\n                                    .forEach(z => (z === null || z === void 0) ?\n                                        void 0 :\n                                        (Array.isArray(z) ? fn(z) : cs.push(String(z))));\n                                fn(c);\n                                fragment = cs.join(' ');\n                            } else if (typeof c === 'string') {\n                                fragment = c;\n                            }\n                            if (0 < classes.length) classes += ' ' + fragment;\n                            else classes = fragment;\n                        }\n                        r[keyName] = classes;\n                    }\n                }\n                break;\n            case 'dangerouslySetInnerHTML':\n                {\n                    if (x.length === 1) {\n                        r[keyName] = {__html: ''};\n                    } else if (x.length >= 2) {\n                        r[keyName] = {__html: evaluate(state, x[1])};\n                    } else {\n                        r[keyName] = {__html:\n                            evaluate(state, ([{symbol: state.config.reservedNames.list}] as SxToken[])\n                            .concat(x.slice(1)))\n                        };\n                    }\n                }\n                break;\n            case 'setInnerText':\n                {\n                    if (x.length === 1) {\n                        r[keyName] = {__text: ''};\n                    } else if (x.length >= 2) {\n                        r[keyName] = {__text: evaluate(state, x[1])};\n                    } else {\n                        r[keyName] = {__text:\n                            evaluate(state, ([{symbol: state.config.reservedNames.list}] as SxToken[])\n                            .concat(x.slice(1)))\n                        };\n                    }\n                }\n                break;\n            default:\n                {\n                    checkUnsafeVarNames('$jsxProps', keyName);\n                    if (x.length === 1) {\n                        // S expression: (@ ... (keyName) ...)\n                        //  -> JSON    : {..., keyName: true, ...}\n                        r[keyName] = true;\n                    } else if (x.length === 2) {\n                        // S expression: (@ ... (keyName value) ...)\n                        //  -> JSON    : {..., keyName: value, ...}\n                        r[keyName] = evaluate(state, x[1]);\n                    } else {\n                        // S expression: (@ ... (keyName value1 value2 ...) ...)\n                        //  -> JSON    : {..., keyName: [value1, value2, ], ...}\n                        r[keyName] =\n                            evaluate(state, ([{symbol: state.config.reservedNames.list}] as SxToken[])\n                            .concat(x.slice(1)));\n                    }\n                }\n                break;\n            }\n        } else {\n            throw new Error(`[SX] $jsxProps: Invalid argument(s): args[?] is not array.`);\n        }\n    }\n    return r;\n};\n\n\nfunction getJsxTagsParams(state: SxParserState, ...args: any[]) {\n    let children = args;\n    let props: any = {};\n    if (0 < args.length && Array.isArray(args[0])) {\n        const sym = isSymbol(args[0][0], '@');\n\n        if (sym) {\n            props = $jsxProps(state, '')(...args[0].slice(1));\n            children = children.slice(1);\n        }\n    }\n    return {props, children};\n}\n\n\nexport const $jsxStandardTag = (state: SxParserState, name: string) => (...args: any[]) => {\n    const {props, children} = getJsxTagsParams(state, ...args);\n    return (state.config.jsx as any)(name, props, ...children);\n};\n\n\nexport const $jsxComponentTag = (component: any) => (state: SxParserState, name: string) => (...args: any[]) => {\n    const {props, children} = getJsxTagsParams(state, ...args);\n    return (state.config.jsx as any)(component, props, ...children);\n};\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxFuncInfo } from '../../types';\nimport * as ops       from './jsx.fn';\n\n\n\nexport const funcs: SxFuncInfo[] = [{\n    name: '$=__if',\n    fn: ops.$__outputIf,\n}, {\n    name: '$=__for',\n    fn: ops.$__outputForOf,\n}];\n\n\nexport default funcs;\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxMacroInfo,\n         SxParserState } from '../../types';\nimport { quote }         from '../../ast';\n\n\n\nexport const macros: SxMacroInfo[] = [{\n    name: '@',\n    fn: (state: SxParserState, name: string) => (list) => {\n        return quote(state, list);\n    },\n}, {\n    name: '$=if',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($=if cond expr)\n        //  -> S expr  : ($=__if cond 'expr)\n        return [\n            {symbol: '$=__if'},\n            list[1],\n            ...(list.slice(2).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$=for',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($=for list expr)\n        //  -> S expr  : ($=__for list 'expr)\n        return [\n            {symbol: '$=__for'},\n            list[1],\n            ...(list.slice(2).map(x => quote(state, x))),\n        ];\n    },\n}];\n\n\nexport default macros;\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxSymbolInfo } from '../../types';\n\n\n\nexport const symbols: SxSymbolInfo[] = [];\n\n\nexport default symbols;\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserConfig,\n         LsxConfig }        from '../../types';\nimport operators            from './jsx.operator';\nimport macros               from './jsx.macro';\nimport symbols              from './jsx.symbol';\n\nimport { $jsxStandardTag,\n         $jsxComponentTag } from './jsx.fn';\n\n\n\nexport default function install(config: SxParserConfig, lsxConf: LsxConfig): SxParserConfig {\n    config.funcs = (config.funcs || []).concat(operators);\n    config.macros = (config.macros || []).concat(macros);\n    config.symbols = (config.symbols || []).concat(symbols);\n\n    const components =\n        Object.entries(lsxConf.components)\n        .map(x => ({name: x[0], fn: $jsxComponentTag(x[1])}));\n\n    config.funcs = config.funcs.concat(\n        {name: config.reservedNames.Template, fn: $jsxComponentTag(lsxConf.jsxFlagment)},\n        ...components\n    );\n\n    config.funcSymbolResolverFallback = $jsxStandardTag;\n    config.jsx = lsxConf.jsx;\n    config.JsxFragment = lsxConf.jsxFlagment;\n\n    return config;\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserState }     from '../../types';\nimport { checkParamsLength } from '../../errors';\nimport { $__let,\n         $__set  }           from '../core/core.fn';\n\n\n\n// tslint:disable-next-line:variable-name\nexport const $__letAsync = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__let-async 'nameStrOrSymbol promise)\n    //  -> S expr  : promise\n    checkParamsLength('$__letAsync', args, 2, 2);\n\n    let promise: Promise<any> = args[1];\n    if (typeof promise !== 'object' || typeof promise.then !== 'function') {\n        promise = Promise.resolve(promise);\n    }\n    promise = promise.then(v => {\n        try {\n            $__let(state, '')(args[0], v);\n            return v;\n        } catch (e) {\n            return Promise.reject(e);\n        }\n    });\n    return promise;\n};\n// tslint:disable-next-line:variable-name\nexport const $$__letAsync = $__letAsync(null as any, null as any);\n\n\n// tslint:disable-next-line:variable-name\nexport const $__setAsync = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__set-async 'nameOrListOfNameOrIndex promise)\n    //  -> S expr  : promise\n    checkParamsLength('$__setAsync', args, 2, 2);\n\n    let promise: Promise<any> = args[1];\n    if (typeof promise !== 'object' || typeof promise.then !== 'function') {\n        promise = Promise.resolve(promise);\n    }\n    promise = promise.then(v => {\n        try {\n            $__set(state, '')(args[0], v);\n            return v;\n        } catch (e) {\n            return Promise.reject(e);\n        }\n    });\n    return promise;\n};\n// tslint:disable-next-line:variable-name\nexport const $$__setAsync = $__setAsync(null as any, null as any);\n\n\nexport const $then = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($then promise (lambda (val) ...) (lambda (err) ...))\n    //  -> S expr  : promise\n    checkParamsLength('$then', args, 2, 3);\n\n    let promise: Promise<any> = args[0];\n    if (typeof promise !== 'object' || typeof promise.then !== 'function') {\n        promise = Promise.resolve(promise);\n    }\n    if (typeof args[2] === 'function') {\n        promise = promise.then(args[1], args[2]);\n    } else {\n        if (typeof args[1] !== 'function') {\n            throw new Error(`[SX] $then: Invalid argument(s): args[1] is not function.`);\n        }\n        promise = promise.then(args[1]);\n    }\n    return promise;\n};\nexport const $$then = $then(null as any, null as any);\n\n\nexport const $resolveAll = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($resolve-all promise1 ... promiseN)\n    //  -> S expr  : promise\n    const promises: Array<Promise<any>> = args.slice(0);\n    for (let i = 0; i < promises.length; i++) {\n        if (typeof promises[i] !== 'object' || typeof (promises[i] as any).then !== 'function') {\n            promises[i] = Promise.resolve(promises[i]);\n        }\n    }\n    return Promise.all(promises);\n};\nexport const $$resolveAll = $resolveAll(null as any, null as any);\n\n\nexport const $resolveAny = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($resolve-any promise1 ... promiseN)\n    //  -> S expr  : promise\n    const promises: Array<Promise<any>> = args.slice(0);\n    for (let i = 0; i < promises.length; i++) {\n        if (typeof promises[i] !== 'object' || typeof (promises[i] as any).then !== 'function') {\n            promises[i] = Promise.resolve(promises[i]);\n        }\n    }\n\n    // https://stackoverflow.com/questions/39940152/get-first-fulfilled-promise\n    // firstOf: This will return the value of the first fulfilled promise,\n    //          or if all reject, an array of rejection reasons.\n    const invert  = (p: Promise<any>) => new Promise((res, rej) => p.then(rej, res));\n    const firstOf = (ps: Array<Promise<any>>) => invert(Promise.all(ps.map(invert)));\n\n    return firstOf(promises);\n};\nexport const $$resolveAny = $resolveAny(null as any, null as any);\n\n\nexport const $resolvePipe = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($resolve-pipe promise<val1> (lambda (val1) ... promiseOrVal2) (lambda (val2) ... promiseOrVal3) ... (lambda (valN-1) ... promiseOrValN))\n    //  -> S expr  : promise\n    // remarks: If the formal argument lambda is a non-lambda value, the value is then piped as is.\n    checkParamsLength('$resolvePipe', args, 1);\n\n    let promise: Promise<any> = args[0];\n    if (typeof promise !== 'object' || typeof promise.then !== 'function') {\n        promise = Promise.resolve(promise);\n    }\n    const lambdas = args.slice(1);\n    for (let i = 0; i < lambdas.length; i++) {\n        if (typeof lambdas[i] !== 'function') {\n            const v = lambdas[i];\n            lambdas[i] = () => v;\n        }\n    }\n    let p = promise;\n    for (const l of lambdas) {\n        p = p.then(l);\n    }\n    return p;\n};\nexport const $$resolvePipe = $resolvePipe(null as any, null as any);\n\n\nexport const $resolveFork = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($resolve-fork promise<val1> (lambda (val1) ... promiseOrVal2a) ... (lambda (val1) ... promiseOrVal2z))\n    //  -> S expr  : (promise<val2a> ... promise<val2z>)\n    // remarks: If the formal argument lambda is a non-lambda value, the value is then piped as is.\n    checkParamsLength('$resolveFork', args, 1);\n\n    let promise: Promise<any> = args[0];\n    if (typeof promise !== 'object' || typeof promise.then !== 'function') {\n        promise = Promise.resolve(promise);\n    }\n    const lambdas = args.slice(1);\n    for (let i = 0; i < lambdas.length; i++) {\n        if (typeof lambdas[i] !== 'function') {\n            const v = lambdas[i];\n            lambdas[i] = () => v;\n        }\n    }\n\n    const resolvers = new Array(lambdas.length);\n    const rejectors = new Array(lambdas.length);\n\n    const pa: Array<Promise<any>> = [];\n    for (let i = 0; i < lambdas.length; i++) {\n        pa.push(new Promise<any>((resolve: any, reject: any) => {\n            resolvers[i] = (v: any) => {\n                let lp: Promise<any> = lambdas[i](v);\n                if (typeof lp !== 'object' || typeof lp.then !== 'function') {\n                    lp = Promise.resolve(lp);\n                }\n\n                lp\n                .then(x => resolve(x))\n                .catch(e => reject(e));\n            };\n            rejectors[i] = reject;\n        }));\n    }\n\n    promise.then(\n        v => resolvers.forEach(f => f(v)),\n        e => rejectors.forEach(f => f(e))\n    );\n\n    return pa;\n};\nexport const $$resolveFork = $resolveFork(null as any, null as any);\n\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxFuncInfo } from '../../types';\nimport * as ops       from './concurrent.fn';\n\n\n\nexport const funcs: SxFuncInfo[] = [{\n    name: '$__let-async',\n    fn: ops.$__letAsync,\n}, {\n    name: '$__set-async',\n    fn: ops.$__setAsync,\n}, {\n    name: '$then',\n    fn: ops.$then,\n}, {\n    name: '$resolve-all',\n    fn: ops.$resolveAll,\n}, {\n    name: '$resolve-any',\n    fn: ops.$resolveAny,\n}, {\n    name: '$resolve-pipe',\n    fn: ops.$resolvePipe,\n}, {\n    name: '$resolve-fork',\n    fn: ops.$resolveFork,\n}];\n\n\nexport default funcs;\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxMacroInfo,\n         SxParserState }     from '../../types';\nimport { quote }             from '../../ast';\nimport { checkParamsLength } from '../../errors';\n\n\n\nexport const macros: SxMacroInfo[] = [{\n    name: '$let-async',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($let-async nameStrOrSymbol promise)\n        //  -> S expr  : ($__let-async 'nameStrOrSymbol promise)\n        checkParamsLength('$let-async', list, 3, 3);\n\n        return [{symbol: '$__let-async'},\n            quote(state, list[1]),\n            list[2],\n        ];\n    },\n}, {\n    name: '$set-async',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($set-async nameOrListOfNameOrIndex promise)\n        //  -> S expr  : ($__set-async 'nameOrListOfNameOrIndex promise)\n        checkParamsLength('$set-async', list, 3, 3);\n\n        return [{symbol: '$__set-async'},\n            quote(state, list[1]),\n            list[2],\n        ];\n    },\n}];\n\n\nexport default macros;\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxSymbolInfo } from '../../types';\n\n\n\nexport const symbols: SxSymbolInfo[] = [];\n\n\nexport default symbols;\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserConfig } from '../../types';\nimport operators          from './concurrent.operator';\nimport macros             from './concurrent.macro';\nimport symbols            from './concurrent.symbol';\n\n\n\nexport default function install(config: SxParserConfig): SxParserConfig {\n    config.funcs = (config.funcs || []).concat(operators);\n    config.macros = (config.macros || []).concat(macros);\n    config.symbols = (config.symbols || []).concat(symbols);\n    return config;\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxMacroInfo,\n         SxFuncInfo,\n         SxSymbolInfo,\n         SxReservedNames,\n         SxParserConfig,\n         SxParserState,\n         SxToken,\n         LsxConfig,\n         SExpressionTemplateFn,\n         SExpressionAsyncTemplateFn } from './types';\nimport { parse }            from './parser';\nimport { evaluate }         from './evaluate';\nimport installCore          from './operators/core';\nimport installArithmetic    from './operators/arithmetic';\nimport installSequence      from './operators/sequence';\nimport installJsx           from './operators/jsx';\nimport installConcurrent    from './operators/concurrent';\n\n\n\nexport const defaultReservedNames: SxReservedNames = {\n    eval: '$eval',\n    quote: '$quote',\n    backquote: '$backquote',\n    unquote: '$unquote',\n    spread: '$spread',\n    splice: '$splice',\n\n    car: '$car',\n    cdr: '$cdr',\n    cons: '$cons',\n    atom: '$atom',\n    eq: '$eq',\n    list: '$list',\n\n    let: '$clisp-let',\n    lambda: '$lambda',\n    self: '$self',\n    defun: '$defun',\n    thiz: '$this',\n\n    if: '$if',\n    cond: '$cond',\n\n    while: '$while',\n    doWhile: '$do-while',\n    until: '$until',\n    doUntil: '$do-until',\n\n    get: '$get',\n    defvar: '$clisp-defvar',\n    setq: '$clisp-setq',\n    set: '$set',\n    call: '$call',\n\n    not: '$not',\n    and: '$and',\n    or: '$or',\n\n    isSymbol: '$is-symbol',\n    gensym: '$gensym',\n    raise: '$raise',\n    catch: '$catch',\n\n    Template: 'Template',\n};\n\nexport const defaultConfig: SxParserConfig = {\n    raiseOnUnresolvedSymbol: false,\n    enableEvaluate: true,\n    enableHereDoc: true,\n    enableSpread: true,\n    enableSplice: true,\n    enableShorthands: true,\n    enableVerbatimStringLiteral: true,\n    enableTailCallOptimization: true,\n    stripComments: false,\n    wrapExternalValue: true,\n    returnMultipleRoot: false,\n    maxEvalCount: 0,\n\n    reservedNames: defaultReservedNames,\n    symbols: [],\n    macros: [],\n    funcs: [],\n};\n\n\n\nfunction initState(config: SxParserConfig, globals: any, strings: TemplateStringsArray | string, values?: any[]): SxParserState {\n    return {\n        strings: typeof strings === 'string' ? [strings] : strings,\n        values: values || [],\n\n        index: 0,\n        pos: 0,\n        line: 0,\n\n        evalCount: 0,\n\n        scopes: [{isBlockLocal: false, scope: globals}],\n\n        macroMap: new Map<string, SxMacroInfo>(config.macros.map(x => [x.name, x] as [string, SxMacroInfo])),\n        funcMap: new Map<string, SxFuncInfo>(config.funcs.map(x => [x.name, x] as [string, SxFuncInfo])),\n        symbolMap: new Map<string, SxSymbolInfo>(config.symbols.map(x => [x.name, x] as [string, SxSymbolInfo])),\n\n        config,\n    };\n}\n\n\nfunction resetState(state: SxParserState, strings: TemplateStringsArray | string, values?: any[]) {\n    state.strings = typeof strings === 'string' ? [strings] : strings;\n    state.values = values || [];\n    state.index = 0;\n    state.pos = 0;\n    state.line = 0;\n    state.evalCount = 0;\n    return state;\n}\n\n\n\n\nexport function SExpression(conf?: SxParserConfig): SExpressionTemplateFn {\n    let config = conf || Object.assign({}, defaultConfig);\n    let globalScope: any = {};\n    let startup: SxToken[] = [];\n\n    const exec = (state: SxParserState, s: SxToken[]) => {\n        if (config.enableEvaluate) {\n            for (let i = 0; i < s.length; i++) {\n                s[i] = evaluate(state, s[i]);\n            }\n        }\n\n        if (config.returnMultipleRoot) {\n            return s.length === 1 ? s[0] : s;\n        } else {\n            return s[s.length - 1];\n        }\n    };\n\n    const f: SExpressionTemplateFn = ((strings: TemplateStringsArray | string, ...values: any[]) => {\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\n        return exec(state, startup.concat(parse(state)));\n    }) as any;\n\n    f.evaluateAST = (ast: SxToken[]) => {\n        const state = initState(config, Object.assign({}, globalScope), '');\n        return exec(state, startup.concat(ast));\n    };\n    (f as any).repl = () => {\n        const state = initState(config, Object.assign({}, globalScope), '');\n        exec(state, startup.slice(0));\n        const fRepl: SExpressionTemplateFn = ((strings: TemplateStringsArray | string, ...values: any[]) => {\n            resetState(state, strings, values);\n            return exec(state, parse(state));\n        }) as any;\n        (fRepl as any).sync = fRepl;\n        return fRepl;\n    };\n    f.setGlobals = (globals: object) => {\n        globalScope = Object.assign({}, globals || {});\n        return f;\n    };\n    f.appendGlobals = (globals: object) => {\n        globalScope = Object.assign({}, globalScope, globals || {});\n        return f;\n    };\n    f.setStartup = (strings: TemplateStringsArray | string, ...values: any[]) => {\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\n        startup = parse(state);\n        return f;\n    };\n    f.setStartupAST = (ast: SxToken[]) => {\n        startup = ast;\n        return f;\n    };\n    f.appendStartup = (strings: TemplateStringsArray | string, ...values: any[]) => {\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\n        startup = startup.concat(parse(state));\n        return f;\n    };\n    f.appendStartupAST = (ast: SxToken[]) => {\n        startup = startup.concat(ast);\n        return f;\n    };\n    f.install = (installer) => {\n        config = installer(config);\n        return f;\n    };\n\n    return f;\n}\n\n\nexport function SExpressionAsync(conf?: SxParserConfig): SExpressionAsyncTemplateFn {\n    let config = conf || Object.assign({}, defaultConfig);\n    let globalScope: any = {};\n    let startup: SxToken[] = [];\n\n    const exec = async (state: SxParserState, s: SxToken[]) => {\n        if (config.enableEvaluate) {\n            for (let i = 0; i < s.length; i++) {\n                s[i] = evaluate(state, s[i]);\n\n                if (typeof s[i] === 'object' && s[i] !== null && typeof (s[i] as any).then === 'function') {\n                    s[i] = await s[i];\n                }\n            }\n        }\n\n        if (config.returnMultipleRoot) {\n            return s.length === 1 ? s[0] : s;\n        } else {\n            return s[s.length - 1];\n        }\n    };\n\n    const f: SExpressionAsyncTemplateFn = (async (strings: TemplateStringsArray | string, ...values: any[]) => {\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\n        return exec(state, startup.concat(parse(state)));\n    }) as any;\n\n    f.evaluateAST = (ast: SxToken[]) => {\n        const state = initState(config, Object.assign({}, globalScope), '');\n        return exec(state, startup.concat(ast));\n    };\n    (f as any).repl = () => {\n        const execSync = (stat: SxParserState, s: SxToken[]) => {\n            if (config.enableEvaluate) {\n                for (let i = 0; i < s.length; i++) {\n                    s[i] = evaluate(stat, s[i]);\n                }\n            }\n\n            if (config.returnMultipleRoot) {\n                return s.length === 1 ? s[0] : s;\n            } else {\n                return s[s.length - 1];\n            }\n        };\n        const state = initState(config, Object.assign({}, globalScope), '');\n        exec(state, startup.slice(0));\n        const fRepl: SExpressionAsyncTemplateFn = (async (strings: TemplateStringsArray | string, ...values: any[]) => {\n            resetState(state, strings, values);\n            return exec(state, parse(state));\n        }) as any;\n        const fReplSync: SExpressionTemplateFn = ((strings: TemplateStringsArray | string, ...values: any[]) => {\n            resetState(state, strings, values);\n            return execSync(state, parse(state));\n        }) as any;\n        (fRepl as any).sync = fReplSync;\n        return fRepl;\n    };\n    f.setGlobals = (globals: object) => {\n        globalScope = Object.assign({}, globals || {});\n        return f;\n    };\n    f.appendGlobals = (globals: object) => {\n        globalScope = Object.assign({}, globalScope, globals || {});\n        return f;\n    };\n    f.setStartup = (strings: TemplateStringsArray | string, ...values: any[]) => {\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\n        startup = parse(state);\n        return f;\n    };\n    f.setStartupAST = (ast: SxToken[]) => {\n        startup = ast;\n        return f;\n    };\n    f.appendStartup = (strings: TemplateStringsArray | string, ...values: any[]) => {\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\n        startup = startup.concat(parse(state));\n        return f;\n    };\n    f.appendStartupAST = (ast: SxToken[]) => {\n        startup = startup.concat(ast);\n        return f;\n    };\n    f.install = (installer) => {\n        config = installer(config);\n        return f;\n    };\n\n    return f;\n}\n\n\n\nexport const S = (() => {\n    const config: SxParserConfig = Object.assign({}, defaultConfig);\n\n    config.enableEvaluate = false;\n    config.returnMultipleRoot = true;\n\n    return SExpression(config);\n})();\n\n\n\nexport const L = (() => {\n    let config: SxParserConfig = Object.assign({}, defaultConfig);\n    config.reservedNames = Object.assign({}, config.reservedNames, {\n        Template: '$concat',\n    });\n\n    config = installCore(config);\n    config = installArithmetic(config);\n    config = installSequence(config);\n    config = installConcurrent(config);\n\n    config.stripComments = true;\n\n    return SExpression(config);\n})();\n\nexport const LS = L;\nexport const lisp = L;\n\n\n\n// tslint:disable-next-line:variable-name\nexport const L_async = (() => {\n    let config: SxParserConfig = Object.assign({}, defaultConfig);\n    config.reservedNames = Object.assign({}, config.reservedNames, {\n        Template: '$concat',\n    });\n\n    config = installCore(config);\n    config = installArithmetic(config);\n    config = installSequence(config);\n    config = installConcurrent(config);\n\n    config.stripComments = true;\n\n    return SExpressionAsync(config);\n})();\n\n// tslint:disable-next-line:variable-name\nexport const LS_async = L_async;\n// tslint:disable-next-line:variable-name\nexport const lisp_async = L_async;\n\n\n\nexport const LM = (() => {\n    let config: SxParserConfig = Object.assign({}, defaultConfig);\n    config.reservedNames = Object.assign({}, config.reservedNames, {\n        Template: '$concat',\n    });\n\n    config = installCore(config);\n    config = installArithmetic(config);\n    config = installSequence(config);\n    config = installConcurrent(config);\n\n    config.stripComments = true;\n    config.returnMultipleRoot = true;\n\n    return SExpression(config);\n})();\n\n\n\n// tslint:disable-next-line:variable-name\nexport const LM_async = (() => {\n    let config: SxParserConfig = Object.assign({}, defaultConfig);\n    config.reservedNames = Object.assign({}, config.reservedNames, {\n        Template: '$concat',\n    });\n\n    config = installCore(config);\n    config = installArithmetic(config);\n    config = installSequence(config);\n    config = installConcurrent(config);\n\n    config.stripComments = true;\n    config.returnMultipleRoot = true;\n\n    return SExpressionAsync(config);\n})();\n\n\n\nexport function LSX<R = SxToken>(lsxConf: LsxConfig): SExpressionTemplateFn<R> {\n    let config: SxParserConfig = Object.assign({}, defaultConfig);\n\n    config = installCore(config);\n    config = installArithmetic(config);\n    config = installSequence(config);\n    config = installConcurrent(config);\n    config = installJsx(config, lsxConf);\n\n    config.stripComments = true;\n\n    return SExpression(config) as any;\n}\n\n\n\nexport function LSX_async<R = SxToken>(lsxConf: LsxConfig): SExpressionAsyncTemplateFn<R> {\n    let config: SxParserConfig = Object.assign({}, defaultConfig);\n\n    config = installCore(config);\n    config = installArithmetic(config);\n    config = installSequence(config);\n    config = installConcurrent(config);\n    config = installJsx(config, lsxConf);\n\n    config.stripComments = true;\n\n    return SExpressionAsync(config) as any;\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SExpressionTemplateFn,\n         SExpressionAsyncTemplateFn } from './types';\n\n\n\nexport function runScriptTags(lisp: SExpressionTemplateFn | SExpressionAsyncTemplateFn, globals?: object, contentType = 'text/lisp') {\n    const codes = document.querySelectorAll(`script[type=\"${contentType}\"]`);\n    const cs = [];\n    for (let i = 0; i < codes.length; i++) {\n        cs.push(codes[i].innerHTML);\n    }\n    lisp = lisp.appendGlobals(globals || {});\n    return lisp(cs.join('\\n'));\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nexport * from './s-exp/s-expression';\nexport * from './s-exp/browser';\n\n\nexport { default as installCore }         from './s-exp/operators/core';\nexport { default as installArithmetic }   from './s-exp/operators/arithmetic';\nexport { default as installSequence }     from './s-exp/operators/sequence';\nexport { default as installJsx }          from './s-exp/operators/jsx';\nexport { default as installConcurrent }   from './s-exp/operators/concurrent';\n\n\nimport { default as coreOperators }       from './s-exp/operators/core/core.operator';\nimport { default as coreMacros }          from './s-exp/operators/core/core.macro';\nimport { default as coreSymbols }         from './s-exp/operators/core/core.symbol';\n\nimport { default as arithmeticOperators } from './s-exp/operators/arithmetic/arithmetic.operator';\nimport { default as arithmeticMacros }    from './s-exp/operators/arithmetic/arithmetic.macro';\nimport { default as arithmeticSymbols }   from './s-exp/operators/arithmetic/arithmetic.symbol';\n\nimport { default as sequenceOperators }   from './s-exp/operators/sequence/sequence.operator';\nimport { default as sequenceMacros }      from './s-exp/operators/sequence/sequence.macro';\nimport { default as sequenceSymbols }     from './s-exp/operators/sequence/sequence.symbol';\n\nimport { default as jsxOperators }        from './s-exp/operators/jsx/jsx.operator';\nimport { default as jsxMacros }           from './s-exp/operators/jsx/jsx.macro';\nimport { default as jsxSymbols }          from './s-exp/operators/jsx/jsx.symbol';\n\nimport { default as concurrentOperators } from './s-exp/operators/concurrent/concurrent.operator';\nimport { default as concurrentMacros }    from './s-exp/operators/concurrent/concurrent.macro';\nimport { default as concurrentSymbols }   from './s-exp/operators/concurrent/concurrent.symbol';\n\n\nexport const builtinOperators = {\n    core: coreOperators,\n    arithmetic: arithmeticOperators,\n    sequence: sequenceOperators,\n    jsx: jsxOperators,\n    concurrent: concurrentOperators,\n};\n\nexport const builtinMacros = {\n    core: coreMacros,\n    arithmetic: arithmeticMacros,\n    sequence: sequenceMacros,\n    jsx: jsxMacros,\n    concurrent: concurrentMacros,\n};\n\nexport const builtinSymbols = {\n    core: coreSymbols,\n    arithmetic: arithmeticSymbols,\n    sequence: sequenceSymbols,\n    jsx: jsxSymbols,\n    concurrent: concurrentSymbols,\n};\n"],"sourceRoot":""}
{"version":3,"sources":["webpack://liyad/webpack/universalModuleDefinition","webpack://liyad/./src/s-exp/defaults.ts","webpack://liyad/./src/s-exp/parser.ts","webpack://liyad/./src/s-exp/interpreters/index.ts","webpack://liyad/./src/s-exp/interpreters/presets/s-exp.ts","webpack://liyad/./src/s-exp/operators/core/core.fn.ts","webpack://liyad/./src/s-exp/operators/core/core.operator.ts","webpack://liyad/./src/s-exp/operators/core/core.macro.ts","webpack://liyad/./src/s-exp/operators/core/core.symbol.ts","webpack://liyad/./src/s-exp/operators/core/index.ts","webpack://liyad/./src/s-exp/operators/arithmetic/arithmetic.fn.ts","webpack://liyad/./src/s-exp/operators/arithmetic/arithmetic.operator.ts","webpack://liyad/./src/s-exp/operators/arithmetic/arithmetic.macro.ts","webpack://liyad/./src/s-exp/operators/arithmetic/arithmetic.symbol.ts","webpack://liyad/./src/s-exp/operators/arithmetic/index.ts","webpack://liyad/./src/lib/data.ts","webpack://liyad/./src/s-exp/operators/sequence/sequence.fn.ts","webpack://liyad/./src/s-exp/operators/sequence/sequence.operator.ts","webpack://liyad/./src/s-exp/operators/sequence/sequence.macro.ts","webpack://liyad/./src/s-exp/operators/sequence/sequence.symbol.ts","webpack://liyad/./src/s-exp/operators/sequence/index.ts","webpack://liyad/./src/s-exp/operators/concurrent/concurrent.fn.ts","webpack://liyad/./src/s-exp/operators/concurrent/concurrent.operator.ts","webpack://liyad/./src/s-exp/operators/concurrent/concurrent.macro.ts","webpack://liyad/./src/s-exp/operators/concurrent/concurrent.symbol.ts","webpack://liyad/./src/s-exp/operators/concurrent/index.ts","webpack://liyad/./src/s-exp/interpreters/presets/lisp.ts","webpack://liyad/./src/s-exp/operators/jsx/jsx.fn.ts","webpack://liyad/./src/s-exp/operators/jsx/jsx.operator.ts","webpack://liyad/./src/s-exp/operators/jsx/jsx.macro.ts","webpack://liyad/./src/s-exp/operators/jsx/jsx.symbol.ts","webpack://liyad/./src/s-exp/operators/jsx/index.ts","webpack://liyad/./src/s-exp/interpreters/presets/lsx.ts","webpack://liyad/./src/s-exp/browser.ts","webpack://liyad/./src/index.ts","webpack://liyad/./src/s-exp/ast.ts","webpack://liyad/./src/s-exp/compile.ops/helpers.ts","webpack://liyad/./src/s-exp/compile.ops/index.ts","webpack://liyad/./src/s-exp/compile.ts","webpack://liyad/./src/s-exp/errors.ts","webpack://liyad/./src/s-exp/evaluate.ts","webpack://liyad/./src/s-exp/global-this.ts","webpack://liyad/./src/s-exp/types.ts","webpack://liyad/webpack/bootstrap","webpack://liyad/webpack/startup","webpack://liyad/webpack/runtime/define property getters","webpack://liyad/webpack/runtime/hasOwnProperty shorthand","webpack://liyad/webpack/runtime/make namespace object"],"names":["root","factory","exports","module","define","amd","this","defaultReservedNames","eval","quote","backquote","unquote","spread","splice","car","cdr","cons","atom","eq","list","let","lambda","self","defun","thiz","if","cond","while","doWhile","until","doUntil","get","defvar","setq","set","call","not","and","or","isSymbol","gensym","raise","catch","Template","defaultConfig","raiseOnUnresolvedSymbol","enableEvaluate","enableHereDoc","enableSpread","enableSplice","enableShorthands","enableVerbatimStringLiteral","enableTailCallOptimization","enableRegExpMatchOperators","enableCompilationOperators","stripComments","wrapExternalValue","returnMultipleRoot","maxEvalCount","reservedNames","symbols","macros","funcs","isEOF","ch","Object","prototype","hasOwnProperty","isSpace","trim","length","isNumberFirstChar","test","isNumberAfterSignChar","isSymbolFirstChar","lookCurrentLineHint","state","line","index","pos","strings","slice","getChar","virtualEof","disableEscape","eof","values","value","v","split","eofSeq","Error","ch1","i","ch2","String","fromCodePoint","Number","parseInt","lookAheads","n","chs","push","lookAhead","skipWhitespaces","parseNumber","s","parseSymbol","config","m","match","ws","symbol","parseStringOrComment","valuesStartSeq","valuesStopChar","allowPhysicalEof","eofSeqs","parseList","parseString","parseHereDoc","attrs","q","inner","parseSingleLineComment","comment","parseMultiLineComment","parseOneToken","ahead","isSpliceUnquote","ret","aheads","dotted","isHereDoc","sym","ahs","a","Array","isArray","listStopChar","initialList","r","t","unshift","pop","parse","initState","globals","evalCount","scopes","isBlockLocal","scope","macroMap","Map","map","x","name","funcMap","symbolMap","resetState","SExpression","conf","assign","globalScope","startup","exec","evaluate","f","concat","evaluateAST","ast","repl","fRepl","sync","setGlobals","appendGlobals","setStartup","setStartupAST","appendStartup","appendStartupAST","install","installer","SExpressionAsync","then","stat","execSync","S","$car","args","$$first","$cdr","$cons","$$firstAndSecond","$first","$$second","$last","$atom","$eq","$notEq","$list","$__scope","capturedScopes","returnMultiple","kv","kvSym","kvName","xSym","xName","$__lambda","formalArgs","lastIsSpread","fa","fnBody","fn","actualArgs","$comp$__lambda","compile","$apply","p","apply","$raise","$pipe","$__let","$__set","path","subst","inprog","last","$boolean","Boolean","$$boolean","$not","$$not","$__and","prev","curr","$__or","$ambiguousEq","$$ambiguousEq","$ambiguousNotEq","$lt","$le","$gt","$ge","$typeof","tyName","$symbol","$isSymbol","$isNull","$isNil","$isUndefined","$isList","$isString","$isNumber","$isNaN","isNaN","$isFinite","isFinite","$isInteger","isInteger","$toString","$toNumber","assignBlacklist","__proto__","Function","$objectAssign","includes","$jsonStringify","JSON","stringify","$jsonParse","$now","Date","now","$datetimeFromIso","dt","getTime","$datetime","year","padStart","$datetimeLc","$datetimeToIsoString","toISOString","$datetimeToComponents","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","getUTCDay","$datetimeToComponentsLc","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","getTimezoneOffset","getDay","$match","RegExp","$consoleLog","console","log","$consoleError","error","$consoleTrace","trace","$consoleTime","time","$consoleTimeEnd","timeEnd","$consoleTimeLog","timeLog","operators","st","nm","info","fArgs","aArgs","has","next","e","c","tempVarSym","keyName","compilationOperators","compilationMacros","POSITIVE_INFINITY","NEGATIVE_INFINITY","EPSILON","MAX_VALUE","MIN_VALUE","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","NaN","$bitLShift","$bitSRShift","$bitURShift","$bitNot","$bitAnd","reduce","$bitOr","$bitXor","$add","$sub","$mul","$sup","$div","$mod","$max","Math","max","$min","min","$avg","$floor","floor","$ceil","ceil","$round","round","$abs","abs","$sign","sign","Query","data","condition","y","desc","sort","start","groupBy","b","array","w","first","intermediate","single","filter","query","$length","$trim","$trimHead","trimLeft","$trimTail","trimRight","$replaceAll","join","$split","$join","$concat","$slice","$top","$tail","$push","$pop","$__at","$reverse","reverse","$reverseDestructive","$find","find","$filter","$map","$reduce","$reduceFromTail","reduceRight","$sort","$sortDestructive","$groupEvery","groupEvery","select","$groupBy","$orderBy","orderBy","$where","where","stop","step","from","$__letAsync","promise","Promise","resolve","reject","$__setAsync","$then","$resolveAll","promises","all","$resolveAny","invert","res","rej","ps","$resolvePipe","lambdas","l","$resolveFork","resolvers","rejectors","pa","lp","forEach","L","LS","lisp","L_async","LS_async","lisp_async","LM","LM_async","getJsxTagsParams","children","props","styles","styleName","matched","classes","z","cs","fragment","__html","__text","$jsxProps","$jsxStandardTag","jsx","$jsxComponentTag","component","lsxConf","components","entries","jsxFlagment","funcSymbolResolverFallback","JsxFragment","LSX","LSX_async","runScriptTags","contentType","codes","document","querySelectorAll","innerHTML","builtinOperators","core","arithmetic","sequence","concurrent","builtinMacros","builtinSymbols","isQuoted","isBackquoted","wrapByUnquote","isUnquoted","applyMacros","tok","stripQuote","stripQuoteOrPass","getScope_stateApplied","resolveValueSymbol_dynamic","varName","checkUnsafeVarNames_dynamic","registerOperators","ctx","_$_vars","ops","makeScope","compileToken","compFnBody","varsCount","varNamesCount","varNames","varDefs","quoted","vName","idx","arr","symName","checkNameCalled","checkNamePos","str","w1","w0","hasSpread","compileCore","compileValue","body","scoped","varNamesCopy","compFormalArgs","compFnBodyRoot","evalCompiledLambda","_$_state","code","compileLambda","setEvaluationCount","checkParamsLength","checkUnsafeVarNames","checkUnsafeVarNamesEx","target","con","toNumber","resolveUnquote","resolveSplice","resolveMacro","macroInfo","lastErr","r1","matchResult","matchMacroArgs","resolveValueSymbolScope","nullIfNotDefined","localScope","getGlobalScope","getScope","resolveValueSymbol","symInfo","valueSymbolResolverFallback","collectCapturedVariables","names","getCapturedScopes","installScope","uninstallScope","macroName","startsWith","endsWith","tpos","lastIndexOf","tname","optimizeTailCall","front","tail","varBaseName","tempVarsSyms","sprs","funcInfo","resolveFunctionSymbol","dummyTargetObject","g","globalObj","o","objConstructor","funConstructor","window","global","globalThis","constructor","toString","FatalError","message","super","MaxEvaluationCountError","ScriptTerminationError","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","d","definition","key","defineProperty","enumerable","obj","prop","Symbol","toStringTag"],"mappings":"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","file":"liyad.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"liyad\"] = factory();\n\telse\n\t\troot[\"liyad\"] = factory();\n})(this, function() {\nreturn ","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxReservedNames,\n         SxParserConfig } from './types';\n\n\n\nexport const defaultReservedNames: SxReservedNames = {\n    eval: '$eval',\n    quote: '$quote',\n    backquote: '$backquote',\n    unquote: '$unquote',\n    spread: '$spread',\n    splice: '$splice',\n\n    car: '$car',\n    cdr: '$cdr',\n    cons: '$cons',\n    atom: '$atom',\n    eq: '$eq',\n    list: '$list',\n\n    let: '$clisp-let',\n    lambda: '$lambda',\n    self: '$self',\n    defun: '$defun',\n    thiz: '$this',\n\n    if: '$if',\n    cond: '$cond',\n\n    while: '$while',\n    doWhile: '$do-while',\n    until: '$until',\n    doUntil: '$do-until',\n\n    get: '$get',\n    defvar: '$clisp-defvar',\n    setq: '$clisp-setq',\n    set: '$set',\n    call: '$call',\n\n    not: '$not',\n    and: '$and',\n    or: '$or',\n\n    isSymbol: '$is-symbol',\n    gensym: '$gensym',\n    raise: '$raise',\n    catch: '$catch',\n\n    Template: 'Template',\n};\n\nexport const defaultConfig: SxParserConfig = {\n    raiseOnUnresolvedSymbol: false,\n    enableEvaluate: true,\n    enableHereDoc: true,\n    enableSpread: true,\n    enableSplice: true,\n    enableShorthands: true,\n    enableVerbatimStringLiteral: true,\n    enableTailCallOptimization: true,\n    enableRegExpMatchOperators: true,\n    enableCompilationOperators: true,\n    stripComments: false,\n    wrapExternalValue: true,\n    returnMultipleRoot: false,\n    maxEvalCount: 0,\n\n    reservedNames: defaultReservedNames,\n    symbols: [],\n    macros: [],\n    funcs: [],\n};\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserState,\n         SxEof,\n         SxExternalValue,\n         SxSymbol,\n         SxDottedFragment,\n         SxComment,\n         SxToken,\n         SxChar,\n         ScriptTerminationError } from './types';\nimport { quote,\n         backquote,\n         wrapByUnquote,\n         spread,\n         splice }                 from './ast';\n\n\n\nfunction isEOF(ch: SxChar): boolean {\n    return typeof ch === 'object' && Object.prototype.hasOwnProperty.call(ch, 'eof');\n}\n\n\nfunction isSpace(ch: SxChar): boolean {\n    return typeof ch === 'string' && ch.trim().length === 0;\n}\n\n\nfunction isNumberFirstChar(ch: SxChar): boolean {\n    return typeof ch === 'string' && /^[0-9\\+\\-]$/.test(ch);\n}\n\n\nfunction isNumberAfterSignChar(ch: SxChar): boolean {\n    return typeof ch === 'string' && /^[0-9]$/.test(ch);\n}\n\n\nfunction isSymbolFirstChar(ch: SxChar): boolean {\n    return typeof ch === 'string' &&\n        !isSpace(ch) &&\n        !isNumberFirstChar(ch);\n}\n\n\n\nfunction lookCurrentLineHint(state: SxParserState): string {\n    return `line: ${state.line} / strings: ${state.index} / pos: ${state.pos} :${\n        state.strings.length > state.index ?\n            state.strings[state.index].slice(state.pos, state.pos + 20) : ''}`;\n}\n\n\nfunction getChar(state: SxParserState, virtualEof?: string[], disableEscape?: boolean): SxChar {\n    if (state.strings.length <= state.index) {\n        return {eof: true};\n    }\n    if (state.strings[state.index].length <= state.pos) {\n        if ((! state.values) || (state.values.length <= state.index)) {\n            state.pos = 0;\n            state.index++;\n            return getChar(state);\n        } else {\n            const ch = {value: state.values[state.index]};\n            state.pos = 0;\n            state.index++;\n            return ch;\n        }\n    }\n    if (virtualEof) {\n        for (const v of virtualEof) {\n            const ch = state.strings[state.index].slice(state.pos, state.pos + v.length);\n            if (ch === v) {\n                state.pos += v.length;\n                state.line += ch.split('\\n').length - 1;\n                return { eof: false , eofSeq: v };\n            }\n        }\n    }\n    {\n        let ch = state.strings[state.index].slice(state.pos, state.pos + 1);\n        state.pos++;\n\n        if (ch === '\\n') {\n            state.line++;\n        }\n\n        if ((! disableEscape) && ch === '\\\\') {\n            if (state.strings[state.index].length <= state.pos) {\n                throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\n            }\n            ch = state.strings[state.index].slice(state.pos, state.pos + 1);\n            state.pos++;\n\n            switch (ch) {\n            case 'b':\n                ch = '\\b';\n                break;\n            case 't':\n                ch = '\\t';\n                break;\n            case 'n':\n                ch = '\\n';\n                break;\n            case 'v':\n                ch = '\\v';\n                break;\n            case 'f':\n                ch = '\\f';\n                break;\n            case 'r':\n                ch = '\\r';\n                break;\n            case 'U': case 'u':\n                {\n                    if (state.strings[state.index].slice(state.pos, state.pos + 1) === '{') {\n                        let ch1 = '';\n                        for (let i = 0; i < 6; i++) {\n                            const ch2 = state.strings[state.index].slice(state.pos + i, state.pos + 1 + i);\n                            if (ch2 === '}') {\n                                if (i === 0) {\n                                    throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\n                                }\n                                state.pos += i;\n                                break;\n                            } else if (! /^[0-9A-Fa-f]{1}$/.test(ch1)) {\n                                throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\n                            }\n                            ch1 += ch2;\n                        }\n                        if (state.strings[state.index].slice(state.pos, state.pos + 1) !== '}') {\n                            throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\n                        }\n                        state.pos++;\n                        ch = String.fromCodePoint(Number.parseInt(ch1, 16));\n                    } else {\n                        const ch1 = state.strings[state.index].slice(state.pos, state.pos + 4);\n                        if (! /^[0-9A-Fa-f]{4}$/.test(ch1)) {\n                            throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\n                        }\n                        state.pos += 4;\n                        ch = String.fromCodePoint(Number.parseInt(ch1, 16));\n                    }\n                }\n                break;\n            }\n        }\n        return ch;\n    }\n}\n\n\nfunction lookAheads(state: SxParserState, n: number, virtualEof?: string[], disableEscape?: boolean): SxChar[] {\n    const index = state.index;\n    const pos = state.pos;\n    const line = state.line;\n    const chs: SxChar[] = [];\n\n    try {\n        for (let i = 0; i < n; i++) {\n            chs.push(getChar(state, virtualEof, disableEscape));\n        }\n    } finally {\n        state.index = index;\n        state.pos = pos;\n        state.line = line;\n    }\n\n    return chs;\n}\n\n\nfunction lookAhead(state: SxParserState, virtualEof?: string[], disableEscape?: boolean): SxChar {\n    const index = state.index;\n    const pos = state.pos;\n    const line = state.line;\n    let ch: SxChar;\n\n    try {\n        ch = getChar(state, virtualEof, disableEscape);\n    } finally {\n        state.index = index;\n        state.pos = pos;\n        state.line = line;\n    }\n\n    return ch;\n}\n\n\nfunction skipWhitespaces(state: SxParserState): void {\n    let ch = lookAhead(state);\n    while (!isEOF(ch) && isSpace(ch)) {\n        getChar(state);\n        ch = lookAhead(state);\n    }\n}\n\n\n\nfunction parseNumber(state: SxParserState, virtualEof?: string[]): number {\n    let s = '';\n    let ch = lookAhead(state, virtualEof);\n\n    while (! isEOF(ch)) {\n        if (typeof ch === 'string') {\n            if (/^0[XxOoBb][0-9]*$/.test(s + ch)) {\n                getChar(state, virtualEof);\n                s += ch;\n            } else if (/^[0-9\\+\\-\\.EeInfinityNaN]+$/.test(s + ch)) {\n                getChar(state, virtualEof);\n                s += ch;\n            } else {\n                break;\n            }\n        } else {\n            break;\n        }\n\n        ch = lookAhead(state, virtualEof);\n    }\n\n    if (! /^([\\+\\-]?\\d*\\.?\\d+(?:[Ee][\\+\\-]?\\d+)?)|(0[XxOoBb][0-9]+)|([\\+\\-]Infinity)|(NaN)$/.test(s)) {\n        throw new Error(`[SX] parseNumber: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\n    }\n    return Number(s);\n}\n\n\nfunction parseSymbol(state: SxParserState, virtualEof?: string[]): SxSymbol | number | null {\n    let s = '';\n    let ch = lookAhead(state, virtualEof);\n\n    while (! isEOF(ch)) {\n        if (typeof ch === 'string') {\n            if (isSpace(ch)) {\n                break;\n            } else if (ch === '#' && lookAheads(state, 2, virtualEof)[1] === '|') {\n                break;\n            } else if (/^[^.;()\"]+$/.test(s + ch)) {\n                getChar(state, virtualEof);\n                s += ch;\n            } else {\n                break;\n            }\n        } else {\n            if (typeof ch === 'object' && Object.prototype.hasOwnProperty.call(ch, 'value')) {\n                getChar(state, virtualEof);\n                const v = (ch as SxExternalValue).value;\n                s += String(ch);\n            } else {\n                throw new Error(`[SX] parseSymbol: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\n            }\n        }\n\n        ch = lookAhead(state, virtualEof);\n    }\n\n    if (state.config.enableShorthands) {\n        let m: RegExpMatchArray | null = null;\n        // tslint:disable-next-line:no-conditional-assignment\n        if (m = s.match(/^:((?:\\:[^=:]+?)+?)=$/)) {\n            // ::foo:bar:baz= -> ($splice ($set (foo bar baz)))\n            const ws = m[1].slice(1).split(':');\n            const z =\n                [{symbol: state.config.reservedNames.splice},\n                    [{symbol: state.config.reservedNames.set},\n                        ws\n                    ]\n                ];\n            return z as any;\n        }\n        // tslint:disable-next-line:no-conditional-assignment\n        else if (m = s.match(/^:((?:\\:[^@:]+?)+?)@([^@:]+?)$/)) {\n            // ::foo:bar@baz -> ($splice ($call ($get foo bar) baz))\n            const ws = m[1].slice(1).split(':');\n            const z =\n                [{symbol: state.config.reservedNames.splice},\n                    [{symbol: state.config.reservedNames.call},\n                        [{symbol: state.config.reservedNames.get}, ...ws],\n                        {symbol: m[2]},\n                    ]\n                ];\n            return z as any;\n        }\n        // tslint:disable-next-line:no-conditional-assignment\n        else if (m = s.match(/^:((?:\\:[^:]+?)+?)$/)) {\n            // ::foo:bar:baz -> ($get foo bar baz)\n            const ws = m[1].slice(1).split(':');\n            const z = [{symbol: state.config.reservedNames.get}, ...ws];\n            return z as any;\n        }\n    }\n\n    return {symbol: s};\n}\n\n\nfunction parseStringOrComment(\n        state: SxParserState, eof: string[],\n        valuesStartSeq: string | null,\n        valuesStopChar: string,\n        disableEscape: boolean,\n        allowPhysicalEof: boolean,\n    ): { strings: string[], values: any[] } {\n\n    const eofSeqs = valuesStartSeq ? [...eof, valuesStartSeq] : eof;\n    const strings: string[] = [];\n    const values: any[] = [];\n\n    for (;;) {\n        let s = '';\n        let ch = lookAhead(state, eofSeqs, disableEscape);\n\n        while (! isEOF(ch)) {\n            if (typeof ch === 'string') {\n                getChar(state, eofSeqs, disableEscape);\n                s += ch;\n            } else {\n                if (typeof ch === 'object' && Object.prototype.hasOwnProperty.call(ch, 'value')) {\n                    getChar(state, eofSeqs, disableEscape);\n                    const v = (ch as SxExternalValue).value;\n                    s += String(ch);\n                } else {\n                    throw new Error(`[SX] parseStringOrComment: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\n                }\n            }\n\n            ch = lookAhead(state, eofSeqs, disableEscape);\n        }\n\n        getChar(state, eofSeqs, disableEscape);\n\n        if ((ch as SxEof).eof === true) {\n            if (! allowPhysicalEof) {\n                throw new ScriptTerminationError('parseStringOrComment');\n            }\n        }\n\n        strings.push(s);\n\n        if ((ch as SxEof).eofSeq === valuesStartSeq) {\n            values.push(parseList(state, valuesStopChar, []));\n        } else {\n            break;\n        }\n    }\n\n    return { strings, values };\n}\n\n\nfunction parseString(state: SxParserState, disableEscape: boolean): string {\n    return parseStringOrComment(state, ['\"'], null, ')', disableEscape, false).strings[0];\n}\n\n\nfunction parseHereDoc(state: SxParserState, symbol: SxSymbol, attrs: SxToken[] | null): SxToken[] {\n    const q: SxToken[] = [symbol];\n\n    if (attrs) {\n        q.push(attrs);\n    }\n\n    const inner = parseStringOrComment(state, ['\"\"\"'], '%%%(', ')', false, false);\n    for (let i = 0; i < inner.strings.length; i++) {\n        q.push(inner.strings[i]);\n        if (i < inner.values.length) {\n            q.push(inner.values[i]);\n        }\n    }\n\n    return q;\n}\n\n\nfunction parseSingleLineComment(state: SxParserState): SxComment | ' ' {\n    return {\n        comment: parseStringOrComment(state, ['\\r', '\\n'], null, ')', false, true).strings[0]\n    };\n}\n\n\nfunction parseMultiLineComment(state: SxParserState): SxComment | ' ' {\n    return {\n        comment: parseStringOrComment(state, ['|#'], null, ')', false, false).strings[0]\n    };\n}\n\n\nfunction parseOneToken(state: SxParserState): SxToken {\n    skipWhitespaces(state);\n    let ch = lookAhead(state);\n\n    while (! isEOF(ch)) {\n        switch (ch) {\n        case ')':\n            throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\n\n        case '(':\n            getChar(state);\n            return parseList(state, ')', []);\n\n        case \"'\": case \"`\": case ',':\n            {\n                getChar(state);\n                const ahead = lookAhead(state);\n                let isSpliceUnquote = false;\n                if (ch === ',' && ahead === '@') {\n                    getChar(state);\n                    isSpliceUnquote = true;\n                }\n                skipWhitespaces(state);\n                const ret = (ch === \"'\" ?\n                        quote :\n                        (ch === \"`\" ? backquote : wrapByUnquote))\n                    (state, parseOneToken(state)\n                );\n                return (isSpliceUnquote ? splice(state, ret) : ret);\n            }\n\n        case \".\":\n            {\n                getChar(state);\n                const aheads = lookAheads(state, 2);\n                if (state.config.enableSpread && aheads[0] === '.' && aheads[1] === '.') {\n                    getChar(state);\n                    getChar(state);\n                    skipWhitespaces(state);\n                    return spread(state, parseOneToken(state));\n                } else {\n                    skipWhitespaces(state);\n                    return {dotted: parseOneToken(state)};\n                }\n            }\n\n        case ';':\n            getChar(state);\n            return parseSingleLineComment(state);\n\n        case '#':\n            {\n                const aheads = lookAheads(state, 2);\n                if (aheads[1] === '|') {\n                    getChar(state);\n                    getChar(state);\n                    return parseMultiLineComment(state);\n                } else {\n                    return parseSymbol(state);\n                }\n            }\n\n        case '\"':\n            {\n                getChar(state);\n                const aheads = lookAheads(state, 4);\n                if (state.config.enableHereDoc && aheads[0] === '\"' && aheads[1] === '\"') {\n                    let isHereDoc = true;\n                    if (isEOF(aheads[2]) || isSpace(aheads[2])) {\n                        // here doc\n                    } else if (isNumberFirstChar(aheads[2])) { // TODO: single +/- char is a symbol.\n                        if (aheads[2] === '+' || aheads[2] === '-') {\n                            if (! isNumberAfterSignChar(aheads[3])) {\n                                isHereDoc = false;\n                            }\n                        }\n                        // here doc\n                    } else if (isSymbolFirstChar(aheads[2])) {\n                        isHereDoc = false;\n                    } else {\n                        // here doc\n                    }\n                    getChar(state);\n                    getChar(state);\n\n                    let sym: SxSymbol | number | null = null;\n                    let attrs: SxToken[] | null = null;\n                    if (isHereDoc) {\n                        sym = {symbol: state.config.reservedNames.Template};\n                    } else {\n                        sym = parseSymbol(state, ['@']);\n                        if (sym === null) {\n                            throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\n                        }\n                        if (typeof sym === 'number') {\n                            throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\n                        }\n                        const ahs = lookAheads(state, 2);\n                        if (ahs[0] === '@') {\n                            if (ahs[1] !== '{') {\n                                throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\n                            }\n                            getChar(state);\n                            getChar(state);\n                            const a = parseList(state, '}', [{symbol: '@'}]);\n                            if (Array.isArray(a)) {\n                                attrs = a;\n                            }\n                        }\n                    }\n\n                    return parseHereDoc(state, sym, attrs);\n                } else {\n                    return parseString(state, false);\n                }\n            }\n\n        case '@':\n            if (state.config.enableVerbatimStringLiteral) {\n                const aheads = lookAheads(state, 2);\n                if (aheads[1] === '\"') {\n                    getChar(state);\n                    getChar(state);\n                    return parseString(state, true);\n                }\n            }\n            // FALL_THRU\n\n        default:\n            if (typeof ch !== 'string') {\n                if (typeof ch === 'object' && Object.prototype.hasOwnProperty.call(ch, 'value')) {\n                    getChar(state);\n                    return state.config.wrapExternalValue ? ch : (ch as SxExternalValue).value;\n                } else {\n                    throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\n                }\n            } else if (isSpace(ch)) {\n                break;\n            } else if (isNumberFirstChar(ch)) { // TODO: single +/- char is a symbol.\n                if (ch === '+' || ch === '-') {\n                    const aheads = lookAheads(state, 2);\n                    if (! isNumberAfterSignChar(aheads[1])) {\n                        return parseSymbol(state);\n                    }\n                }\n                return parseNumber(state);\n            } else if (isSymbolFirstChar(ch)) {\n                return parseSymbol(state);\n            } else {\n                throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\n            }\n        }\n\n        skipWhitespaces(state);\n        ch = lookAhead(state);\n    }\n\n    throw new ScriptTerminationError('parseOneToken');\n}\n\n\nfunction parseList(state: SxParserState, listStopChar: string, initialList: SxToken[]): SxToken {\n    const r: SxToken[] = initialList.slice(0);\n    let dotted = false;\n\n    skipWhitespaces(state);\n    let ch = lookAhead(state);\n\n    while (! isEOF(ch)) {\n        switch (ch) {\n        case listStopChar:\n            getChar(state);\n            if (dotted) {\n                return r[0];\n            } else {\n                return r;\n            }\n\n        default:\n            {\n                const t = parseOneToken(state);\n                if (typeof t === 'object' && Object.prototype.hasOwnProperty.call(t, 'dotted')) {\n                    if (r.length !== 1) {\n                        throw new Error(`[SX] parseList: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\n                    }\n                    dotted = true;\n                    if (Array.isArray(t)) {\n                        t.unshift(r.pop() as SxToken);\n                        r.push(t);\n                    } else {\n                        r.push({car: r.pop() as SxToken, cdr: (t as SxDottedFragment).dotted});\n                    }\n                } else if (typeof t === 'object' && Object.prototype.hasOwnProperty.call(t, 'comment')) {\n                    if (! state.config.stripComments) {\n                        r.push(t);\n                    }\n                } else {\n                    if (dotted) {\n                        throw new Error(`[SX] parseList: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\n                    }\n                    r.push(t);\n                }\n            }\n            break;\n        }\n\n        skipWhitespaces(state);\n        ch = lookAhead(state);\n    }\n\n    throw new ScriptTerminationError('parseList');\n}\n\n\n\nexport function parse(state: SxParserState) {\n    const r: SxToken[] = [];\n\n    skipWhitespaces(state);\n    let ch = lookAhead(state);\n\n    while (! isEOF(ch)) {\n        switch (ch) {\n        case '(':\n            getChar(state);\n            r.push(parseList(state, ')', []));\n            break;\n\n        case \"'\": case \"`\":\n            {\n                getChar(state);\n                skipWhitespaces(state);\n                for (;;) {\n                    const t = parseOneToken(state);\n                    if (typeof t === 'object' && Object.prototype.hasOwnProperty.call(t, 'comment')) {\n                        if (! state.config.stripComments) {\n                            r.push(t);\n                        }\n                    } else {\n                        r.push((ch === \"'\" ? quote : backquote)(state, t));\n                        break;\n                    }\n                }\n                break;\n            }\n\n        case ';':\n            getChar(state);\n            if (state.config.stripComments) {\n                parseSingleLineComment(state);\n            } else {\n                r.push(parseSingleLineComment(state));\n            }\n            break;\n\n        case '#':\n            {\n                const aheads = lookAheads(state, 2);\n                if (aheads[1] === '|') {\n                    getChar(state);\n                    getChar(state);\n                    if (state.config.stripComments) {\n                        parseMultiLineComment(state);\n                    } else {\n                        r.push(parseMultiLineComment(state));\n                    }\n                } else {\n                    getChar(state);\n                    if (state.config.stripComments) {\n                        parseSingleLineComment(state);\n                    } else {\n                        r.push(parseSingleLineComment(state));\n                    }\n                }\n            }\n            break;\n\n        case '\"':\n            {\n                const aheads = lookAheads(state, 3);\n                if (aheads[1] === '\"' && aheads[2] === '\"') {\n                    r.push(parseOneToken(state));\n                    break;\n                }\n            }\n            // FALL_THRU\n\n        default:\n            throw new Error(`[SX] parseInitialState: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\n        }\n\n        skipWhitespaces(state);\n        ch = lookAhead(state);\n    }\n\n    return r;\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxMacroInfo,\n         SxFuncInfo,\n         SxSymbolInfo,\n         SxParserConfig,\n         SxParserState,\n         SxToken,\n         SExpressionTemplateFn,\n         SExpressionAsyncTemplateFn } from '../types';\nimport { parse }                      from '../parser';\nimport { evaluate }                   from '../evaluate';\nimport { defaultConfig }              from '../defaults';\n\n\n\nfunction initState(config: SxParserConfig, globals: any, strings: TemplateStringsArray | string, values?: any[]): SxParserState {\n    return {\n        strings: typeof strings === 'string' ? [strings] : strings,\n        values: values || [],\n\n        index: 0,\n        pos: 0,\n        line: 0,\n\n        evalCount: 0,\n\n        scopes: [{isBlockLocal: false, scope: globals}],\n\n        macroMap: new Map<string, SxMacroInfo>(config.macros.map(x => [x.name, x] as [string, SxMacroInfo])),\n        funcMap: new Map<string, SxFuncInfo>(config.funcs.map(x => [x.name, x] as [string, SxFuncInfo])),\n        symbolMap: new Map<string, SxSymbolInfo>(config.symbols.map(x => [x.name, x] as [string, SxSymbolInfo])),\n\n        config,\n    };\n}\n\n\nfunction resetState(state: SxParserState, strings: TemplateStringsArray | string, values?: any[]) {\n    state.strings = typeof strings === 'string' ? [strings] : strings;\n    state.values = values || [];\n    state.index = 0;\n    state.pos = 0;\n    state.line = 0;\n    state.evalCount = 0;\n    return state;\n}\n\n\nexport function SExpression(conf?: SxParserConfig): SExpressionTemplateFn {\n    let config = conf || Object.assign({}, defaultConfig);\n    let globalScope: any = {};\n    let startup: SxToken[] = [];\n\n    const exec = (state: SxParserState, s: SxToken[]) => {\n        if (config.enableEvaluate) {\n            for (let i = 0; i < s.length; i++) {\n                s[i] = evaluate(state, s[i]);\n            }\n        }\n\n        if (config.returnMultipleRoot) {\n            return s.length === 1 ? s[0] : s;\n        } else {\n            return s[s.length - 1];\n        }\n    };\n\n    const f: SExpressionTemplateFn = ((strings: TemplateStringsArray | string, ...values: any[]) => {\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\n        return exec(state, startup.concat(parse(state)));\n    }) as any;\n\n    f.evaluateAST = (ast: SxToken[]) => {\n        const state = initState(config, Object.assign({}, globalScope), '');\n        return exec(state, startup.concat(ast));\n    };\n    (f as any).repl = () => {\n        const state = initState(config, Object.assign({}, globalScope), '');\n        exec(state, startup.slice(0));\n        const fRepl: SExpressionTemplateFn = ((strings: TemplateStringsArray | string, ...values: any[]) => {\n            resetState(state, strings, values);\n            return exec(state, parse(state));\n        }) as any;\n        (fRepl as any).sync = fRepl;\n        return fRepl;\n    };\n    f.setGlobals = (globals: object) => {\n        globalScope = Object.assign({}, globals || {});\n        return f;\n    };\n    f.appendGlobals = (globals: object) => {\n        globalScope = Object.assign({}, globalScope, globals || {});\n        return f;\n    };\n    f.setStartup = (strings: TemplateStringsArray | string, ...values: any[]) => {\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\n        startup = parse(state);\n        return f;\n    };\n    f.setStartupAST = (ast: SxToken[]) => {\n        startup = ast;\n        return f;\n    };\n    f.appendStartup = (strings: TemplateStringsArray | string, ...values: any[]) => {\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\n        startup = startup.concat(parse(state));\n        return f;\n    };\n    f.appendStartupAST = (ast: SxToken[]) => {\n        startup = startup.concat(ast);\n        return f;\n    };\n    f.install = (installer) => {\n        config = installer(config);\n        return f;\n    };\n\n    return f;\n}\n\n\nexport function SExpressionAsync(conf?: SxParserConfig): SExpressionAsyncTemplateFn {\n    let config = conf || Object.assign({}, defaultConfig);\n    let globalScope: any = {};\n    let startup: SxToken[] = [];\n\n    const exec = async (state: SxParserState, s: SxToken[]) => {\n        if (config.enableEvaluate) {\n            for (let i = 0; i < s.length; i++) {\n                s[i] = evaluate(state, s[i]);\n\n                if (typeof s[i] === 'object' && s[i] !== null && typeof (s[i] as any).then === 'function') {\n                    s[i] = await s[i];\n                }\n            }\n        }\n\n        if (config.returnMultipleRoot) {\n            return s.length === 1 ? s[0] : s;\n        } else {\n            return s[s.length - 1];\n        }\n    };\n\n    const f: SExpressionAsyncTemplateFn = (async (strings: TemplateStringsArray | string, ...values: any[]) => {\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\n        return exec(state, startup.concat(parse(state)));\n    }) as any;\n\n    f.evaluateAST = (ast: SxToken[]) => {\n        const state = initState(config, Object.assign({}, globalScope), '');\n        return exec(state, startup.concat(ast));\n    };\n    (f as any).repl = () => {\n        const execSync = (stat: SxParserState, s: SxToken[]) => {\n            if (config.enableEvaluate) {\n                for (let i = 0; i < s.length; i++) {\n                    s[i] = evaluate(stat, s[i]);\n                }\n            }\n\n            if (config.returnMultipleRoot) {\n                return s.length === 1 ? s[0] : s;\n            } else {\n                return s[s.length - 1];\n            }\n        };\n        const state = initState(config, Object.assign({}, globalScope), '');\n        exec(state, startup.slice(0));\n        const fRepl: SExpressionAsyncTemplateFn = (async (strings: TemplateStringsArray | string, ...values: any[]) => {\n            resetState(state, strings, values);\n            return exec(state, parse(state));\n        }) as any;\n        const fReplSync: SExpressionTemplateFn = ((strings: TemplateStringsArray | string, ...values: any[]) => {\n            resetState(state, strings, values);\n            return execSync(state, parse(state));\n        }) as any;\n        (fRepl as any).sync = fReplSync;\n        return fRepl;\n    };\n    f.setGlobals = (globals: object) => {\n        globalScope = Object.assign({}, globals || {});\n        return f;\n    };\n    f.appendGlobals = (globals: object) => {\n        globalScope = Object.assign({}, globalScope, globals || {});\n        return f;\n    };\n    f.setStartup = (strings: TemplateStringsArray | string, ...values: any[]) => {\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\n        startup = parse(state);\n        return f;\n    };\n    f.setStartupAST = (ast: SxToken[]) => {\n        startup = ast;\n        return f;\n    };\n    f.appendStartup = (strings: TemplateStringsArray | string, ...values: any[]) => {\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\n        startup = startup.concat(parse(state));\n        return f;\n    };\n    f.appendStartupAST = (ast: SxToken[]) => {\n        startup = startup.concat(ast);\n        return f;\n    };\n    f.install = (installer) => {\n        config = installer(config);\n        return f;\n    };\n\n    return f;\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserConfig } from '../../types';\nimport { SExpression }    from '../../interpreters';\nimport { defaultConfig }  from '../../defaults';\n\n\n\nexport const S = (() => {\n    const config: SxParserConfig = Object.assign({}, defaultConfig);\n\n    config.enableEvaluate = false;\n    config.returnMultipleRoot = true;\n\n    return SExpression(config);\n})();\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserState,\n         SxSymbol,\n         SxToken,\n         FatalError,\n         CapturedScopes,\n         SxMacroInfo }           from '../../types';\nimport { globalObj }             from '../../global-this';\nimport { isSymbol,\n         quote }                 from '../../ast';\nimport { evaluate,\n         resolveValueSymbolScope,\n         collectCapturedVariables,\n         getCapturedScopes,\n         getScope,\n         getGlobalScope,\n         installScope,\n         uninstallScope,\n         optimizeTailCall,\n         toNumber }              from '../../evaluate';\nimport { compileLambda }         from '../../compile';\nimport { checkParamsLength,\n         checkUnsafeVarNamesEx } from '../../errors';\n\n\n\nexport const $car = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($car '(first second ... last))\n    //  -> S expr  : first\n    checkParamsLength('$car', args, 1, 1);\n\n    const car = $$first(...args);\n    if (! Array.isArray(car)) {\n        throw new Error(`[SX] $car: Invalid argument(s): args[0] is not array.`);\n    }\n    if (car.length === 0) {\n        throw new Error(`[SX] $car: Invalid argument(s): args[0] is nil.`);\n    }\n    return car[0];\n};\nexport const $$car = $car(null as any, null as any);\n\n\nexport const $cdr = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($cdr '(first second ... last))\n    //  -> S expr  : (second ... last)\n    checkParamsLength('$cdr', args, 1, 1);\n\n    const car = $$first(...args);\n    if (! Array.isArray(car)) {\n        throw new Error(`[SX] $cdr: Invalid argument(s): args[0] is not array.`);\n    }\n    if (car.length === 0) {\n        throw new Error(`[SX] $cdr: Invalid argument(s): args[0] is nil.`);\n    }\n    return car.slice(1);\n};\nexport const $$cdr = $cdr(null as any, null as any);\n\n\nexport const $cons = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($cons arg1 '(arg2-item1 ...) ... argN)\n    //  -> S expr  : (arg1 arg2-item1 ...)\n    // S expression: ($cons arg1 nilOrNull ... argN)\n    //  -> S expr  : (arg1)\n    // S expression: ($cons arg1 arg2 ... argN)\n    //  -> S expr  : arg1.arg2\n    checkParamsLength('$cons', args, 2, 2);\n\n    let {car, cdr} = $$firstAndSecond(...args);\n    if (car === null) {\n        car = [];\n    }\n    if (cdr === null) {\n        cdr = [];\n    }\n\n    if (Array.isArray(cdr)) {\n        cdr = cdr.slice(0);\n        cdr.unshift(car);\n        return cdr;\n    } else {\n        return {car, cdr};\n    }\n};\nexport const $$cons = $cons(null as any, null as any);\n\n\nexport const $first = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($first first second ... last)\n    //  -> S expr  : first\n    // S expression: ($first)\n    //  -> S expr  : null\n    const car: any = args.slice(0, 1);\n    return (car.length === 1) ? car[0] : null;\n};\nexport const $$first = $first(null as any, null as any);\n\n\nexport const $second = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($second first second ... last)\n    //  -> S expr  : second\n    // S expression: ($second first)\n    //  -> S expr  : null\n    const cdr: any = args.slice(1, 2);\n    return (cdr.length === 1) ? cdr[0] : null;\n};\nexport const $$second = $second(null as any, null as any);\n\n\nexport const $last = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($last first second ... last)\n    //  -> S expr  : last\n    // S expression: ($last)\n    //  -> S expr  : null\n    const car: any = args.slice(args.length - 1, args.length);\n    return (car.length === 1) ? car[0] : null;\n};\nexport const $$last = $last(null as any, null as any);\n\n\nexport const $rest = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($rest first second ... last)\n    //  -> S expr  : (second ... last)\n    // S expression: ($rest first)\n    //  -> S expr  : null\n    const cdr: any = args.slice(1);\n    return (0 < cdr.length) ? cdr : null;\n};\nexport const $$rest = $rest(null as any, null as any);\n\n\nexport const $firstAndSecond = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($first-and-second first second ... last)\n    //  -> S expr  : first.second\n    let car: any = args.slice(0, 1);\n    car = (car.length === 1) ? car[0] : null;\n\n    let cdr: any = args.slice(1, 2);\n    cdr = (cdr.length === 1) ? cdr[0] : null;\n\n    return {car, cdr};\n};\nexport const $$firstAndSecond = $firstAndSecond(null as any, null as any);\n\n\nexport const $atom = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($atom arg1 ...)\n    //  -> (if arg1 is list or dotted pair)  S expr  : false\n    //  -> (if arg1 is nil or anything else) S expr  : true\n    checkParamsLength('$atom', args, 1, 1);\n\n    const car = $$first(...args);\n\n    if (car === null || car === void 0) {\n        return true;\n    }\n    if (Array.isArray(car)) {\n        if (car.length === 0) return  true;\n        else                  return false;\n    }\n\n    switch (typeof car) {\n    case 'number': case 'string': case 'function': case 'boolean':\n        return true;\n    case 'object':\n        return isSymbol(car) ? true : false;\n    }\n    return false;\n};\nexport const $$atom = $atom(null as any, null as any);\n\n\nexport const $eq = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($eq arg1 arg2)\n    //  -> (if arg1 === arg2)  S expr  : true\n    //  -> (else)              S expr  : false\n    checkParamsLength('$eq', args, 2, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    return car === cdr;\n};\nexport const $$eq = $eq(null as any, null as any);\n\n\nexport const $notEq = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($not-eq arg1 arg2)\n    //  -> (if arg1 !== arg2)  S expr  : true\n    //  -> (else)              S expr  : false\n    checkParamsLength('$notEq', args, 2, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    return car !== cdr;\n};\nexport const $$notEq = $notEq(null as any, null as any);\n\n\nexport const $list = (state: SxParserState, name: string) => (...args: any[]) =>\n    // S expression: ($list arg1 ... argN)\n    //  -> S expr  : (arg1 ... argN)\n    args.slice(0);\nexport const $$list = $list(null as any, null as any);\n\n\n// tslint:disable-next-line:variable-name\nexport const $__scope = (state: SxParserState, name: string, capturedScopes?: CapturedScopes) => (...args: any[]) => {\n    // S expression: ($__scope isBlockLocal returnMultiple '((name value) | name ...) 'expr1 ... 'exprN)\n    //  -> (if returnMultiple)  S expr  : [expr1 ... exprN]\n    //  -> (else)               S expr  : exprN\n    checkParamsLength('$__scope', args, 3);\n\n    const isBlockLocal = $$first(...args);\n    const returnMultiple = $$second(...args);\n    const {car, cdr} = $$firstAndSecond(...args.slice(2));\n    let r: SxToken = null;\n\n    const scope: any = {};\n    if (Array.isArray(car)) {\n        for (const x of car) {\n            if (Array.isArray(x)) {\n                const kv = $$firstAndSecond(...x);\n                const kvSym = isSymbol(kv.car);\n                const kvName = kvSym ? kvSym.symbol : String(kv.car);\n                checkUnsafeVarNamesEx('$__scope', scope, kvName);\n                scope[kvName] = evaluate(state, kv.cdr);\n            } else {\n                const xSym = isSymbol(x);\n                const xName = xSym ? xSym.symbol : String(x);\n                checkUnsafeVarNamesEx('$__scope', scope, xName);\n                scope[xName] = null;\n            }\n        }\n    }\n    installScope(state, scope, isBlockLocal, capturedScopes);\n\n    try {\n        if (4 < args.length) {\n            if (returnMultiple) {\n                r = [];\n                for (const x of args.slice(3)) {\n                    r.push(evaluate(state, x));\n                }\n            } else {\n                for (const x of args.slice(3)) {\n                    r = evaluate(state, x);\n                }\n            }\n        } else {\n            r = evaluate(state, cdr);\n        }\n    } finally {\n        uninstallScope(state);\n    }\n\n    return r;\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__globalScope = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__global returnMultiple 'expr1 ... 'exprN)\n    //  -> (if returnMultiple)  S expr  : [expr1 ... exprN]\n    //  -> (else)               S expr  : exprN\n    checkParamsLength('$__globalScope', args, 1);\n\n    const returnMultiple = $$first(...args);\n    const cdr = $$second(...args);\n    let r: SxToken = null;\n\n    installScope(state, getGlobalScope(state).scope, true);\n    try {\n        if (2 < args.length) {\n            if (returnMultiple) {\n                r = [];\n                for (const x of args.slice(1)) {\n                    r.push(evaluate(state, x));\n                }\n            } else {\n                for (const x of args.slice(1)) {\n                    r = evaluate(state, x);\n                }\n            }\n        } else {\n            r = evaluate(state, cdr);\n        }\n    } finally {\n        uninstallScope(state);\n    }\n\n    return r;\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__capture = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__capture '(sym1 ... symN) 'expr1 ... 'exprN)\n    //  -> S expr  : exprN\n    checkParamsLength('$__capture', args, 1);\n\n    const formalArgs: SxSymbol[] = args[0];\n    if (! Array.isArray(formalArgs)) {\n        throw new Error(`[SX] $__lambda: Invalid argument(s): args[0] is not array.`);\n    }\n\n    let r: SxToken = null;\n\n    const capturedScopes = collectCapturedVariables(state, formalArgs);\n    installScope(state, {}, true, capturedScopes);\n    try {\n        for (const x of args.slice(1)) {\n            r = evaluate(state, x);\n        }\n    } finally {\n        uninstallScope(state);\n    }\n\n    return r;\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__lambda = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__lambda '(sym1 ... symN) 'expr1 ... 'exprN)\n    //  -> S expr  : fn\n    checkParamsLength('$__lambda', args, 2);\n\n    const formalArgs: SxSymbol[] = args[0];\n    if (! Array.isArray(formalArgs)) {\n        throw new Error(`[SX] $__lambda: Invalid argument(s): args[0] is not array.`);\n    }\n\n    let lastIsSpread = false;\n    for (let i = 0; i < formalArgs.length; i++) {\n        const fa = formalArgs[i];\n        if (i === formalArgs.length - 1 && state.config.enableSpread &&\n            Array.isArray(fa) && isSymbol(fa[0], state.config.reservedNames.spread)) {\n            if (! isSymbol(fa[1])) {\n                throw new Error(`[SX] $__lambda: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\n            }\n            formalArgs[i] = fa[1];\n            lastIsSpread = true;\n        } else if (! isSymbol(fa)) {\n            throw new Error(`[SX] $__lambda: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\n        }\n    }\n\n    let fnBody = args.slice(1);\n    if (state.config.enableTailCallOptimization) {\n        fnBody = optimizeTailCall(state, formalArgs, fnBody);\n    }\n\n    const capturedScopes = getCapturedScopes(state);\n\n    const fn = function(this: any, ...actualArgs: any[]) {\n        if ((actualArgs.length + (lastIsSpread ? 1 : 0)) < formalArgs.length) {\n            throw new Error(`[SX] func call: Actual args too short: actual ${\n                actualArgs.length} / formal ${formalArgs.length}.`);\n        }\n        // TODO: add type checking\n        return $__scope(state, name, capturedScopes)(false, false, [\n            [state.config.reservedNames.self, fn],\n            [state.config.reservedNames.thiz, this === globalObj || this === void 0 ? null : quote(state, this)],\n            ...(formalArgs.map((x: SxSymbol, index) => [\n                x.symbol,\n                quote(state,\n                    (lastIsSpread && index === formalArgs.length - 1) ?\n                        actualArgs.slice(index) : actualArgs[index]\n                )\n            ])),\n        ], ...fnBody);\n    };\n    return fn;\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $comp$__lambda = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__lambda '(sym1 ... symN) 'expr1 ... 'exprN)\n    //  -> S expr  : fn\n    checkParamsLength('$$__lambda', args, 2);\n\n    const formalArgs: SxSymbol[] = args[0];\n    if (! Array.isArray(formalArgs)) {\n        throw new Error(`[SX] $$__lambda: Invalid argument(s): args[0] is not array.`);\n    }\n\n    let lastIsSpread = false;\n    for (let i = 0; i < formalArgs.length; i++) {\n        const fa = formalArgs[i];\n        if (i === formalArgs.length - 1 && state.config.enableSpread &&\n            Array.isArray(fa) && isSymbol(fa[0], state.config.reservedNames.spread)) {\n            if (! isSymbol(fa[1])) {\n                throw new Error(`[SX] $$__lambda: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\n            }\n            formalArgs[i] = fa[1];\n            lastIsSpread = true;\n        } else if (! isSymbol(fa)) {\n            throw new Error(`[SX] $$__lambda: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\n        }\n    }\n\n    const fnBody = args.slice(1);\n    return compileLambda(state, formalArgs, lastIsSpread, fnBody);\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__defun = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__defun 'name '(sym1 ... symN) 'expr ... 'expr)\n    //  -> S expr  : fn\n    checkParamsLength('$__defun', args, 3);\n\n    const car: SxSymbol = $$first(...args);\n    const fn = $__lambda(state, name)(...args.slice(1));\n\n    checkUnsafeVarNamesEx('$__defun', state.funcMap, car.symbol);\n    // TODO: overloading\n    state.funcMap.set(car.symbol, {\n        name: car.symbol,\n        fn: (st, nm) => fn,\n        // formalArgs: ,\n        // lastIsSpread: ,\n        // next: ,\n    });\n    return fn;\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $comp$__defun = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__defun 'name '(sym1 ... symN) 'expr ... 'expr)\n    //  -> S expr  : fn\n    checkParamsLength('$$__defun', args, 3);\n\n    const car: SxSymbol = $$first(...args);\n    const fn = $comp$__lambda(state, name)(...args.slice(1));\n\n    checkUnsafeVarNamesEx('$$__defun', state.funcMap, car.symbol);\n    // TODO: overloading\n    state.funcMap.set(car.symbol, {\n        name: car.symbol,\n        fn: (st, nm) => fn,\n        // formalArgs: ,\n        // lastIsSpread: ,\n        // next: ,\n    });\n    return fn;\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__refun = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($refun 'name)\n    //  -> S expr  : fn\n    checkParamsLength('$__refun', args, 1, 1);\n\n    const car: SxSymbol = $$first(...args);\n\n    checkUnsafeVarNamesEx('$__refun', state.funcMap, car.symbol);\n    const info = state.funcMap.get(car.symbol);\n    if (!info) {\n        throw new Error(`[SX] $__refun: function ${car.symbol} is not defined.`);\n    }\n    return info.fn(state, car.symbol);\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__defmacro = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__defmacro 'name '(sym1 ... symN) 'expr ... 'expr)\n    //  -> S expr  : fn\n    checkParamsLength('$__defmacro', args, 3);\n\n    const car: SxSymbol = $$first(...args);\n    const formalArgs: SxSymbol[] = args[1];\n    if (! Array.isArray(formalArgs)) {\n        throw new Error(`[SX] $__defmacro: Invalid argument(s): args[1] is not array.`);\n    }\n\n    let lastIsSpread = false;\n    for (let i = 0; i < formalArgs.length; i++) {\n        const fa = formalArgs[i];\n        if (i === formalArgs.length - 1 && state.config.enableSpread &&\n            Array.isArray(fa) && isSymbol(fa[0], state.config.reservedNames.spread)) {\n            if (! isSymbol(fa[1])) {\n                throw new Error(`[SX] $__defmacro: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\n            }\n            formalArgs[i] = fa[1];\n            lastIsSpread = true;\n        } else if (! isSymbol(fa)) {\n            throw new Error(`[SX] $__defmacro: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\n        }\n    }\n\n    const fnBody = args.slice(2);\n    const capturedScopes = getCapturedScopes(state);\n\n    const fn = (fArgs: SxSymbol[]) => (...aArgs: any[]) => {\n        return $__scope(state, name, capturedScopes)(false, false, [\n            [state.config.reservedNames.self, fn],\n            ...(fArgs.map((x: SxSymbol, index) => [\n                x.symbol,\n                quote(state,\n                    (lastIsSpread && index === fArgs.length - 1) ?\n                        aArgs.slice(index) : aArgs[index]\n                )\n            ])),\n        ], ...fnBody);\n    };\n\n    const m: SxMacroInfo = {\n        name: car.symbol,\n        fn: (st: SxParserState, nm: string, fArgs: SxSymbol[]) => (list: SxToken[]) => fn(fArgs)(...(list.slice(1))),\n        formalArgs,\n        lastIsSpread,\n    };\n\n    checkUnsafeVarNamesEx('$__defmacro', state.macroMap, car.symbol);\n\n    if (state.macroMap.has(car.symbol)) {\n        let curr = state.macroMap.get(car.symbol);\n        (curr as SxMacroInfo).next = m;\n        if (curr && curr.formalArgs) {\n            if (curr.formalArgs.length < formalArgs.length) {\n                state.macroMap.set(car.symbol, m);\n                m.next = curr;\n            } else {\n                let prev = curr;\n                curr = curr.next;\n                while (curr) {\n                    if (curr.formalArgs) {\n                        if (curr.formalArgs.length < formalArgs.length) {\n                            prev.next = m;\n                            m.next = curr;\n                            break;\n                        }\n                    }\n                    prev = curr;\n                    curr = curr.next;\n                }\n            }\n        }\n    } else {\n        state.macroMap.set(car.symbol, m);\n    }\n    return fn;\n};\n\n\nexport const $apply = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($apply fn arg1 ... argN)\n    //  -> S expr  : fn'\n    checkParamsLength('$apply', args, 1);\n\n    const car: () => any = $$first(...args);\n    if (typeof car !== 'function') {\n        throw new Error(`[SX] $apply: Invalid argument(s): args[0] is not function.`);\n    }\n\n    return (\n        (...p: any[]) => car.apply(null, args.slice(1).concat(p))\n    );\n};\nexport const $$apply = $apply(null as any, null as any);\n\n\n// tslint:disable-next-line:variable-name\nexport const $__call = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__call thisArg 'symbol arg1 ... argN)\n    //  -> S expr  : fn\n    checkParamsLength('$__call', args, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    const sym = isSymbol(cdr);\n    const xName = sym ? sym.symbol : evaluate(state, cdr) as any;\n\n    checkUnsafeVarNamesEx('$__call', car, xName);\n\n    return Function.prototype.apply.call(\n        car[xName],\n        car,\n        args.slice(2)\n    );\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__try = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__try 'expr 'catch-expr)\n    //  ->                               S expr  : expr\n    //  -> (if error is raised in expr)  S expr  : catch-expr\n    checkParamsLength('$__try', args, 1, 2);\n\n    let r: SxToken = [];\n    try {\n        r = evaluate(state, args[0]);\n    } catch (e) {\n        if (e instanceof FatalError) {\n            throw e;\n        }\n        if (1 < args.length) {\n            r = $__scope(state, name)(true, false, [\n                ['$error', quote(state, e)],\n                ['$parent', quote(state, getScope(state))],\n            ], args[1]);\n        } else {\n            r = null;\n        }\n    }\n    return r;\n};\n\n\nexport const $raise = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($raise 'expr)\n    //  -> S expr  : -\n    const car = $$first(...args);\n    throw car;\n};\nexport const $$raise = $raise(null as any, null as any);\n\n\n// tslint:disable-next-line:variable-name\nexport const $__if = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__if condition 't-expr 'f-expr)\n    //  -> (if condition is true ) S expr  : t-expr\n    //  -> (if condition is false) S expr  : f-expr\n    checkParamsLength('$__if', args, 2, 3);\n\n    const car = $$first(...args);\n    let r: SxToken = [];\n    if ($$boolean(car)) {\n        r = evaluate(state, args[1]);\n    } else {\n        if (2 < args.length) {\n            r = evaluate(state, args[2]);\n        } else {\n            r = null;\n        }\n    }\n    return r;\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__ifNull = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__if-null condition 'null-expr)\n    //  -> (if condition is not null ) S expr  : condition\n    //  -> (if condition is null)      S expr  : null-expr\n    checkParamsLength('$__ifNull', args, 2, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    let r: SxToken = [];\n    if (! $$ambiguousEq(car, null)) {\n        r = car;\n    } else {\n        r = evaluate(state, cdr);\n    }\n    return r;\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__cond = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__cond 'cond1 'expr1 ... 'condN 'exprN)\n    //  -> (if (eval condI) is true ) S expr  : exprI\n    //  -> (if no matched)            S expr  : null\n    checkParamsLength('$__cond', args, 1);\n\n    for (let i = 0; i < args.length - 1; i += 2) {\n        const c = args[i];\n        const x = args[i + 1];\n        if ($$boolean(evaluate(state, c))) {\n            return evaluate(state, x);\n        }\n    }\n    return null;\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__while = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__while 'condition 'expr1 ... 'exprN)\n    //  -> (if condition is true at least 1 or more times) S expr  : exprN\n    //  -> (else)                                          S expr  : null\n    checkParamsLength('$__while', args, 1);\n\n    const car = $$first(...args);\n    const cdr = args.slice(1);\n    let r: SxToken = null;\n    while ($$boolean(evaluate(state, car))) {\n        for (const x of cdr) {\n            r = evaluate(state, x);\n        }\n    }\n    return r;\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__doWhile = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__do-while 'condition 'expr1 ... 'exprN)\n    //  -> (if condition is true at least 1 or more times) S expr  : exprN\n    //  -> (else)                                          S expr  : null\n    checkParamsLength('$__doWhile', args, 1);\n\n    const car = $$first(...args);\n    const cdr = args.slice(1);\n    let r: SxToken = null;\n\n    do {\n        for (const x of cdr) {\n            r = evaluate(state, x);\n        }\n    } while ($$boolean(evaluate(state, car)));\n    return r;\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__until = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__until 'condition 'expr1 ... 'exprN)\n    //  -> (if condition is true at least 1 or more times) S expr  : exprN\n    //  -> (else)                                          S expr  : null\n    checkParamsLength('$__until', args, 1);\n\n    const car = $$first(...args);\n    const cdr = args.slice(1);\n    let r: SxToken = null;\n    while ($$not(evaluate(state, car))) {\n        for (const x of cdr) {\n            r = evaluate(state, x);\n        }\n    }\n    return r;\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__doUntil = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__do-until 'condition 'expr1 ... 'exprN)\n    //  -> (if condition is true at least 1 or more times) S expr  : exprN\n    //  -> (else)                                          S expr  : null\n    checkParamsLength('$__doUntil', args, 1);\n\n    const car = $$first(...args);\n    const cdr = args.slice(1);\n    let r: SxToken = null;\n    do {\n        for (const x of cdr) {\n            r = evaluate(state, x);\n        }\n    } while ($$not(evaluate(state, car)));\n    return r;\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__repeat = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__repeat 'i n-times 'expr1 ... 'exprN)\n    //  -> (if n > 0) S expr  : exprN\n    //  -> (else)     S expr  : null\n    checkParamsLength('$__repeat', args, 2);\n\n    const sym = isSymbol($$first(...args));\n    if (! sym) {\n        throw new Error(`[SX] $__repeat: Invalid argument(s): item(s) of args[0] is not symbol.`);\n    }\n\n    checkUnsafeVarNamesEx('$__repeat', {}, sym.symbol); // NOTE: pass dummy target object.\n    const scope = resolveValueSymbolScope(state, sym, false);\n\n    const n = toNumber($$second(...args));\n    const cdr = args.slice(2);\n    let r: SxToken = null;\n    for (let i = 0; i < n; i++) {\n        scope[sym.symbol] = i;\n        for (const x of cdr) {\n            r = evaluate(state, x);\n        }\n    }\n    return r;\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__for = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__for 'x list 'expr1 ... 'exprN)\n    //  -> (if list.length > 0) S expr  : exprN\n    //  -> (else)               S expr  : null\n    checkParamsLength('$__for', args, 2);\n\n    const sym = isSymbol($$first(...args));\n    if (! sym) {\n        throw new Error(`[SX] $__for: Invalid argument(s): item(s) of args[0] is not symbol.`);\n    }\n\n    checkUnsafeVarNamesEx('$__for', {}, sym.symbol); // NOTE: pass dummy target object.\n    const scope = resolveValueSymbolScope(state, sym, false);\n\n    const list = $$second(...args);\n    if (! Array.isArray(list)) {\n        throw new Error(`[SX] $__for: Invalid argument(s): item(s) of args[1] is not array.`);\n    }\n\n    const cdr = args.slice(2);\n    let r: SxToken = null;\n    for (const q of list) {\n        scope[sym.symbol] = q;\n        for (const x of cdr) {\n            r = evaluate(state, x);\n        }\n    }\n    return r;\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $pipe = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__get v fn1 ... fnN)\n    //  -> S expr  : any\n    checkParamsLength('$pipe', args, 1);\n\n    let v = args[0];\n    for (let i = 1; i < args.length; i++) {\n        v = args[i](v);\n    }\n    return v;\n};\nexport const $$pipe = $pipe(null as any, null as any);\n\n\n// tslint:disable-next-line:variable-name\nexport const $__get = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__get 'nameOrIndex1 ... 'nameOrIndexN)\n    //  -> S expr  : any\n    checkParamsLength('$__get', args, 1);\n\n    let v: any = null;\n    let sym = isSymbol(args[0]);\n\n    if (!sym) {\n        switch (typeof args[0]) {\n        case 'string': case 'number':\n            sym = {symbol: String(args[0])};\n            break;\n        default:\n            v = evaluate(state, args[0]);\n            break;\n        }\n    }\n\n    if (sym) {\n        const scope = resolveValueSymbolScope(state, sym, true);\n        if (! scope) {\n            throw new Error(`[SX] $__get: Invalid argument(s): args[0]: symbol \"${sym.symbol}\" is not defined.`);\n        }\n        v = scope[sym.symbol];\n    }\n\n    for (let i = 1; i < args.length; i++) {\n        let q: any = args[i];\n        let inprog = true;\n        while (inprog) {\n            switch (typeof q) {\n            case 'function':\n                v = q(v);\n                inprog = false;\n                break;\n            case 'object':\n                if (Array.isArray(q)) {\n                    q = evaluate(state, q);\n                } else {\n                    sym = isSymbol(q);\n                    if (sym) {\n                        q = sym.symbol;\n                    } else if (Object.prototype.hasOwnProperty.call(q, 'value')) {\n                        q = evaluate(state, q);\n                    } else {\n                        throw new Error(`[SX] $__get: Invalid argument(s): invalid name path.`);\n                    }\n                }\n                break;\n            case 'number':\n                if (q < 0) {\n                    q = v.length + q;\n                }\n                // FALL_THRU\n            case 'string':\n                checkUnsafeVarNamesEx('$__get', v, q);\n                v = v[q];\n                inprog = false;\n                break;\n            default:\n                throw new Error(`[SX] $__get: Invalid argument(s): invalid name path.`);\n            }\n        }\n    }\n    return v;\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__let = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__let 'nameStrOrSymbol expr)\n    //  -> S expr  : any\n    checkParamsLength('$__let', args, 2, 2);\n\n    let sym = isSymbol($$first(...args));\n\n    if (! sym) {\n        if (typeof args[0] === 'string') {\n            sym = {symbol: args[0]};\n        } else {\n            throw new Error(`[SX] $__let: Invalid argument(s): invalid name.`);\n        }\n    }\n\n    checkUnsafeVarNamesEx('$__let', {}, sym.symbol); // NOTE: pass dummy target object.\n\n    const scope = resolveValueSymbolScope(state, sym, false);\n    scope[sym.symbol] = args[1];\n\n    return args[1];\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__set = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__set 'nameOrListOfNameOrIndex expr)\n    //  -> S expr  : any\n    checkParamsLength('$__set', args, 2, 2);\n\n    let path: any = [];\n\n    if (Array.isArray(args[0])) {\n        path = args[0];\n    } else {\n        path.push(args[0]);\n    }\n\n    let sym = isSymbol(path[0]);\n\n    if (! sym) {\n        if (typeof path[0] === 'string') {\n            checkUnsafeVarNamesEx('$__set', {}, path[0]); // NOTE: pass dummy target object.\n            sym = {symbol: path[0]};\n        } else {\n            throw new Error(`[SX] $__set: Invalid argument(s): invalid name.`);\n        }\n    }\n\n    let scope = resolveValueSymbolScope(state, sym, true);\n    if (scope === null) {\n        throw new Error(`[SX] $__set: Unresolved symbol: ${sym.symbol}.`);\n    }\n\n    let subst = false;\n\n    for (let i = 0; i < path.length; i++) {\n        let q: any = path[i];\n        let inprog = true;\n        const last = i === path.length - 1;\n        while (inprog) {\n            switch (typeof q) {\n            case 'function':\n                scope = q(scope);\n                inprog = false;\n                break;\n            case 'object':\n                if (Array.isArray(q)) {\n                    q = evaluate(state, q);\n                } else {\n                    sym = isSymbol(q);\n                    if (sym) {\n                        q = sym.symbol;\n                    } else if (Object.prototype.hasOwnProperty.call(q, 'value')) {\n                        q = evaluate(state, q);\n                    } else {\n                        throw new Error(`[SX] $__set: Invalid argument(s): invalid name.`);\n                    }\n                }\n                break;\n            case 'number':\n                if (q < 0) {\n                    q = scope.length + q;\n                }\n                // FALL_THRU\n            case 'string':\n                checkUnsafeVarNamesEx('$__set', scope, q);\n                if (last) {\n                    scope[q] = args[1];\n                    subst = true;\n                } else {\n                    scope = scope[q];\n                }\n                inprog = false;\n                break;\n            default:\n                throw new Error(`[SX] $__set: Invalid argument(s): invalid name.`);\n            }\n        }\n    }\n\n    if (! subst) {\n        throw new Error(`[SX] $__set: Invalid argument(s): last path is not lvalue.`);\n    }\n\n    return args[1];\n};\n\n\nexport const $boolean = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($boolean any)\n    //  -> S expr  : boolean\n    checkParamsLength('$boolean', args, 1, 1);\n\n    const car = $$first(...args);\n    if (Array.isArray(car) && car.length === 0) return false;\n    else return Boolean(car);\n};\nexport const $$boolean = $boolean(null as any, null as any);\n\n\nexport const $not = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($not any)\n    //  -> S expr  : boolean\n    checkParamsLength('$not', args, 1, 1);\n\n    return ! $$boolean(...args);\n};\nexport const $$not = $not(null as any, null as any);\n\n\n// tslint:disable-next-line:variable-name\nexport const $__and = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__and 'expr1 ... 'exprN)\n    //  -> (if all of ($boolean expr1) ... ($boolean exprN) are true) S expr  : exprN\n    //  -> (else)                                                     S expr  : expr-i (false left most)\n    checkParamsLength('$__and', args, 1);\n\n    let prev = null;\n    for (let i = 0; i < args.length; i++) {\n        const curr = evaluate(state, args[i]);\n        if (! $$boolean(curr)) {\n            return curr;\n        }\n        prev = curr;\n    }\n    return prev;\n};\n// tslint:disable-next-line:variable-name\nexport const $$__and = $__and(null as any, null as any);\n\n\n// tslint:disable-next-line:variable-name\nexport const $__or = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__or 'expr1 ... 'exprN)\n    //  -> (if any ($boolean expr1) ... ($boolean exprN) are true) S expr  : expr-i (where i: index of item first ($boolean expr-i) is to be true)\n    //  -> (else)                                                  S expr  : expr-i (false right most)\n    checkParamsLength('$__or', args, 1);\n\n    let prev = null;\n    for (let i = 0; i < args.length; i++) {\n        const curr = evaluate(state, args[i]);\n        if ($$boolean(curr)) {\n            return curr;\n        }\n        prev = curr;\n    }\n    return prev;\n};\n// tslint:disable-next-line:variable-name\nexport const $$__or = $__or(null as any, null as any);\n\n\nexport const $ambiguousEq = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: (== a b)\n    //  -> S expr  : boolean\n    checkParamsLength('$ambiguousEq', args, 2, 2);\n\n    let {car, cdr} = $$firstAndSecond(...args);\n    if (Array.isArray(car) && car.length === 0) car = null;\n    if (Array.isArray(cdr) && cdr.length === 0) cdr = null;\n    if (car === void 0) car = null;\n    if (cdr === void 0) cdr = null;\n    // tslint:disable-next-line:triple-equals\n    return car == cdr;\n};\nexport const $$ambiguousEq = $ambiguousEq(null as any, null as any);\n\n\nexport const $ambiguousNotEq = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: (!= a b)\n    //  -> S expr  : boolean\n    return ! $$ambiguousEq(...args);\n};\nexport const $$ambiguousNotEq = $ambiguousNotEq(null as any, null as any);\n\n\nexport const $lt = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: (< a b)\n    //  -> S expr  : boolean\n    checkParamsLength('$lt', args, 2, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    return toNumber(car) < toNumber(cdr);\n};\nexport const $$lt = $lt(null as any, null as any);\n\n\nexport const $le = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: (<= a b)\n    //  -> S expr  : boolean\n    checkParamsLength('$le', args, 2, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    return toNumber(car) <= toNumber(cdr);\n};\nexport const $$le = $le(null as any, null as any);\n\n\nexport const $gt = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: (> a b)\n    //  -> S expr  : boolean\n    checkParamsLength('$gt', args, 2, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    return toNumber(car) > toNumber(cdr);\n};\nexport const $$gt = $gt(null as any, null as any);\n\n\nexport const $ge = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: (>= a b)\n    //  -> S expr  : boolean\n    checkParamsLength('$ge', args, 2, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    return toNumber(car) >= toNumber(cdr);\n};\nexport const $$ge = $ge(null as any, null as any);\n\n\nexport const $typeof = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($typeof x)\n    //  -> S expr  : 'null' | 'bigint' | 'boolean' | 'function' | 'number' | 'string' | 'undefined' |\n    //               'js-symbol' | 'list' | 'object'\n    checkParamsLength('$typeof', args, 1, 1);\n\n    const car = $$first(...args);\n    if (car === null) {\n        return 'null';\n    }\n    const tyName = typeof car;\n    switch (tyName) {\n    case 'object':\n        if (Array.isArray(car)) {\n            return 'list';\n        } else {\n            return 'object';\n        }\n    case 'symbol':\n        return 'js-symbol';\n    default:\n        return tyName;\n    }\n};\nexport const $$typeof = $typeof(null as any, null as any);\n\n\nexport const $symbol = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($symbol)\n    // S expression: ($symbol name)\n    //  -> S expr  : symbol\n    checkParamsLength('$symbol', args, 1, 1);\n\n    if (typeof args[0] === 'string') {\n        return {symbol: args[0]};\n    } else {\n        throw new Error(`[SX] $symbol: Invalid argument(s): item(s) of args[0] is not string.`);\n    }\n};\nexport const $$symbol = $symbol(null as any, null as any);\n\n\n// tslint:disable-next-line:variable-name\nexport const $__gensym = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__gensym)\n    // S expression: ($__gensym name)\n    //  -> S expr  : symbol\n    checkParamsLength('$__gensym', args, 0, 1);\n\n    const varBaseName = `$__tempvar__$$ec${state.evalCount++}$$_`;\n    const tempVarSym = ({symbol: `${varBaseName}_$gensym`});\n    if (args.length === 1) {\n        const a = isSymbol(args[0]);\n        if (a) {\n            $__let(state, '')(a, tempVarSym);\n        } else if (typeof args[0] === 'string') {\n            $__let(state, '')({symbol: args[0]}, tempVarSym);\n        } else {\n            throw new Error(`[SX] $__gensym: Invalid argument(s): item(s) of args[0] is not symbol.`);\n        }\n    }\n    return tempVarSym;\n};\n\n\nexport const $isSymbol = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($is-symbol x)\n    // S expression: ($is-symbol x name)\n    //  -> S expr  : boolean\n    checkParamsLength('$isSymbol', args, 1, 2);\n\n    if (args.length === 1) {\n        return (isSymbol(args[0]) ? true : false);\n    } else {\n        if (typeof args[1] === 'string') {\n            return (isSymbol(args[0], args[1]) ? true : false);\n        } else {\n            throw new Error(`[SX] $isSymbol: Invalid argument(s): item(s) of args[1] is not string.`);\n        }\n    }\n};\nexport const $$isSymbol = $isSymbol(null as any, null as any);\n\n\nexport const $isNull = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($is-null x)\n    //  -> S expr  : boolean\n    checkParamsLength('$isNull', args, 1, 1);\n\n    return $$first(...args) === null;\n};\nexport const $$isNull = $isNull(null as any, null as any);\n\n\nexport const $isNil = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($is-nil x)\n    //  -> S expr  : boolean\n    checkParamsLength('$isNil', args, 1, 1);\n\n    const car = $$first(...args);\n    return Array.isArray(car) && car.length === 0;\n};\nexport const $$isNil = $isNil(null as any, null as any);\n\n\nexport const $isUndefined = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($is-undefined x)\n    //  -> S expr  : boolean\n    checkParamsLength('$isUndefined', args, 1, 1);\n\n    return $$first(...args) === void 0;\n};\nexport const $$isUndefined = $isUndefined(null as any, null as any);\n\n\nexport const $isList = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($is-list x)\n    //  -> S expr  : boolean\n    checkParamsLength('$isList', args, 1, 1);\n\n    return Array.isArray($$first(...args));\n};\nexport const $$isList = $isList(null as any, null as any);\n\n\nexport const $isString = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($is-string x)\n    //  -> S expr  : boolean\n    checkParamsLength('$isString', args, 1, 1);\n\n    return typeof $$first(...args) === 'string';\n};\nexport const $$isString = $isString(null as any, null as any);\n\n\nexport const $isNumber = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($is-number x)\n    //  -> S expr  : boolean\n    checkParamsLength('$isNumber', args, 1, 1);\n\n    return typeof $$first(...args) === 'number';\n};\nexport const $$isNumber = $isNumber(null as any, null as any);\n\n\nexport const $isNaN = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($is-NaN x)\n    //  -> S expr  : boolean\n    checkParamsLength('$isNaN', args, 1, 1);\n\n    return Number.isNaN($$first(...args));\n};\nexport const $$isNaN = $isNaN(null as any, null as any);\n\n\nexport const $isFinite = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($is-finate x)\n    //  -> S expr  : boolean\n    checkParamsLength('$isFinite', args, 1, 1);\n\n    return Number.isFinite($$first(...args));\n};\nexport const $$isFinite = $isFinite(null as any, null as any);\n\n\nexport const $isInteger = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($is-integer x)\n    //  -> S expr  : boolean\n    checkParamsLength('$isInteger', args, 1, 1);\n\n    return Number.isInteger($$first(...args));\n};\nexport const $$isInteger = $isInteger(null as any, null as any);\n\n\nexport const $toString = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($to-string x)\n    //  -> S expr  : string\n    checkParamsLength('$toString', args, 1, 1);\n\n    return String($$first(...args));\n};\nexport const $$toString = $toString(null as any, null as any);\n\n\nexport const $toNumber = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($to-number x)\n    //  -> S expr  : number\n    checkParamsLength('$toNumber', args, 1, 1);\n\n    return toNumber($$first(...args));\n};\nexport const $$toNumber = $toNumber(null as any, null as any);\n\n\n// tslint:disable-next-line:variable-name\nexport const $__toObject = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__# '(name value...)...)\n    //  -> JSON    : {name: value, ...}\n    const r: any = {};\n    for (const x of args) {\n        if (Array.isArray(x) && 0 < x.length) {\n            const sym = isSymbol(x[0]);\n            const keyName =\n                sym ? sym.symbol :\n                String(evaluate(state, x[0]));\n\n            checkUnsafeVarNamesEx('$__#', r, keyName);\n            if (x.length === 1) {\n                // S expression: (# ... (keyName) ...)\n                //  -> JSON    : {..., keyName: true, ...}\n                r[keyName] = true;\n            } else if (x.length === 2) {\n                // S expression: (# ... (keyName value) ...)\n                //  -> JSON    : {..., keyName: value, ...}\n                r[keyName] = evaluate(state, x[1]);\n            } else {\n                // S expression: (# ... (keyName value1 value2 ...) ...)\n                //  -> JSON    : {..., keyName: [value1, value2, ], ...}\n                r[keyName] =\n                    evaluate(state, ([{symbol: state.config.reservedNames.list}] as SxToken[])\n                    .concat(x.slice(1)));\n            }\n        } else {\n            throw new Error(`[SX] $__toObject: Invalid argument(s): args[?] is not array.`);\n        }\n    }\n    return r;\n};\n\n\nconst assignBlacklist = [\n    globalObj,\n    (Object as any).__proto__,\n    ({} as any).__proto__,\n    (Function as any).__proto__,\n];\n\nexport const $objectAssign = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($object-assign x)\n    //  -> S expr  : string\n    checkParamsLength('$objectAssign', args, 1);\n\n    if (assignBlacklist.includes(args[0])) {\n        throw new Error(`[SX] $objectAssign: Invalid argument: args[0] is blacklisted object.`);\n    }\n    return Object.assign(args[0], ...(args.slice(1)));\n};\nexport const $$objectAssign = $objectAssign(null as any, null as any);\n\n\nexport const $jsonStringify = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($json-stringify x)\n    //  -> S expr  : string\n    checkParamsLength('$jsonStringify', args, 1, 1);\n\n    return JSON.stringify($$first(...args));\n};\nexport const $$jsonStringify = $jsonStringify(null as any, null as any);\n\n\nexport const $jsonParse = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($json-parse x)\n    //  -> S expr  : object\n    checkParamsLength('$jsonParse', args, 1, 1);\n\n    const s = $$first(...args);\n    if (typeof s !== 'string') {\n        throw new Error(`[SX] $jsonParse: Invalid argument(s): args[0] is not string.`);\n    }\n    return JSON.parse(s);\n};\nexport const $$jsonParse = $jsonParse(null as any, null as any);\n\n\nexport const $now = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($now)\n    //  -> S expr  : number\n    return Date.now();\n};\nexport const $$now = $now(null as any, null as any);\n\n\nexport const $datetimeFromIso = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($datetime-from-iso str)\n    //  -> S expr  : number\n    checkParamsLength('$datetimeFromIso', args, 1, 1);\n\n    const s = $$first(...args);\n    if (typeof s !== 'string') {\n        throw new Error(`[SX] $datetimeFromIso: Invalid argument(s): args[0] is not string.`);\n    }\n    if (! /^(?:(?:-[0-9]{6,})|[0-9]{4,})-(?:[0-1][0-9])-(?:[0-3][0-9])(?:T(?:[0-2][0-9])(?:[:](?:[0-6][0-9])(?:[:](?:[0-6][0-9])(?:.[0-9]{1,})?)?)?(?:Z|[-+][0-9]{2}(?:[:]?[0-6][0-9])?)?)?$/.test(s)) {\n        throw new Error(`[SX] $datetimeFromIso: Invalid datetime (pattern unmatched): ${s}.`);\n    }\n    const dt = new Date(s).getTime();\n    if (Number.isNaN(dt)) {\n        throw new Error(`[SX] $datetimeFromIso: Invalid datetime: ${s}.`);\n    }\n    return dt;\n};\nexport const $$datetimeFromIso = $datetimeFromIso(null as any, null as any);\n\n\nexport const $datetime = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($datetime year month1-12 day)\n    // S expression: ($datetime year month1-12 day hours)\n    // S expression: ($datetime year month1-12 day hours minutes)\n    // S expression: ($datetime year month1-12 day hours minutes seconds)\n    // S expression: ($datetime year month1-12 day hours minutes seconds milliseconds)\n    //  -> S expr  : number\n    checkParamsLength('$datetime', args, 3, 7);\n\n    let s = '';\n    const year = Number(args[0]);\n    if (year >= 0) {\n        s += String(year).padStart(4, '0');\n    } else {\n        s += '-' + String(-year).padStart(6, '0');\n    }\n    // month1\n    s += '-' + String(Number(args[1])).padStart(2, '0');\n    // day\n    s += '-' + String(Number(args[2])).padStart(2, '0');\n    // hours\n    if (args.length >= 4) {\n        s += 'T' + String(Number(args[3])).padStart(2, '0');\n        // minutes\n        if (args.length >= 5) {\n            s += ':' + String(Number(args[4])).padStart(2, '0');\n        } else {\n            s += ':00';\n        }\n        // seconds\n        if (args.length >= 6) {\n            s += ':' + String(Number(args[5])).padStart(2, '0');\n        }\n        // milliseconds\n        if (args.length >= 7) {\n            s += '.' + String(Number(args[6])).padStart(3, '0').slice(0, 3);\n        }\n        s += 'Z';\n    }\n    const dt = new Date(s).getTime();\n    if (Number.isNaN(dt)) {\n        throw new Error(`[SX] $datetime: Invalid datetime: ${s}.`);\n    }\n    return dt;\n};\nexport const $$datetime = $datetime(null as any, null as any);\n\n\nexport const $datetimeLc = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($datetime-lc year month1-12 day)\n    // S expression: ($datetime-lc year month1-12 day hours)\n    // S expression: ($datetime-lc year month1-12 day hours minutes)\n    // S expression: ($datetime-lc year month1-12 day hours minutes seconds)\n    // S expression: ($datetime-lc year month1-12 day hours minutes seconds milliseconds)\n    //  -> S expr  : number\n    checkParamsLength('$datetimeLc', args, 3, 7);\n\n    let s = '';\n    const year = Number(args[0]);\n    if (year >= 0) {\n        s += String(year).padStart(4, '0');\n    } else {\n        s += '-' + String(-year).padStart(6, '0');\n    }\n    // month1\n    s += '-' + String(Number(args[1])).padStart(2, '0');\n    // day\n    s += '-' + String(Number(args[2])).padStart(2, '0');\n    // hours\n    if (args.length >= 4) {\n        s += 'T' + String(Number(args[3])).padStart(2, '0');\n        // minutes\n        if (args.length >= 5) {\n            s += ':' + String(Number(args[4])).padStart(2, '0');\n        } else {\n            s += ':00';\n        }\n        // seconds\n        if (args.length >= 6) {\n            s += ':' + String(Number(args[5])).padStart(2, '0');\n        }\n        // milliseconds\n        if (args.length >= 7) {\n            s += '.' + String(Number(args[6])).padStart(3, '0').slice(0, 3);\n        }\n    } else {\n        s += 'T00:00:00.000';\n    }\n    const dt = new Date(s).getTime();\n    if (Number.isNaN(dt)) {\n        throw new Error(`[SX] $datetimeLc: Invalid datetime: ${s}.`);\n    }\n    return dt;\n};\nexport const $$datetimeLc = $datetimeLc(null as any, null as any);\n\n\nexport const $datetimeToIsoString = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($datetime-to-iso-string number)\n    //  -> S expr  : string\n    checkParamsLength('$datetimeToIsoString', args, 1, 1);\n\n    const n = $$first(...args);\n    if (typeof n !== 'number') {\n        throw new Error(`[SX] $datetimeToIsoString: Invalid argument(s): args[0] is not number.`);\n    }\n    const dt = new Date(n);\n    if (Number.isNaN(dt.getTime())) {\n        throw new Error(`[SX] $datetimeToIsoString: Invalid datetime: ${n}.`);\n    }\n    return dt.toISOString();\n};\nexport const $$datetimeToIsoString = $datetimeToIsoString(null as any, null as any);\n\n\nexport const $datetimeToComponents = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($datetime-to-components number)\n    //  -> S expr  : list\n    checkParamsLength('$datetimeToComponents', args, 1, 1);\n\n    const n = $$first(...args);\n    if (typeof n !== 'number') {\n        throw new Error(`[SX] $datetimeToComponents: Invalid argument(s): args[0] is not number.`);\n    }\n    const dt = new Date(n);\n    if (Number.isNaN(dt.getTime())) {\n        throw new Error(`[SX] $datetimeToComponents: Invalid datetime: ${n}.`);\n    }\n    return ([\n        dt.getUTCFullYear(),\n        dt.getUTCMonth() + 1,\n        dt.getUTCDate(),\n        dt.getUTCHours(),\n        dt.getUTCMinutes(),\n        dt.getUTCSeconds(),\n        dt.getUTCMilliseconds(),\n        0, // TZ\n        dt.getUTCDay(),\n    ]);\n};\nexport const $$datetimeToComponents = $datetimeToComponents(null as any, null as any);\n\n\nexport const $datetimeToComponentsLc = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($datetime-to-components-lc number)\n    //  -> S expr  : list\n    checkParamsLength('$datetimeToComponentsLc', args, 1, 1);\n\n    const n = $$first(...args);\n    if (typeof n !== 'number') {\n        throw new Error(`[SX] $datetimeToComponentsLc: Invalid argument(s): args[0] is not number.`);\n    }\n    const dt = new Date(n);\n    if (Number.isNaN(dt.getTime())) {\n        throw new Error(`[SX] $datetimeToComponentsLc: Invalid datetime: ${n}.`);\n    }\n    return ([\n        dt.getFullYear(),\n        dt.getMonth() + 1,\n        dt.getDate(),\n        dt.getHours(),\n        dt.getMinutes(),\n        dt.getSeconds(),\n        dt.getMilliseconds(),\n        -dt.getTimezoneOffset(), // time difference between local time and UTC time, in minutes.\n                                 // If your time zone is UTC+2:00, +120 will be returned.\n        dt.getDay(),\n    ]);\n};\nexport const $$datetimeToComponentsLc = $datetimeToComponentsLc(null as any, null as any);\n\n\nexport const $match = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($match pattern-str string)\n    // S expression: ($match pattern-str options-str string)\n    //  -> S expr  : array\n    checkParamsLength('$match', args, 2, 3);\n\n    if (! state.config.enableRegExpMatchOperators) {\n        throw new Error(`[SX] $match: Operator is disabled by configuration.`);\n    }\n\n    if (args.length === 2) {\n        const m = new RegExp(args[0]);\n        return m.exec(args[1]);\n    } else {\n        const m = new RegExp(args[0], args[1]);\n        return m.exec(args[2]);\n    }\n};\nexport const $$match = $match(null as any, null as any);\n\n\nexport const $consoleLog = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($console-log expr1 ... exprN)\n    //  -> S expr  : null\n    console.log(...args);\n    return null;\n};\nexport const $$consoleLog = $consoleLog(null as any, null as any);\n\n\nexport const $consoleError = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($console-error expr1 ... exprN)\n    //  -> S expr  : null\n    console.error(...args);\n    return null;\n};\nexport const $$consoleError = $consoleError(null as any, null as any);\n\n\nexport const $consoleTrace = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($console-trace expr1 ... exprN)\n    //  -> S expr  : null\n    console.trace(...args);\n    return null;\n};\nexport const $$consoleTrace = $consoleTrace(null as any, null as any);\n\n\nexport const $consoleTime = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($console-time)\n    // S expression: ($console-time label)\n    //  -> S expr  : null\n    console.time(...args);\n    return null;\n};\nexport const $$consoleTime = $consoleTime(null as any, null as any);\n\n\nexport const $consoleTimeEnd = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($console-time-end)\n    // S expression: ($console-time-end label)\n    //  -> S expr  : null\n    console.timeEnd(...args);\n    return null;\n};\nexport const $$consoleTimeEnd = $consoleTimeEnd(null as any, null as any);\n\n\nexport const $consoleTimeLog = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($console-time-log label)\n    // S expression: ($console-time-log label value ... value)\n    //  -> S expr  : null\n    (console as any).timeLog(...args);\n    return null;\n};\nexport const $$consoleTimeLog = $consoleTimeLog(null as any, null as any);\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxFuncInfo } from '../../types';\nimport * as ops       from './core.fn';\n\n\n\nexport const operators: SxFuncInfo[] = [{\n    name: '$car',\n    fn: ops.$car,\n}, {\n    name: '$cdr',\n    fn: ops.$cdr,\n}, {\n    name: '$cons',\n    fn: ops.$cons,\n}, {\n    name: '$first',\n    fn: ops.$first,\n}, {\n    name: '$second',\n    fn: ops.$second,\n}, {\n    name: '$last',\n    fn: ops.$last,\n}, {\n    name: '$progn', // alias of $last\n    fn: ops.$last,\n}, {\n    name: '$rest',\n    fn: ops.$rest,\n}, {\n    name: '$first-and-second',\n    fn: ops.$firstAndSecond,\n}, {\n    name: '$atom',\n    fn: ops.$atom,\n}, {\n    name: '$eq',\n    fn: ops.$eq,\n}, {\n    name: '===',\n    fn: ops.$eq,\n}, {\n    name: '$not-eq',\n    fn: ops.$notEq,\n}, {\n    name: '!==',\n    fn: ops.$notEq,\n}, {\n    name: '$list',\n    fn: ops.$list,\n}, {\n    name: '$__scope',\n    fn: ops.$__scope,\n}, {\n    name: '$__global',\n    fn: ops.$__globalScope,\n}, {\n    name: '$__capture',\n    fn: ops.$__capture,\n}, {\n    name: '$__lambda',\n    fn: ops.$__lambda,\n}, {\n    name: '$__defun',\n    fn: ops.$__defun,\n}, {\n    name: '$__refun',\n    fn: ops.$__refun,\n}, {\n    name: '$__defmacro',\n    fn: ops.$__defmacro,\n}, {\n    name: '$apply',\n    fn: ops.$apply,\n}, {\n    name: '$__call',\n    fn: ops.$__call,\n}, {\n    name: '$__try',\n    fn: ops.$__try,\n}, {\n    name: '$raise',\n    fn: ops.$raise,\n}, {\n    name: '$__if',\n    fn: ops.$__if,\n}, {\n    name: '$__if-null',\n    fn: ops.$__ifNull,\n}, {\n    name: '$__cond',\n    fn: ops.$__cond,\n}, {\n    name: '$__while',\n    fn: ops.$__while,\n}, {\n    name: '$__do-while',\n    fn: ops.$__doWhile,\n}, {\n    name: '$__until',\n    fn: ops.$__until,\n}, {\n    name: '$__do-until',\n    fn: ops.$__doUntil,\n}, {\n    name: '$__repeat',\n    fn: ops.$__repeat,\n}, {\n    name: '$__for',\n    fn: ops.$__for,\n}, {\n    name: '$pipe',\n    fn: ops.$pipe,\n}, {\n    name: '$__get',\n    fn: ops.$__get,\n}, {\n    name: '$__let',\n    fn: ops.$__let,\n}, {\n    name: '$__set',\n    fn: ops.$__set,\n}, {\n    name: '$boolean',\n    fn: ops.$boolean,\n}, {\n    name: '$not',\n    fn: ops.$not,\n}, {\n    name: '$__and',\n    fn: ops.$__and,\n}, {\n    name: '$__or',\n    fn: ops.$__or,\n}, {\n    name: '==',\n    fn: ops.$ambiguousEq,\n}, {\n    name: '!=',\n    fn: ops.$ambiguousNotEq,\n}, {\n    name: '<',\n    fn: ops.$lt,\n}, {\n    name: '<=',\n    fn: ops.$le,\n}, {\n    name: '>',\n    fn: ops.$gt,\n}, {\n    name: '>=',\n    fn: ops.$ge,\n}, {\n    name: '$typeof',\n    fn: ops.$typeof,\n}, {\n    name: '$symbol',\n    fn: ops.$symbol,\n}, {\n    name: '$__gensym',\n    fn: ops.$__gensym,\n}, {\n    name: '$is-symbol',\n    fn: ops.$isSymbol,\n}, {\n    name: '$is-null',\n    fn: ops.$isNull,\n}, {\n    name: '$is-nil',\n    fn: ops.$isNil,\n}, {\n    name: '$is-undefined',\n    fn: ops.$isUndefined,\n}, {\n    name: '$is-list',\n    fn: ops.$isList,\n}, {\n    name: '$is-string',\n    fn: ops.$isString,\n}, {\n    name: '$is-number',\n    fn: ops.$isNumber,\n}, {\n    name: '$is-NaN',\n    fn: ops.$isNaN,\n}, {\n    name: '$is-finite',\n    fn: ops.$isFinite,\n}, {\n    name: '$is-integer',\n    fn: ops.$isInteger,\n}, {\n    name: '$to-string',\n    fn: ops.$toString,\n}, {\n    name: '$to-number',\n    fn: ops.$toNumber,\n}, {\n    name: '$__#',\n    fn: ops.$__toObject,\n}, {\n    name: '$object-assign',\n    fn: ops.$objectAssign,\n}, {\n    name: '$json-stringify',\n    fn: ops.$jsonStringify,\n}, {\n    name: '$now',\n    fn: ops.$now,\n}, {\n    name: '$datetime-from-iso',\n    fn: ops.$datetimeFromIso,\n}, {\n    name: '$datetime',\n    fn: ops.$datetime,\n}, {\n    name: '$datetime-lc',\n    fn: ops.$datetimeLc,\n}, {\n    name: '$datetime-to-iso-string',\n    fn: ops.$datetimeToIsoString,\n}, {\n    name: '$datetime-to-components',\n    fn: ops.$datetimeToComponents,\n}, {\n    name: '$datetime-to-components-lc',\n    fn: ops.$datetimeToComponentsLc,\n}, {\n    name: '$json-parse',\n    fn: ops.$jsonParse,\n}, {\n    name: '$match',\n    fn: ops.$match,\n}, {\n    name: '$console-log',\n    fn: ops.$consoleLog,\n}, {\n    name: '$console-error',\n    fn: ops.$consoleError,\n}, {\n    name: '$console-trace',\n    fn: ops.$consoleTrace,\n}, {\n    name: '$console-time',\n    fn: ops.$consoleTime,\n}, {\n    name: '$console-time-end',\n    fn: ops.$consoleTimeEnd,\n}, {\n    name: '$console-time-log',\n    fn: ops.$consoleTimeLog,\n}];\n\n\nexport const compilationOperators: SxFuncInfo[] = [{\n    name: '$$__lambda',\n    fn: ops.$comp$__lambda,\n}, {\n    name: '$$__defun',\n    fn: ops.$comp$__defun,\n}];\n\n\n// for backword compatibility\nexport default ([] as SxFuncInfo[]).concat(operators, compilationOperators);\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxMacroInfo,\n         SxParserState }     from '../../types';\nimport { isSymbol,\n         quote }             from '../../ast';\nimport { checkParamsLength } from '../../errors';\n\n\n\nexport const macros: SxMacroInfo[] = [{\n    name: '$scope',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($scope isBlockLocal returnMultiple ((name value) | name ...) expr ... expr)\n        //  -> S expr  : ($__scope isBlockLocal returnMultiple '((name value) | name ...) 'expr ... 'expr)\n        return [{symbol: '$__scope'},\n            list[1],\n            list[2],\n            ...(list.slice(3).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$local',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($local ((name value) | name ...) expr ... expr)\n        //  -> S expr  : ($__scope isBlockLocal=true returnMultiple=false '((name value) | name ...) 'expr ... 'expr)\n        return [{symbol: '$__scope'},\n            true,\n            false,\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$global',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($__global expr1 ... exprN)\n        //  -> S expr  : ($__global returnMultiple=false 'expr ... 'expr)\n        return [{symbol: '$__global'},\n            false,\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$clisp-let', // alias of $local\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($clisp-let ((name value) | name ...) expr ... expr)\n        //  -> S expr  : ($__scope isBlockLocal=true returnMultiple=false '((name value) | name ...) 'expr ... 'expr)\n        return [{symbol: '$__scope'},\n            true,\n            false,\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$capture',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($capture (sym1 ... symN) expr ... expr)\n        //  -> S expr  : ($__capture '(sym1 ... symN) 'expr ... 'expr)\n        return [{symbol: '$__capture'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$closure',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($closure (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\n        //  -> S expr  : ($__capture '(u-sym1 ... u-symM) ($__lambda '(sym1 ... symN) 'expr ... 'expr) )\n        const symUse = isSymbol(list[2], 'use');\n        if (! symUse) {\n            throw new Error(`[SX] $closure: Invalid syntax: missing 'use' keyword.`);\n        }\n        return [{symbol: '$__capture'}, quote(state, list[3]), quote(state, [{symbol: '$__lambda'},\n            quote(state, list[1]),\n            ...(list.slice(4).map(x => quote(state, x))),\n        ])];\n    },\n}, {\n    name: '|->',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: (|-> (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\n        //  -> S expr  : ($closure (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\n        return [{symbol: '$closure'},\n            ...list.slice(1),\n        ];\n    },\n}, {\n    name: '$lambda',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($lambda (sym1 ... symN) expr ... expr)\n        //  -> S expr  : ($__lambda '(sym1 ... symN) 'expr ... 'expr)\n        return [{symbol: '$__lambda'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '->',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($lambda (sym1 ... symN) expr ... expr)\n        //  -> S expr  : ($__lambda '(sym1 ... symN) 'expr ... 'expr)\n        return [{symbol: '$__lambda'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$defun',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($defun name (sym1 ... symN) expr ... expr)\n        //  -> S expr  : ($__defun 'name '(sym1 ... symN) 'expr ... 'expr)\n        return [{symbol: '$__defun'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$refun',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($refun name)\n        //  -> S expr  : ($__refun 'name)\n        return [{symbol: '$__refun'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '<-',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: (<- name)\n        //  -> S expr  : ($__refun 'name)\n        return [{symbol: '$__refun'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$defmacro',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($defmacro name (sym1 ... symN) expr ... expr)\n        //  -> S expr  : ($__defmacro 'name '(sym1 ... symN) 'expr ... 'expr)\n        return [{symbol: '$__defmacro'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$call',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($call thisArg symbol arg1 ... argN)\n        //  -> S expr  : ($__call thisArg 'symbol arg1 ... argN)\n        checkParamsLength('$call', list, 3);\n\n        return [{symbol: '$__call'},\n            list[1],\n            quote(state, list[2]),\n            ...(list.slice(3)),\n        ];\n    },\n}, {\n    name: '$try',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($try expr catch-expr)\n        //  -> S expr  : ($__try 't-expr 'catch-expr)\n        return [{symbol: '$__try'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$if',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($if cond t-expr f-expr)\n        //  -> S expr  : ($__if cond 't-expr 'f-expr)\n        return [{symbol: '$__if'},\n            list[1],\n            ...(list.slice(2).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$if-null',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($if-null cond null-expr)\n        //  -> S expr  : ($__if-null cont 'null-expr)\n        return [{symbol: '$__if-null'},\n            list[1],\n            ...(list.slice(2).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '??',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: (?? cond null-expr)\n        //  -> S expr  : ($__if-null cont 'null-expr)\n        return [{symbol: '$__if-null'},\n            list[1],\n            ...(list.slice(2).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$cond',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($cond cond1 expr1 ... condN exprN)\n        //  -> S expr  : ($__cond 'cond1 'expr1 ... 'condN 'exprN)\n        return [{symbol: '$__cond'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$while',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($while condition expr1 exprN)\n        //  -> S expr  : ($__while 'condition 'expr1 'exprN)\n        return [{symbol: '$__while'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$do-while',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($do-while condition expr1 exprN)\n        //  -> S expr  : ($__do-while 'condition 'expr1 'exprN)\n        return [{symbol: '$__do-while'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$until',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($until condition expr1 exprN)\n        //  -> S expr  : ($__until 'condition 'expr1 'exprN)\n        return [{symbol: '$__until'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$do-until',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($do-until condition expr1 exprN)\n        //  -> S expr  : ($__do-until 'condition 'expr1 'exprN)\n        return [{symbol: '$__do-until'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$repeat',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($repeat i of n-times expr1 exprN)\n        //  -> S expr  : ($__repeat 'i n-times 'expr1 'exprN)\n        const symOf = isSymbol(list[2], 'of');\n        if (! symOf) {\n            throw new Error(`[SX] $repeat: Invalid syntax: missing 'of' keyword.`);\n        }\n        return [{symbol: '$__repeat'},\n            quote(state, list[1]),\n            list[3],\n            ...(list.slice(4).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$for',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($for x of list expr1 exprN)\n        //  -> S expr  : ($__for 'x list 'expr1 'exprN)\n        const symOf = isSymbol(list[2], 'of');\n        if (! symOf) {\n            throw new Error(`[SX] $for: Invalid syntax: missing 'of' keyword.`);\n        }\n        return [{symbol: '$__for'},\n            quote(state, list[1]),\n            list[3],\n            ...(list.slice(4).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$get',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($get nameOrIndex1 ... nameOrIndexN)\n        //  -> S expr  : ($__get 'nameOrIndex1 ... 'nameOrIndexN)\n        return [{symbol: '$__get'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$let',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($let nameStrOrSymbol expr)\n        //  -> S expr  : ($__let 'nameStrOrSymbol expr)\n        checkParamsLength('$let', list, 3, 3);\n\n        return [{symbol: '$__let'},\n            quote(state, list[1]),\n            list[2],\n        ];\n    },\n}, {\n    name: '$clisp-defvar',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($let nameStrOrSymbol expr)\n        //  -> S expr  : ($__let 'nameStrOrSymbol expr)\n        checkParamsLength('$clisp-defvar', list, 3, 3);\n\n        return [{symbol: '$global'},\n            [{symbol: '$__let'},\n                quote(state, list[1]),\n                list[2]\n            ],\n        ];\n    },\n}, {\n    name: '$set',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($set nameOrListOfNameOrIndex expr)\n        //  -> S expr  : ($__set 'nameOrListOfNameOrIndex expr)\n        checkParamsLength('$set', list, 3, 3);\n\n        return [{symbol: '$__set'},\n            quote(state, list[1]),\n            list[2],\n        ];\n    },\n}, {\n    name: '$clisp-setq', // alias of $set\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($clisp-setq symbol expr)\n        //  -> S expr  : ($__set 'symbol expr)\n        checkParamsLength('$clisp-setq', list, 3, 3);\n\n        return [{symbol: '$__set'},\n            quote(state, list[1]),\n            list[2],\n        ];\n    },\n}, {\n    name: '$and',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($and expr1 ... exprN)\n        //  -> S expr  : ($__and 'expr1 ... 'exprN)\n        return [{symbol: '$__and'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$or',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($or expr1 ... exprN)\n        //  -> S expr  : ($__or 'expr1 ... 'exprN)\n        return [{symbol: '$__or'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$gensym',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($gensym)\n        // S expression: ($gensym name)\n        //  -> S expr  : ($__gensym 'name)\n        return [\n            {symbol: '$__gensym'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '#',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: (# (name value...)...)\n        //  -> S expr  : ($__# '(name value...)...)\n        return [\n            {symbol: '$__#'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}];\n\n\nexport const compilationMacros: SxMacroInfo[] = [{\n    name: '$$closure',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($$closure (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\n        //  -> S expr  : ($__capture '(u-sym1 ... u-symM) ($$__lambda '(sym1 ... symN) 'expr ... 'expr) )\n        const symUse = isSymbol(list[2], 'use');\n        if (! symUse) {\n            throw new Error(`[SX] $closure: Invalid syntax: missing 'use' keyword.`);\n        }\n        return [{symbol: '$__capture'}, quote(state, list[3]), quote(state, [{symbol: '$$__lambda'},\n            quote(state, list[1]),\n            ...(list.slice(4).map(x => quote(state, x))),\n        ])];\n    },\n}, {\n    name: '|=>',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: (|-> (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\n        //  -> S expr  : ($closure (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\n        return [{symbol: '$$closure'},\n            ...list.slice(1),\n        ];\n    },\n}, {\n    name: '$$lambda',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($$lambda (sym1 ... symN) expr ... expr)\n        //  -> S expr  : ($$__lambda '(sym1 ... symN) 'expr ... 'expr)\n        return [{symbol: '$$__lambda'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '=>',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($$lambda (sym1 ... symN) expr ... expr)\n        //  -> S expr  : ($$__lambda '(sym1 ... symN) 'expr ... 'expr)\n        return [{symbol: '$$__lambda'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$$defun',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($$defun name (sym1 ... symN) expr ... expr)\n        //  -> S expr  : ($$__defun 'name '(sym1 ... symN) 'expr ... 'expr)\n        return [{symbol: '$$__defun'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}];\n\n\n// for backword compatibility\nexport default ([] as SxMacroInfo[]).concat(macros, compilationMacros);\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserState,\n         SxSymbolInfo } from '../../types';\n\n\n\nexport const symbols: SxSymbolInfo[] = [\n    {name: 'nil', fn: (state: SxParserState, name: string) => []},\n    {name: 'null', fn: (state: SxParserState, name: string) => null},\n\n    {name: 'undefined', fn: (state: SxParserState, name: string) => void 0},\n\n    {name: 'true', fn: (state: SxParserState, name: string) => true},\n    {name: '#true', fn: (state: SxParserState, name: string) => true},\n    {name: '#t', fn: (state: SxParserState, name: string) => true},\n\n    {name: 'false', fn: (state: SxParserState, name: string) => false},\n    {name: '#false', fn: (state: SxParserState, name: string) => false},\n    {name: '#f', fn: (state: SxParserState, name: string) => false},\n\n    {name: '#Number:Infinity', fn: (state: SxParserState, name: string) => Number.POSITIVE_INFINITY},\n    {name: '+Infinity', fn: (state: SxParserState, name: string) => Number.POSITIVE_INFINITY},\n    {name: '-Infinity', fn: (state: SxParserState, name: string) => Number.NEGATIVE_INFINITY},\n\n    {name: '#Number:Epsilon', fn: (state: SxParserState, name: string) => Number.EPSILON},\n    {name: '#Number:MaxValue', fn: (state: SxParserState, name: string) => Number.MAX_VALUE},\n    {name: '#Number:MinValue', fn: (state: SxParserState, name: string) => Number.MIN_VALUE},\n    {name: '#Number:MinSafeInteger', fn: (state: SxParserState, name: string) => Number.MAX_SAFE_INTEGER},\n    {name: '#Number:MinSafeInteger', fn: (state: SxParserState, name: string) => Number.MIN_SAFE_INTEGER},\n\n    {name: 'NaN', fn: (state: SxParserState, name: string) => Number.NaN},\n];\n\n\nexport default symbols;\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserConfig }       from '../../types';\nimport { operators,\n         compilationOperators } from './core.operator';\nimport { macros,\n         compilationMacros }    from './core.macro';\nimport symbols                  from './core.symbol';\n\n\n\nexport default function install(config: SxParserConfig): SxParserConfig {\n    config.funcs = (config.funcs || [])\n        .concat(operators)\n        .concat(config.enableCompilationOperators ? compilationOperators : []);\n    config.macros = (config.macros || [])\n        .concat(macros)\n        .concat(config.enableCompilationOperators ? compilationMacros : []);\n    config.symbols = (config.symbols || []).concat(symbols);\n    return config;\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserState }     from '../../types';\nimport { toNumber }          from '../../evaluate';\nimport { checkParamsLength } from '../../errors';\nimport { $$first,\n         $$firstAndSecond }  from '../core/core.fn';\n\n\n\nexport const $bitLShift = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: (<< number shift)\n    //  -> S expr  : number\n    checkParamsLength('$bitLShift', args, 2, 2);\n\n    let {car, cdr} = $$firstAndSecond(...args);\n    car = toNumber(car);\n    cdr = toNumber(cdr);\n\n    if (0 <= cdr) {\n        return cdr < 32 ? car << cdr : 0;\n    } else {\n        return cdr > -32 ? car >>> (-cdr) : 0;\n    }\n};\nexport const $$bitLShift = $bitLShift(null as any, null as any);\n\n\nexport const $bitSRShift = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: (>> number shift)\n    //  -> S expr  : number\n    checkParamsLength('$bitSRShift', args, 2, 2);\n\n    let {car, cdr} = $$firstAndSecond(...args);\n    car = toNumber(car);\n    cdr = toNumber(cdr);\n\n    if (0 <= cdr) {\n        return cdr < 32 ? car >> cdr : (car & 0x080000000) ? -1 : 0;\n    } else {\n        return cdr > -32 ? car << (-cdr) : 0;\n    }\n};\nexport const $$bitSRShift = $bitSRShift(null as any, null as any);\n\n\nexport const $bitURShift = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: (>>> number shift)\n    //  -> S expr  : number\n    checkParamsLength('$bitURShift', args, 2, 2);\n\n    let {car, cdr} = $$firstAndSecond(...args);\n    car = toNumber(car);\n    cdr = toNumber(cdr);\n\n    if (0 <= cdr) {\n        return cdr < 32 ? car >>> cdr : 0;\n    } else {\n        return cdr > -32 ? car << (-cdr) : 0;\n    }\n};\nexport const $$bitURShift = $bitURShift(null as any, null as any);\n\n\nexport const $bitNot = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($bit-not number)\n    //  -> S expr  : number\n    checkParamsLength('$bitNot', args, 1, 1);\n\n    const car = $$first(...args);\n    return ~toNumber(car);\n};\nexport const $$bitNot = $bitNot(null as any, null as any);\n\n\nexport const $bitAnd = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($bit-and numberA numberB)\n    //  -> S expr  : number\n    checkParamsLength('$bitAnd', args, 2);\n\n    const car = $$first(...args);\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) & toNumber(curr), toNumber(car));\n};\nexport const $$bitAnd = $bitAnd(null as any, null as any);\n\n\nexport const $bitOr = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($bit-or numberA numberB)\n    //  -> S expr  : number\n    checkParamsLength('$bitOr', args, 2);\n\n    const car = $$first(...args);\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) | toNumber(curr), toNumber(car));\n};\nexport const $$bitOr = $bitOr(null as any, null as any);\n\n\nexport const $bitXor = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($bit-xor numberA numberB)\n    //  -> S expr  : number\n    checkParamsLength('$bitXor', args, 2);\n\n    const car = $$first(...args);\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) ^ toNumber(curr), toNumber(car));\n};\nexport const $$bitXor = $bitXor(null as any, null as any);\n\n\nexport const $add = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: (+ number1 ... numberN)\n    //  -> S expr  : number\n    checkParamsLength('$add', args, 1);\n\n    return args.reduce((prev, curr) => toNumber(prev) + toNumber(curr), 0);\n};\nexport const $$add = $add(null as any, null as any);\n\n\nexport const $sub = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: (- number1 ... numberN)\n    //  -> S expr  : number\n    checkParamsLength('$sub', args, 1);\n\n    const car = $$first(...args);\n    const last = args.slice(1);\n    if (last.length === 0) {\n        // negate\n        return -toNumber(car);\n    } else {\n        // subtract\n        return args.slice(1).reduce((prev, curr) => toNumber(prev) - toNumber(curr), toNumber(car));\n    }\n};\nexport const $$sub = $sub(null as any, null as any);\n\n\nexport const $mul = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: (* number1 ... numberN)\n    //  -> S expr  : number\n    checkParamsLength('$mul', args, 2);\n\n    const car = $$first(...args);\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) * toNumber(curr), toNumber(car));\n};\nexport const $$mul = $mul(null as any, null as any);\n\n\nexport const $sup = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: (** number1 ... numberN)\n    //  -> S expr  : number\n    checkParamsLength('$sup', args, 2);\n\n    const car = $$first(...args);\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) ** toNumber(curr), toNumber(car));\n};\nexport const $$sup = $sup(null as any, null as any);\n\n\nexport const $div = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: (/ number1 ... numberN)\n    //  -> S expr  : number\n    checkParamsLength('$div', args, 2);\n\n    const car = $$first(...args);\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) / toNumber(curr), toNumber(car));\n};\nexport const $$div = $div(null as any, null as any);\n\n\nexport const $mod = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: (% number1 ... numberN)\n    //  -> S expr  : number\n    checkParamsLength('$mod', args, 2);\n\n    const car = $$first(...args);\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) % toNumber(curr), toNumber(car));\n};\nexport const $$mod = $mod(null as any, null as any);\n\n\nexport const $max = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($max val1 ... valN)\n    //  -> S expr  : value\n    return Math.max(...(args.map(x => toNumber(x))));\n};\nexport const $$max = $max(null as any, null as any);\n\n\nexport const $min = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($min val1 ... valN)\n    //  -> S expr  : value\n    return Math.min(...(args.map(x => toNumber(x))));\n};\nexport const $$min = $min(null as any, null as any);\n\n\nexport const $avg = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($avg val1 ... valN)\n    //  -> S expr  : value\n    const a = args.map(x => toNumber(x));\n    return a.length > 0 ? a.reduce((prev, curr) => prev + curr, 0) / a.length : NaN;\n};\nexport const $$avg = $avg(null as any, null as any);\n\n\nexport const $floor = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($floor number)\n    //  -> S expr  : number\n    checkParamsLength('$floor', args, 1, 1);\n\n    return Math.floor(toNumber($$first(...args)));\n};\nexport const $$floor = $floor(null as any, null as any);\n\n\nexport const $ceil = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($ceil number)\n    //  -> S expr  : number\n    checkParamsLength('$ceil', args, 1, 1);\n\n    return Math.ceil(toNumber($$first(...args)));\n};\nexport const $$ceil = $ceil(null as any, null as any);\n\n\nexport const $round = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($round number)\n    //  -> S expr  : number\n    checkParamsLength('$round', args, 1, 1);\n\n    return Math.round(toNumber($$first(...args)));\n};\nexport const $$round = $round(null as any, null as any);\n\n\nexport const $abs = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($abs number)\n    //  -> S expr  : number\n    checkParamsLength('$abs', args, 1, 1);\n\n    return Math.abs(toNumber($$first(...args)));\n};\nexport const $$abs = $abs(null as any, null as any);\n\n\nexport const $sign = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($sign number)\n    //  -> S expr  : number\n    checkParamsLength('$sign', args, 1, 1);\n\n    return Math.sign(toNumber($$first(...args)));\n};\nexport const $$sign = $sign(null as any, null as any);\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxFuncInfo } from '../../types';\nimport * as ops       from './arithmetic.fn';\n\n\n\nexport const funcs: SxFuncInfo[] = [{\n    name: '<<',\n    fn: ops.$bitLShift,\n}, {\n    name: '$bit-l-shift',\n    fn: ops.$bitLShift,\n}, {\n    name: '>>',\n    fn: ops.$bitSRShift,\n}, {\n    name: '$bit-sr-shift',\n    fn: ops.$bitSRShift,\n}, {\n    name: '>>>',\n    fn: ops.$bitURShift,\n}, {\n    name: '$bit-ur-shift',\n    fn: ops.$bitURShift,\n}, {\n    name: '$bit-not',\n    fn: ops.$bitNot,\n}, {\n    name: '$bit-and',\n    fn: ops.$bitAnd,\n}, {\n    name: '$bit-or',\n    fn: ops.$bitOr,\n}, {\n    name: '$bit-xor',\n    fn: ops.$bitXor,\n}, {\n    name: '+',\n    fn: ops.$add,\n}, {\n    name: '$add',\n    fn: ops.$add,\n}, {\n    name: '$sum',\n    fn: ops.$add,\n}, {\n    name: '-',\n    fn: ops.$sub,\n}, {\n    name: '$sub',\n    fn: ops.$sub,\n}, {\n    name: '$neg',\n    fn: ops.$sub,\n}, {\n    name: '*',\n    fn: ops.$mul,\n}, {\n    name: '$mul',\n    fn: ops.$mul,\n}, {\n    name: '**',\n    fn: ops.$sup,\n}, {\n    name: '$sup',\n    fn: ops.$sup,\n}, {\n    name: '/',\n    fn: ops.$div,\n}, {\n    name: '$div',\n    fn: ops.$div,\n}, {\n    name: '%',\n    fn: ops.$mod,\n}, {\n    name: '$mod',\n    fn: ops.$mod,\n}, {\n    name: '$max',\n    fn: ops.$max,\n}, {\n    name: '$min',\n    fn: ops.$min,\n}, {\n    name: '$avg',\n    fn: ops.$avg,\n}, {\n    name: '$floor',\n    fn: ops.$floor,\n}, {\n    name: '$ceil',\n    fn: ops.$ceil,\n}, {\n    name: '$round',\n    fn: ops.$round,\n}, {\n    name: '$abs',\n    fn: ops.$abs,\n}, {\n    name: '$sign',\n    fn: ops.$sign,\n}];\n\n\nexport default funcs;\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxMacroInfo,\n         SxParserState }     from '../../types';\nimport { isSymbol,\n         quote }             from '../../ast';\nimport { checkParamsLength } from '../../errors';\n\n\n\nexport const macros: SxMacroInfo[] = [{\n    name: '$incl',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($incl name)\n        //  -> S expr  : ($set name ($add name 1))\n        checkParamsLength('$incl', list, 2, 2);\n\n        return [{symbol: '$set'},\n            list[1],\n            [{symbol: '$add'}, list[1], 1],\n        ];\n    },\n}, {\n    name: '++',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: (++ name)\n        //  -> S expr  : ($set name ($add name 1))\n        checkParamsLength('++', list, 2, 2);\n\n        return [{symbol: '$set'},\n            list[1],\n            [{symbol: '$add'}, list[1], 1],\n        ];\n    },\n}, {\n    name: '$decl',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($decl name)\n        //  -> S expr  : ($set name ($add name -1))\n        checkParamsLength('$decl', list, 2, 2);\n\n        return [{symbol: '$set'},\n            list[1],\n            [{symbol: '$add'}, list[1], -1],\n        ];\n    },\n}, {\n    name: '--',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: (-- name)\n        //  -> S expr  : ($set name ($add name -1))\n        checkParamsLength('--', list, 2, 2);\n\n        return [{symbol: '$set'},\n            list[1],\n            [{symbol: '$add'}, list[1], -1],\n        ];\n    },\n}, {\n    name: '$incln',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($incln name v)\n        //  -> S expr  : ($set name ($add name v))\n        checkParamsLength('$incln', list, 3, 3);\n        if (typeof list[2] !== 'number') {\n            throw new Error(`[SX] $incln: Invalid parameter: arg(1) is not number.`);\n        }\n\n        return [{symbol: '$set'},\n            list[1],\n            [{symbol: '$add'}, list[1], list[2]],\n        ];\n    },\n}, {\n    name: '+=',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: (++ name v)\n        //  -> S expr  : ($set name ($add name v))\n        checkParamsLength('+=', list, 3, 3);\n        if (typeof list[2] !== 'number') {\n            throw new Error(`[SX] +=: Invalid parameter: arg(1) is not number.`);\n        }\n\n        return [{symbol: '$set'},\n            list[1],\n            [{symbol: '$add'}, list[1], list[2]],\n        ];\n    },\n}, {\n    name: '$decln',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($decln name v)\n        //  -> S expr  : ($set name ($add name -v))\n        checkParamsLength('$decln', list, 3, 3);\n        if (typeof list[2] !== 'number') {\n            throw new Error(`[SX] $decln: Invalid parameter: arg(1) is not number.`);\n        }\n\n        return [{symbol: '$set'},\n            list[1],\n            [{symbol: '$add'}, list[1], -(list[2] as number)],\n        ];\n    },\n}, {\n    name: '-=',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: (-- name)\n        //  -> S expr  : ($set name ($add name -v))\n        checkParamsLength('-=', list, 3, 3);\n        if (typeof list[2] !== 'number') {\n            throw new Error(`[SX] -=: Invalid parameter: arg(1) is not number.`);\n        }\n\n        return [{symbol: '$set'},\n            list[1],\n            [{symbol: '$add'}, list[1], -(list[2] as number)],\n        ];\n    },\n}];\n\n\nexport default macros;\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxSymbolInfo } from '../../types';\n\n\n\nexport const symbols: SxSymbolInfo[] = [];\n\n\nexport default symbols;\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserConfig } from '../../types';\nimport operators          from './arithmetic.operator';\nimport macros             from './arithmetic.macro';\nimport symbols            from './arithmetic.symbol';\n\n\n\nexport default function install(config: SxParserConfig): SxParserConfig {\n    config.funcs = (config.funcs || []).concat(operators);\n    config.macros = (config.macros || []).concat(macros);\n    config.symbols = (config.symbols || []).concat(symbols);\n    return config;\n}\n","// Copyright (c) 2017, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\n\nexport class Query<T> {\n    public constructor(public data: T[]) {\n    }\n\n    public orderBy(condition: Array<string | string[/* colName: string, ('asc' | 'desc') */]> | ((a: T, b: T) => number)): Query<T> {\n        let fn: (a: T, b: T) => number;\n        if (Array.isArray(condition)) {\n            fn = (x: T, y: T) => {\n                for (const c of condition) {\n                    if (typeof c === 'string') {\n                        if (x[c] > y[c]) return 1;\n                        if (x[c] < y[c]) return -1;\n                    } else {\n                        const desc = c[1] === 'desc' ? -1 : 1;\n                        if (x[c[0]] > y[c[0]]) return 1 * desc;\n                        if (x[c[0]] < y[c[0]]) return -1 * desc;\n                    }\n                }\n                return 0;\n            };\n        } else {\n            fn = condition;\n        }\n        return new Query(this.data.slice(0).sort(fn));\n    }\n\n    public groupBy(condition: string[/* colName: string */] | ((a: T, b: T, index: number, array: T[]) => boolean)): Query<T[]> {\n        let fn: (a: T, b: T, index: number, array: T[]) => boolean;\n        if (Array.isArray(condition)) {\n            fn = (x: T, y: T) => {\n                for (const c of condition) {\n                    if (x[c] !== y[c]) return false;\n                }\n                return true;\n            };\n        } else{\n            fn = condition;\n        }\n        const r: T[][] = [];\n        let start = 0;\n        let i = 1;\n        for (; i < this.data.length; i++) {\n            if (! fn(this.data[start], this.data[i], i, this.data)) {\n                r.push(this.data.slice(start, i));\n                start = i;\n            }\n        }\n        r.push(this.data.slice(start, i));\n        return new Query(r);\n    }\n\n    public groupEvery(n: number | {single: number, first?: number, intermediate: number, last?: number}): Query<T[]> {\n        if (typeof n === 'number') {\n            return this.groupBy((a, b, index, array) => {\n                if ((index % n) === 0) return false;\n                return true;\n            });\n        } else {\n            const w = Object.assign({first: n.intermediate, last: n.intermediate}, n);\n            const r = this.groupBy((a, b, index, array) => {\n                if (w.single >= array.length) {\n                    if ((index % w.single) === 0) return false;\n                    return true;\n                } else if (index <= w.first) {\n                    if ((index % w.first) === 0) return false;\n                    return true;\n                } else {\n                    if (((index - w.first) % w.intermediate) === 0) return false;\n                    return true;\n                }\n            });\n            if (r.data.length === 1) {\n                if (w.single < r.data[0].length) {\n                    r.data.push([]);\n                }\n            } else {\n                if (w.first < r.data[0].length) {\n                    // case of w.first === 0\n                    r.data.unshift([]);\n                }\n            }\n            if (r.data.length > 1) {\n                if (r.data[r.data.length - 1].length > w.last) {\n                    r.data.push([]);\n                }\n            }\n            return r;\n        }\n    }\n\n    public where(fn: (value: T, index: number, array: T[]) => boolean): Query<T> {\n        return new Query(this.data.filter(fn));\n    }\n\n    public select(): T[];\n    public select<R>(fn: (value: T, index: number, array: T[]) => R): R[];\n    public select<R>(fn?: (value: T, index: number, array: T[]) => R): Array<R | T> {\n        return fn ? this.data.map(fn) : this.data as any;\n    }\n}\n\n\n\nexport function query<T>(data: T[]): Query<T> {\n    return new Query<T>(data);\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserState }     from '../../types';\nimport { toNumber,\n         evaluate }          from '../../evaluate';\nimport { checkParamsLength } from '../../errors';\nimport { $$first,\n         $$firstAndSecond }  from '../core/core.fn';\nimport { query }             from '../../../lib/data';\n\n\n\nexport const $range = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($range start end)\n    // S expression: ($range start end step)\n    //  -> S expr  : list\n    checkParamsLength('$range', args, 2, 3);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    const start = toNumber(car) || 0;\n    const stop = toNumber(cdr) || 0;\n\n    const step = (args.length > 2 ? toNumber(args[2]) || 0 : 0) || (start <= stop ? 1 : -1);\n    const n = Math.sign(stop - start) + Math.sign(step) !== 0 ?\n        (Math.floor((Math.abs(stop - start) / Math.abs(step))) + 1) : 0;\n\n    state.evalCount += n;\n    evaluate(state, 0);\n    return Array.from({length: n}, (x, i) => start + i * step);\n};\n\n\nexport const $length = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($length listOrString)\n    //  -> S expr  : number\n    checkParamsLength('$length', args, 1, 1);\n\n    const car = $$first(...args);\n    switch (typeof car) {\n    case 'object':\n        if (! ('length' in car)) {\n            break;\n        }\n        // FALL_THRU\n    case 'string':\n        return car.length;\n    }\n    throw new Error(`[SX] $length: Invalid argument type: object has no property 'length'.`);\n};\nexport const $$length = $length(null as any, null as any);\n\n\nexport const $trim = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($trim string)\n    //  -> S expr  : string\n    checkParamsLength('$trim', args, 1, 1);\n\n    const car = $$first(...args);\n    if (typeof car === 'string') {\n        return car.trim();\n    }\n    throw new Error(`[SX] $trim: Invalid argument type: args[0] is not string.`);\n};\nexport const $$trim = $trim(null as any, null as any);\n\n\nexport const $trimHead = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($trim-head string)\n    //  -> S expr  : string\n    checkParamsLength('$trimHead', args, 1, 1);\n\n    const car = $$first(...args);\n    if (typeof car === 'string') {\n        return car.trimLeft();\n    }\n    throw new Error(`[SX] $trimHead: Invalid argument type: args[0] is not string.`);\n};\nexport const $$trimHead = $trimHead(null as any, null as any);\n\n\nexport const $trimTail = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($trim-tail string)\n    //  -> S expr  : string\n    checkParamsLength('$trimTail', args, 1, 1);\n\n    const car = $$first(...args);\n    if (typeof car === 'string') {\n        return car.trimRight();\n    }\n    throw new Error(`[SX] $trimTail: Invalid argument type: args[0] is not string.`);\n};\nexport const $$trimTail = $trimTail(null as any, null as any);\n\n\nexport const $replaceAll = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($replace-all src-string match-string replacement-string)\n    //  -> S expr  : string\n    checkParamsLength('$replaceAll', args, 3, 3);\n\n    if (typeof args[0] === 'string' && typeof args[1] === 'string' && typeof args[2] === 'string') {\n        return args[0].split(args[1]).join(args[2]);\n    }\n    throw new Error(`[SX] $replaceAll: Invalid argument type: args[0] or [1] or [2] is not string.`);\n};\nexport const $$replaceAll = $replaceAll(null as any, null as any);\n\n\nexport const $split = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($split src-string match-string)\n    //  -> S expr  : (string ... string)\n    checkParamsLength('$split', args, 2, 2);\n\n    if (typeof args[0] === 'string' && typeof args[1] === 'string') {\n        return args[0].split(args[1]);\n    }\n    throw new Error(`[SX] $split: Invalid argument type: args[0] or [1] is not string.`);\n};\nexport const $$split = $split(null as any, null as any);\n\n\nexport const $join = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($join '(str1 ... strN) separator)\n    //  -> S expr  : (string ... string)\n    checkParamsLength('$join', args, 1, 2);\n\n    if (typeof Array.isArray(args[0])) {\n        if (args.length > 1) {\n            if (typeof args[1] === 'string') {\n                return args[0].join(args[1]);\n            }\n            throw new Error(`[SX] $join: Invalid argument type: args[1] is not string.`);\n        } else {\n            return args[0].join();\n        }\n    }\n    throw new Error(`[SX] $join: Invalid argument type: args[0] is not array.`);\n};\nexport const $$join = $join(null as any, null as any);\n\n\nexport const $concat = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($concat listOrString1 ... listOrStringN)\n    //  -> S expr  : listOrString\n    checkParamsLength('$concat', args, 1);\n\n    const car = $$first(...args);\n    switch (typeof car) {\n    case 'object':\n        if (! ('concat' in car)) {\n            break;\n        }\n        // FALL_THRU\n    case 'string':\n        return car.concat(...args.slice(1));\n    }\n    throw new Error(`[SX] $concat: Invalid argument type: object has no property 'concat'.`);\n};\nexport const $$concat = $concat(null as any, null as any);\n\n\nexport const $slice = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($slice start end listOrString)\n    // S expression: ($slice start listOrString)\n    //  -> S expr  : listOrString\n    checkParamsLength('$slice', args, 2, 3);\n\n    if (args.length === 3) {\n        if (typeof args[2] === 'string' || Array.isArray(args[2])) {\n            return args[2].slice(toNumber(args[0]), toNumber(args[1]));\n        }\n    }\n    if (args.length === 2) {\n        if (typeof args[1] === 'string' || Array.isArray(args[1])) {\n            return args[1].slice(toNumber(args[0]));\n        }\n    }\n    throw new Error(`[SX] $slice: Invalid argument type: args[${args.length - 1}] is not string or array.`);\n};\nexport const $$slice = $slice(null as any, null as any);\n\n\nexport const $top = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($top n listOrString)\n    //  -> S expr  : listOrString\n    checkParamsLength('$top', args, 2, 2);\n\n    if (typeof args[1] === 'string' || Array.isArray(args[1])) {\n        return args[1].slice(0, toNumber(args[0]));\n    }\n    throw new Error(`[SX] $top: Invalid argument type: args[1] is not string or array.`);\n};\nexport const $$top = $top(null as any, null as any);\n\n\nexport const $tail = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($tail n listOrString)\n    //  -> S expr  : listOrString\n    checkParamsLength('$tail', args, 2, 2);\n\n    if (typeof args[1] === 'string' || Array.isArray(args[1])) {\n        const n = -toNumber(args[0]);\n        return args[1].slice(n >= 0 || Number.isNaN(n) ? args[1].length : n);\n    }\n    throw new Error(`[SX] $tail: Invalid argument type: args[1] is not string or array.`);\n};\nexport const $$tail = $tail(null as any, null as any);\n\n\nexport const $push = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($push list value)\n    //  -> S expr  : list\n    checkParamsLength('$push', args, 2, 2);\n\n    if (typeof Array.isArray(args[0])) {\n        args[0].push(args[1]);\n        return args[0];\n    }\n    throw new Error(`[SX] $push: Invalid argument type: args[1] is not array.`);\n};\nexport const $$push = $push(null as any, null as any);\n\n\nexport const $pop = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($pop list)\n    //  -> S expr  : value\n    checkParamsLength('$pop', args, 1, 1);\n\n    if (typeof Array.isArray(args[0])) {\n        const v = args[0].pop();\n        return v;\n    }\n    throw new Error(`[SX] $pop: Invalid argument type: args[1] is not array.`);\n};\nexport const $$pop = $pop(null as any, null as any);\n\n\n// tslint:disable-next-line:variable-name\nexport const $__at = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__at index listOrString)\n    //  -> S expr  : any\n    checkParamsLength('$__at', args, 2, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    return cdr[car];\n};\n// tslint:disable-next-line:variable-name\nexport const $$__at = $__at(null as any, null as any);\n\n\nexport const $reverse = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($reverse listOrString)\n    //  -> S expr  : listOrString\n    checkParamsLength('$reverse', args, 1, 1);\n\n    const car = $$first(...args);\n    if (Array.isArray(car)) {\n        return car.slice(0).reverse();\n    }\n    throw new Error(`[SX] $reverse: Invalid argument type: args[0] is not array.`);\n};\nexport const $$reverse = $reverse(null as any, null as any);\n\n\nexport const $reverseDestructive = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($reverse! listOrString)\n    //  -> S expr  : listOrString\n    checkParamsLength('$reverse!', args, 1, 1);\n\n    const car = $$first(...args);\n    if (Array.isArray(car)) {\n        return car.reverse();\n    }\n    throw new Error(`[SX] $reverse!: Invalid argument type: args[0] is not array.`);\n};\nexport const $$reverseDestructive = $reverseDestructive(null as any, null as any);\n\n\nexport const $find = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($find list (lambda (v index array) (... boolean)))\n    //  -> S expr  : list\n    checkParamsLength('$find', args, 2, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    if (Array.isArray(car)) {\n        return car.find(cdr);\n    }\n    throw new Error(`[SX] $find: Invalid argument type: args[0] is not array.`);\n};\nexport const $$find = $find(null as any, null as any);\n\n\nexport const $filter = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($filter list (lambda (v index array) (... boolean)))\n    //  -> S expr  : list\n    checkParamsLength('$filter', args, 2, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    if (Array.isArray(car)) {\n        return car.filter(cdr);\n    }\n    throw new Error(`[SX] $filter: Invalid argument type: args[0] is not array.`);\n};\nexport const $$filter = $filter(null as any, null as any);\n\n\nexport const $map = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($map list (lambda (v index array) (... any)))\n    //  -> S expr  : list\n    checkParamsLength('$map', args, 2, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    if (Array.isArray(car)) {\n        return car.map(cdr);\n    }\n    throw new Error(`[SX] $map: Invalid argument type: args[0] is not array.`);\n};\nexport const $$map = $map(null as any, null as any);\n\n\nexport const $reduce = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($reduce list (lambda (acc v index array) (... any)) initial-value)\n    // S expression: ($reduce list (lambda (acc v index array) (... any)))\n    //  -> S expr  : list\n    checkParamsLength('$reduce', args, 2, 3);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    if (Array.isArray(car)) {\n        if (args.length < 3) {\n            return car.reduce(cdr);\n        } else {\n            return car.reduce(cdr, args[2]);\n        }\n    }\n    throw new Error(`[SX] $reduce: Invalid argument type: args[0] is not array.`);\n};\nexport const $$reduce = $reduce(null as any, null as any);\n\n\nexport const $reduceFromTail = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($reduce-from-tail list (lambda (acc v index array) (... any)) initial-value)\n    // S expression: ($reduce-from-tail list (lambda (acc v index array) (... any)))\n    //  -> S expr  : list\n    checkParamsLength('$reduceFromTail', args, 2, 3);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    if (Array.isArray(car)) {\n        if (args.length < 3) {\n            return car.reduceRight(cdr);\n        } else {\n            return car.reduceRight(cdr, args[2]);\n        }\n    }\n    throw new Error(`[SX] $reduceFromTail: Invalid argument type: args[0] is not array.`);\n};\nexport const $$reduceFromTail = $reduceFromTail(null as any, null as any);\n\n\nexport const $sort = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($sort list (lambda (a b) (... number_a-b)))\n    //  -> S expr  : list\n    checkParamsLength('$sort', args, 2, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    if (Array.isArray(car)) {\n        return car.slice(0).sort(cdr);\n    }\n    throw new Error(`[SX] $sort: Invalid argument type: args[0] is not array.`);\n};\nexport const $$sort = $sort(null as any, null as any);\n\n\nexport const $sortDestructive = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($sort! list (lambda (a b) (... number_a-b)))\n    //  -> S expr  : list\n    checkParamsLength('$sort!', args, 2, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    if (Array.isArray(car)) {\n        return car.sort(cdr);\n    }\n    throw new Error(`[SX] $sort!: Invalid argument type: args[0] is not array.`);\n};\nexport const $$sortDestructive = $sortDestructive(null as any, null as any);\n\n\nexport const $groupEvery = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($group-every optionsOrNumber (x1 ... xN))\n    //  -> S expr  : ((x1 ... ) ... ( ... xN))\n    checkParamsLength('$group-every', args, 2, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    if (! Array.isArray(cdr)) {\n        throw new Error(`[SX] $group-every: Invalid argument type: args[1] is not array.`);\n    }\n\n    return query(cdr as any[]).groupEvery(car).select();\n};\nexport const $$groupEvery = $groupEvery(null as any, null as any);\n\n\nexport const $groupBy = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($group-by conditions (x1 ... xN))\n    //  -> S expr  : ((x1 ... ) ... ( ... xN))\n    checkParamsLength('$group-by', args, 2, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    if (! Array.isArray(cdr)) {\n        throw new Error(`[SX] $group-by: Invalid argument type: args[1] is not array.`);\n    }\n\n    return query(cdr as any[]).groupBy(car).select();\n};\nexport const $$groupBy = $groupBy(null as any, null as any);\n\n\nexport const $orderBy = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($order-by conditions (x1 ... xN))\n    //  -> S expr  : (x1 ... xN)\n    checkParamsLength('$order-by', args, 2, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    if (! Array.isArray(cdr)) {\n        throw new Error(`[SX] $order-by: Invalid argument type: args[1] is not array.`);\n    }\n\n    return query(cdr as any[]).orderBy(car).select();\n};\nexport const $$orderBy = $orderBy(null as any, null as any);\n\n\nexport const $where = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($where (-> (v index array) ... boolean) (x1 ... xN))\n    //  -> S expr  : (x'1 ... x'M)\n    checkParamsLength('$where', args, 2, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    if (typeof args[0] !== 'function') {\n        throw new Error(`[SX] $where: Invalid argument type: args[0] is not function.`);\n    }\n    if (! Array.isArray(cdr)) {\n        throw new Error(`[SX] $where: Invalid argument type: args[1] is not array.`);\n    }\n\n    return query(cdr as any[]).where(car).select();\n};\nexport const $$where = $where(null as any, null as any);\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxFuncInfo } from '../../types';\nimport * as ops       from './sequence.fn';\n\n\n\nexport const funcs: SxFuncInfo[] = [{\n    name: '$range',\n    fn: ops.$range,\n}, {\n    name: '$length',\n    fn: ops.$length,\n}, {\n    name: '$trim',\n    fn: ops.$trim,\n}, {\n    name: '$trim-head',\n    fn: ops.$trimHead,\n}, {\n    name: '$trim-tail',\n    fn: ops.$trimTail,\n}, {\n    name: '$replace-all',\n    fn: ops.$replaceAll,\n}, {\n    name: '$split',\n    fn: ops.$split,\n}, {\n    name: '$join',\n    fn: ops.$join,\n}, {\n    name: '$concat',\n    fn: ops.$concat,\n}, {\n    name: '$slice',\n    fn: ops.$slice,\n}, {\n    name: '$top',\n    fn: ops.$top,\n}, {\n    name: '$tail',\n    fn: ops.$tail,\n}, {\n    name: '$push',\n    fn: ops.$push,\n}, {\n    name: '$pop',\n    fn: ops.$pop,\n}, {\n    name: '$__at',\n    fn: ops.$__at,\n}, {\n    name: '$reverse',\n    fn: ops.$reverse,\n}, {\n    name: '$reverse!',\n    fn: ops.$reverseDestructive,\n}, {\n    name: '$find',\n    fn: ops.$find,\n}, {\n    name: '$filter',\n    fn: ops.$filter,\n}, {\n    name: '$map',\n    fn: ops.$map,\n}, {\n    name: '$reduce',\n    fn: ops.$reduce,\n}, {\n    name: '$reduce-from-head',\n    fn: ops.$reduce,\n}, {\n    name: '$reduce-from-tail',\n    fn: ops.$reduceFromTail,\n}, {\n    name: '$sort',\n    fn: ops.$sort,\n}, {\n    name: '$sort!',\n    fn: ops.$sortDestructive,\n}, {\n    name: '$group-every',\n    fn: ops.$groupEvery,\n}, {\n    name: '$group-by',\n    fn: ops.$groupBy,\n}, {\n    name: '$order-by',\n    fn: ops.$orderBy,\n}, {\n    name: '$where',\n    fn: ops.$where,\n}];\n\n\nexport default funcs;\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxMacroInfo,\n         SxParserState } from '../../types';\nimport { isSymbol }      from '../../ast';\n\n\n\nexport const macros: SxMacroInfo[] = [{\n    name: '$[',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($[ index ] listOrObject)\n        //  -> S expr  : ($__at listOrObject)\n        const symOf = isSymbol(list[2], ']');\n        if (! symOf) {\n            throw new Error(`[SX] $repeat: Invalid syntax: missing ']' keyword.`);\n        }\n        return [{symbol: '$__at'},\n            list[1],\n            list[3],\n        ];\n    },\n}];\n\n\nexport default macros;\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxSymbolInfo } from '../../types';\n\n\n\nexport const symbols: SxSymbolInfo[] = [];\n\n\nexport default symbols;\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserConfig } from '../../types';\nimport operators          from './sequence.operator';\nimport macros             from './sequence.macro';\nimport symbols            from './sequence.symbol';\n\n\n\nexport default function install(config: SxParserConfig): SxParserConfig {\n    config.funcs = (config.funcs || []).concat(operators);\n    config.macros = (config.macros || []).concat(macros);\n    config.symbols = (config.symbols || []).concat(symbols);\n    return config;\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserState }     from '../../types';\nimport { checkParamsLength } from '../../errors';\nimport { $__let,\n         $__set  }           from '../core/core.fn';\n\n\n\n// tslint:disable-next-line:variable-name\nexport const $__letAsync = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__let-async 'nameStrOrSymbol promise)\n    //  -> S expr  : promise\n    checkParamsLength('$__letAsync', args, 2, 2);\n\n    let promise: Promise<any> = args[1];\n    if (typeof promise !== 'object' || typeof promise.then !== 'function') {\n        promise = Promise.resolve(promise);\n    }\n    promise = promise.then(v => {\n        try {\n            $__let(state, '')(args[0], v);\n            return v;\n        } catch (e) {\n            return Promise.reject(e);\n        }\n    });\n    return promise;\n};\n// tslint:disable-next-line:variable-name\nexport const $$__letAsync = $__letAsync(null as any, null as any);\n\n\n// tslint:disable-next-line:variable-name\nexport const $__setAsync = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__set-async 'nameOrListOfNameOrIndex promise)\n    //  -> S expr  : promise\n    checkParamsLength('$__setAsync', args, 2, 2);\n\n    let promise: Promise<any> = args[1];\n    if (typeof promise !== 'object' || typeof promise.then !== 'function') {\n        promise = Promise.resolve(promise);\n    }\n    promise = promise.then(v => {\n        try {\n            $__set(state, '')(args[0], v);\n            return v;\n        } catch (e) {\n            return Promise.reject(e);\n        }\n    });\n    return promise;\n};\n// tslint:disable-next-line:variable-name\nexport const $$__setAsync = $__setAsync(null as any, null as any);\n\n\nexport const $then = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($then promise (lambda (val) ...) (lambda (err) ...))\n    //  -> S expr  : promise\n    checkParamsLength('$then', args, 2, 3);\n\n    let promise: Promise<any> = args[0];\n    if (typeof promise !== 'object' || typeof promise.then !== 'function') {\n        promise = Promise.resolve(promise);\n    }\n    if (typeof args[2] === 'function') {\n        promise = promise.then(args[1], args[2]);\n    } else {\n        if (typeof args[1] !== 'function') {\n            throw new Error(`[SX] $then: Invalid argument(s): args[1] is not function.`);\n        }\n        promise = promise.then(args[1]);\n    }\n    return promise;\n};\nexport const $$then = $then(null as any, null as any);\n\n\nexport const $resolveAll = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($resolve-all promise1 ... promiseN)\n    //  -> S expr  : promise\n    const promises: Array<Promise<any>> = args.slice(0);\n    for (let i = 0; i < promises.length; i++) {\n        if (typeof promises[i] !== 'object' || typeof (promises[i] as any).then !== 'function') {\n            promises[i] = Promise.resolve(promises[i]);\n        }\n    }\n    return Promise.all(promises);\n};\nexport const $$resolveAll = $resolveAll(null as any, null as any);\n\n\nexport const $resolveAny = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($resolve-any promise1 ... promiseN)\n    //  -> S expr  : promise\n    const promises: Array<Promise<any>> = args.slice(0);\n    for (let i = 0; i < promises.length; i++) {\n        if (typeof promises[i] !== 'object' || typeof (promises[i] as any).then !== 'function') {\n            promises[i] = Promise.resolve(promises[i]);\n        }\n    }\n\n    // https://stackoverflow.com/questions/39940152/get-first-fulfilled-promise\n    // firstOf: This will return the value of the first fulfilled promise,\n    //          or if all reject, an array of rejection reasons.\n    const invert  = (p: Promise<any>) => new Promise((res, rej) => p.then(rej, res));\n    const firstOf = (ps: Array<Promise<any>>) => invert(Promise.all(ps.map(invert)));\n\n    return firstOf(promises);\n};\nexport const $$resolveAny = $resolveAny(null as any, null as any);\n\n\nexport const $resolvePipe = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($resolve-pipe promise<val1> (lambda (val1) ... promiseOrVal2) (lambda (val2) ... promiseOrVal3) ... (lambda (valN-1) ... promiseOrValN))\n    //  -> S expr  : promise\n    // remarks: If the formal argument lambda is a non-lambda value, the value is then piped as is.\n    checkParamsLength('$resolvePipe', args, 1);\n\n    let promise: Promise<any> = args[0];\n    if (typeof promise !== 'object' || typeof promise.then !== 'function') {\n        promise = Promise.resolve(promise);\n    }\n    const lambdas = args.slice(1);\n    for (let i = 0; i < lambdas.length; i++) {\n        if (typeof lambdas[i] !== 'function') {\n            const v = lambdas[i];\n            lambdas[i] = () => v;\n        }\n    }\n    let p = promise;\n    for (const l of lambdas) {\n        p = p.then(l);\n    }\n    return p;\n};\nexport const $$resolvePipe = $resolvePipe(null as any, null as any);\n\n\nexport const $resolveFork = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($resolve-fork promise<val1> (lambda (val1) ... promiseOrVal2a) ... (lambda (val1) ... promiseOrVal2z))\n    //  -> S expr  : (promise<val2a> ... promise<val2z>)\n    // remarks: If the formal argument lambda is a non-lambda value, the value is then piped as is.\n    checkParamsLength('$resolveFork', args, 1);\n\n    let promise: Promise<any> = args[0];\n    if (typeof promise !== 'object' || typeof promise.then !== 'function') {\n        promise = Promise.resolve(promise);\n    }\n    const lambdas = args.slice(1);\n    for (let i = 0; i < lambdas.length; i++) {\n        if (typeof lambdas[i] !== 'function') {\n            const v = lambdas[i];\n            lambdas[i] = () => v;\n        }\n    }\n\n    const resolvers = new Array(lambdas.length);\n    const rejectors = new Array(lambdas.length);\n\n    const pa: Array<Promise<any>> = [];\n    for (let i = 0; i < lambdas.length; i++) {\n        pa.push(new Promise<any>((resolve: any, reject: any) => {\n            resolvers[i] = (v: any) => {\n                let lp: Promise<any> = lambdas[i](v);\n                if (typeof lp !== 'object' || typeof lp.then !== 'function') {\n                    lp = Promise.resolve(lp);\n                }\n\n                lp\n                .then(x => resolve(x))\n                .catch(e => reject(e));\n            };\n            rejectors[i] = reject;\n        }));\n    }\n\n    promise.then(\n        v => resolvers.forEach(f => f(v)),\n        e => rejectors.forEach(f => f(e))\n    );\n\n    return pa;\n};\nexport const $$resolveFork = $resolveFork(null as any, null as any);\n\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxFuncInfo } from '../../types';\nimport * as ops       from './concurrent.fn';\n\n\n\nexport const funcs: SxFuncInfo[] = [{\n    name: '$__let-async',\n    fn: ops.$__letAsync,\n}, {\n    name: '$__set-async',\n    fn: ops.$__setAsync,\n}, {\n    name: '$then',\n    fn: ops.$then,\n}, {\n    name: '$resolve-all',\n    fn: ops.$resolveAll,\n}, {\n    name: '$resolve-any',\n    fn: ops.$resolveAny,\n}, {\n    name: '$resolve-pipe',\n    fn: ops.$resolvePipe,\n}, {\n    name: '$resolve-fork',\n    fn: ops.$resolveFork,\n}];\n\n\nexport default funcs;\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxMacroInfo,\n         SxParserState }     from '../../types';\nimport { quote }             from '../../ast';\nimport { checkParamsLength } from '../../errors';\n\n\n\nexport const macros: SxMacroInfo[] = [{\n    name: '$let-async',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($let-async nameStrOrSymbol promise)\n        //  -> S expr  : ($__let-async 'nameStrOrSymbol promise)\n        checkParamsLength('$let-async', list, 3, 3);\n\n        return [{symbol: '$__let-async'},\n            quote(state, list[1]),\n            list[2],\n        ];\n    },\n}, {\n    name: '$set-async',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($set-async nameOrListOfNameOrIndex promise)\n        //  -> S expr  : ($__set-async 'nameOrListOfNameOrIndex promise)\n        checkParamsLength('$set-async', list, 3, 3);\n\n        return [{symbol: '$__set-async'},\n            quote(state, list[1]),\n            list[2],\n        ];\n    },\n}];\n\n\nexport default macros;\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxSymbolInfo } from '../../types';\n\n\n\nexport const symbols: SxSymbolInfo[] = [];\n\n\nexport default symbols;\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserConfig } from '../../types';\nimport operators          from './concurrent.operator';\nimport macros             from './concurrent.macro';\nimport symbols            from './concurrent.symbol';\n\n\n\nexport default function install(config: SxParserConfig): SxParserConfig {\n    config.funcs = (config.funcs || []).concat(operators);\n    config.macros = (config.macros || []).concat(macros);\n    config.symbols = (config.symbols || []).concat(symbols);\n    return config;\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserConfig }   from '../../types';\nimport installCore          from '../../operators/core';\nimport installArithmetic    from '../../operators/arithmetic';\nimport installSequence      from '../../operators/sequence';\nimport installConcurrent    from '../../operators/concurrent';\nimport { SExpression,\n         SExpressionAsync } from '../../interpreters';\nimport { defaultConfig }    from '../../defaults';\n\n\n\nexport const L = (() => {\n    let config: SxParserConfig = Object.assign({}, defaultConfig);\n    config.reservedNames = Object.assign({}, config.reservedNames, {\n        Template: '$concat',\n    });\n\n    config = installCore(config);\n    config = installArithmetic(config);\n    config = installSequence(config);\n    config = installConcurrent(config);\n\n    config.stripComments = true;\n\n    return SExpression(config);\n})();\n\nexport const LS = L;\nexport const lisp = L;\n\n\n\n// tslint:disable-next-line:variable-name\nexport const L_async = (() => {\n    let config: SxParserConfig = Object.assign({}, defaultConfig);\n    config.reservedNames = Object.assign({}, config.reservedNames, {\n        Template: '$concat',\n    });\n\n    config = installCore(config);\n    config = installArithmetic(config);\n    config = installSequence(config);\n    config = installConcurrent(config);\n\n    config.stripComments = true;\n\n    return SExpressionAsync(config);\n})();\n\n// tslint:disable-next-line:variable-name\nexport const LS_async = L_async;\n// tslint:disable-next-line:variable-name\nexport const lisp_async = L_async;\n\n\n\nexport const LM = (() => {\n    let config: SxParserConfig = Object.assign({}, defaultConfig);\n    config.reservedNames = Object.assign({}, config.reservedNames, {\n        Template: '$concat',\n    });\n\n    config = installCore(config);\n    config = installArithmetic(config);\n    config = installSequence(config);\n    config = installConcurrent(config);\n\n    config.stripComments = true;\n    config.returnMultipleRoot = true;\n\n    return SExpression(config);\n})();\n\n\n\n// tslint:disable-next-line:variable-name\nexport const LM_async = (() => {\n    let config: SxParserConfig = Object.assign({}, defaultConfig);\n    config.reservedNames = Object.assign({}, config.reservedNames, {\n        Template: '$concat',\n    });\n\n    config = installCore(config);\n    config = installArithmetic(config);\n    config = installSequence(config);\n    config = installConcurrent(config);\n\n    config.stripComments = true;\n    config.returnMultipleRoot = true;\n\n    return SExpressionAsync(config);\n})();\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserState,\n         SxToken }               from '../../types';\nimport { isSymbol,\n         quote }                 from '../../ast';\nimport { evaluate,\n         getScope }              from '../../evaluate';\nimport { checkParamsLength,\n         checkUnsafeVarNamesEx } from '../../errors';\nimport { $$first,\n         $$firstAndSecond,\n         $__scope,\n         $$boolean }             from '../core/core.fn';\n\n\n\n// tslint:disable-next-line:variable-name\nexport const $__outputIf = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__outputIf cond 'expr)\n    //  -> (if cond is true ) S expr  : expr\n    //  -> (if cond is false) S expr  : ()\n    checkParamsLength('$__outputIf', args, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    let r: SxToken = [];\n    if ($$boolean(car)) {\n        if (2 < args.length) {\n            r.push({symbol: state.config.reservedNames.Template}, ...args.slice(1));\n            r = evaluate(state, r);\n        } else {\n            r = evaluate(state, cdr);\n        }\n    }\n    return r;\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__outputForOf = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__outputForOf list 'expr)\n    //  -> S expr  : (Template expr ... expr)\n    checkParamsLength('$__outputForOf', args, 2);\n\n    const car = $$first(...args);\n    const r: SxToken[] = [];\n    if (Array.isArray(car)) {\n        for (let i = 0; i < car.length; i++) {\n            const x = car[i];\n            const v = $__scope(state, name)(true, true, [\n                ['$data', quote(state, x)],\n                ['$index', i],\n                ['$array', quote(state, car)],\n                ['$parent', quote(state, getScope(state).scope)],\n            ], ...args.slice(1));\n\n            if (2 < args.length && Array.isArray(v)) {\n                r.push(...v);\n            } else {\n                r.push(v);\n            }\n        }\n    } else {\n        throw new Error(`[SX] $__outputForOf: Invalid argument(s): args[0] is not array.`);\n    }\n    // All of r items are already evaluated.\n    return evaluate(state,\n        ([{symbol: state.config.reservedNames.Template}] as SxToken[])\n        .concat(r.map(z => [{symbol: state.config.reservedNames.quote}, z])));\n};\n\n\nexport const $jsxProps = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: (@ (name value...)...)\n    //  -> JSON    : {name: value, ...}\n    const r: any = {};\n    for (const x of args) {\n        if (Array.isArray(x) && 0 < x.length) {\n            const sym = isSymbol(x[0]);\n            const keyName =\n                sym ? sym.symbol :\n                String(evaluate(state, x[0]));\n            switch (keyName) {\n            case 'style':\n                {\n                    if (x.length === 1) {\n                        // S expression: (@ ... (style) ...)\n                        //  -> JSON    : {..., style: \"\", ...}\n                        r[keyName] = \"\";\n                    } else if (x.length >= 2) {\n                        // S expression: (@ ... (style \"styleName1: styleValue1; ...\" ...) ...)\n                        // S expression: (@ ... (style (styleName1 styleValue1) ...) ...)\n                        //  -> JSON    : {..., style: {styleName1: styleValue1}, ...}\n                        const styles: object = {};\n                        for (const s of x.slice(1)) {\n                            if (Array.isArray(s) && 1 < s.length) {\n                                const styleName = String(evaluate(state, s[0]));\n                                checkUnsafeVarNamesEx('$jsxProps', styles, styleName);\n                                styles[styleName] = String(evaluate(state, s[1]));\n                            } else if (typeof s === 'string') {\n                                for (const v of s.split(';')) {\n                                    const matched = /^\\s*(\\S+)\\s*:\\s*(.*?)\\s*$/.exec(v);\n                                    if (matched) {\n                                        checkUnsafeVarNamesEx('$jsxProps', styles, matched[1]);\n                                        styles[matched[1]] = matched[2];\n                                    }\n                                }\n                            }\n                        }\n                        r[keyName] = styles;\n                    }\n                }\n                break;\n            case 'class': case 'styleClass':\n                {\n                    if (x.length === 1) {\n                        // S expression: (@ ... (class) ...)\n                        //  -> JSON    : {..., class: [], ...}\n                        r[keyName] = [];\n                    } else if (x.length >= 2) {\n                        // S expression: (@ ... (class \"className1 className2 ...\") ...)\n                        // S expression: (@ ... (class (className1 className2 ...)) ...)\n                        //  -> JSON    : {..., class: [className1 className2 ...], ...}\n                        let classes: any[] = [];\n                        for (const c of x.slice(1)) {\n                            if (Array.isArray(c)) {\n                                classes = classes.concat(c.map(z => evaluate(state, z)));\n                            } else if (typeof c === 'string') {\n                                classes = classes.concat(c.split(' '));\n                            }\n                        }\n                        const cs: string[] = [];\n                        const fn: (a: any[]) => void = (a) => a\n                            .forEach(c => (c === null || c === void 0) ?\n                                void 0 :\n                                (Array.isArray(c) ? fn(c) : cs.push(String(c))));\n                        fn(classes);\n                        r[keyName] = cs;\n                    }\n                }\n                break;\n            case 'className':\n                {\n                    if (x.length === 1) {\n                        // S expression: (@ ... (class) ...)\n                        //  -> JSON    : {..., class: \"\", ...}\n                        r[keyName] = '';\n                    } else if (x.length >= 2) {\n                        // S expression: (@ ... (class \"className1 className2 ...\") ...)\n                        // S expression: (@ ... (class (className1 className2 ...)) ...)\n                        //  -> JSON    : {..., class: \"className1 className2 ...\", ...}\n                        let classes: string = '';\n                        for (const c of x.slice(1)) {\n                            let fragment = '';\n                            if (Array.isArray(c)) {\n                                const cs: string[] = [];\n                                const fn: (a: any[]) => void = (a) => a\n                                    .map(z => evaluate(state, z))\n                                    .forEach(z => (z === null || z === void 0) ?\n                                        void 0 :\n                                        (Array.isArray(z) ? fn(z) : cs.push(String(z))));\n                                fn(c);\n                                fragment = cs.join(' ');\n                            } else if (typeof c === 'string') {\n                                fragment = c;\n                            }\n                            if (0 < classes.length) classes += ' ' + fragment;\n                            else classes = fragment;\n                        }\n                        r[keyName] = classes;\n                    }\n                }\n                break;\n            case 'dangerouslySetInnerHTML':\n                {\n                    if (x.length === 1) {\n                        r[keyName] = {__html: ''};\n                    } else if (x.length >= 2) {\n                        r[keyName] = {__html: evaluate(state, x[1])};\n                    } else {\n                        r[keyName] = {__html:\n                            evaluate(state, ([{symbol: state.config.reservedNames.list}] as SxToken[])\n                            .concat(x.slice(1)))\n                        };\n                    }\n                }\n                break;\n            case 'setInnerText':\n                {\n                    if (x.length === 1) {\n                        r[keyName] = {__text: ''};\n                    } else if (x.length >= 2) {\n                        r[keyName] = {__text: evaluate(state, x[1])};\n                    } else {\n                        r[keyName] = {__text:\n                            evaluate(state, ([{symbol: state.config.reservedNames.list}] as SxToken[])\n                            .concat(x.slice(1)))\n                        };\n                    }\n                }\n                break;\n            default:\n                {\n                    checkUnsafeVarNamesEx('$jsxProps', r, keyName);\n                    if (x.length === 1) {\n                        // S expression: (@ ... (keyName) ...)\n                        //  -> JSON    : {..., keyName: true, ...}\n                        r[keyName] = true;\n                    } else if (x.length === 2) {\n                        // S expression: (@ ... (keyName value) ...)\n                        //  -> JSON    : {..., keyName: value, ...}\n                        r[keyName] = evaluate(state, x[1]);\n                    } else {\n                        // S expression: (@ ... (keyName value1 value2 ...) ...)\n                        //  -> JSON    : {..., keyName: [value1, value2, ], ...}\n                        r[keyName] =\n                            evaluate(state, ([{symbol: state.config.reservedNames.list}] as SxToken[])\n                            .concat(x.slice(1)));\n                    }\n                }\n                break;\n            }\n        } else {\n            throw new Error(`[SX] $jsxProps: Invalid argument(s): args[?] is not array.`);\n        }\n    }\n    return r;\n};\n\n\nfunction getJsxTagsParams(state: SxParserState, ...args: any[]) {\n    let children = args;\n    let props: any = {};\n    if (0 < args.length && Array.isArray(args[0])) {\n        const sym = isSymbol(args[0][0], '@');\n\n        if (sym) {\n            props = $jsxProps(state, '')(...args[0].slice(1));\n            children = children.slice(1);\n        }\n    }\n    return {props, children};\n}\n\n\nexport const $jsxStandardTag = (state: SxParserState, name: string) => (...args: any[]) => {\n    const {props, children} = getJsxTagsParams(state, ...args);\n    return (state.config.jsx as any)(name, props, ...children);\n};\n\n\nexport const $jsxComponentTag = (component: any) => (state: SxParserState, name: string) => (...args: any[]) => {\n    const {props, children} = getJsxTagsParams(state, ...args);\n    return (state.config.jsx as any)(component, props, ...children);\n};\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxFuncInfo } from '../../types';\nimport * as ops       from './jsx.fn';\n\n\n\nexport const funcs: SxFuncInfo[] = [{\n    name: '$=__if',\n    fn: ops.$__outputIf,\n}, {\n    name: '$=__for',\n    fn: ops.$__outputForOf,\n}];\n\n\nexport default funcs;\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxMacroInfo,\n         SxParserState } from '../../types';\nimport { quote }         from '../../ast';\n\n\n\nexport const macros: SxMacroInfo[] = [{\n    name: '@',\n    fn: (state: SxParserState, name: string) => (list) => {\n        return quote(state, list);\n    },\n}, {\n    name: '$=if',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($=if cond expr)\n        //  -> S expr  : ($=__if cond 'expr)\n        return [\n            {symbol: '$=__if'},\n            list[1],\n            ...(list.slice(2).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$=for',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($=for list expr)\n        //  -> S expr  : ($=__for list 'expr)\n        return [\n            {symbol: '$=__for'},\n            list[1],\n            ...(list.slice(2).map(x => quote(state, x))),\n        ];\n    },\n}];\n\n\nexport default macros;\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxSymbolInfo } from '../../types';\n\n\n\nexport const symbols: SxSymbolInfo[] = [];\n\n\nexport default symbols;\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserConfig,\n         LsxConfig }        from '../../types';\nimport operators            from './jsx.operator';\nimport macros               from './jsx.macro';\nimport symbols              from './jsx.symbol';\n\nimport { $jsxStandardTag,\n         $jsxComponentTag } from './jsx.fn';\n\n\n\nexport default function install(config: SxParserConfig, lsxConf: LsxConfig): SxParserConfig {\n    config.funcs = (config.funcs || []).concat(operators);\n    config.macros = (config.macros || []).concat(macros);\n    config.symbols = (config.symbols || []).concat(symbols);\n\n    const components =\n        Object.entries(lsxConf.components)\n        .map(x => ({name: x[0], fn: $jsxComponentTag(x[1])}));\n\n    config.funcs = config.funcs.concat(\n        {name: config.reservedNames.Template, fn: $jsxComponentTag(lsxConf.jsxFlagment)},\n        ...components\n    );\n\n    config.funcSymbolResolverFallback = $jsxStandardTag;\n    config.jsx = lsxConf.jsx;\n    config.JsxFragment = lsxConf.jsxFlagment;\n\n    return config;\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserConfig,\n         SxToken,\n         LsxConfig,\n         SExpressionTemplateFn,\n         SExpressionAsyncTemplateFn } from '../../types';\nimport installCore          from '../../operators/core';\nimport installArithmetic    from '../../operators/arithmetic';\nimport installSequence      from '../../operators/sequence';\nimport installJsx           from '../../operators/jsx';\nimport installConcurrent    from '../../operators/concurrent';\nimport { SExpression,\n         SExpressionAsync } from '../../interpreters';\nimport { defaultConfig }    from '../../defaults';\n\n\n\nexport function LSX<R = SxToken>(lsxConf: LsxConfig): SExpressionTemplateFn<R> {\n    let config: SxParserConfig = Object.assign({}, defaultConfig);\n\n    config = installCore(config);\n    config = installArithmetic(config);\n    config = installSequence(config);\n    config = installConcurrent(config);\n    config = installJsx(config, lsxConf);\n\n    config.stripComments = true;\n\n    return SExpression(config) as any;\n}\n\n\n\nexport function LSX_async<R = SxToken>(lsxConf: LsxConfig): SExpressionAsyncTemplateFn<R> {\n    let config: SxParserConfig = Object.assign({}, defaultConfig);\n\n    config = installCore(config);\n    config = installArithmetic(config);\n    config = installSequence(config);\n    config = installConcurrent(config);\n    config = installJsx(config, lsxConf);\n\n    config.stripComments = true;\n\n    return SExpressionAsync(config) as any;\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SExpressionTemplateFn,\n         SExpressionAsyncTemplateFn } from './types';\n\n\n\nexport function runScriptTags(lisp: SExpressionTemplateFn | SExpressionAsyncTemplateFn, globals?: object, contentType = 'text/lisp') {\n    const codes = document.querySelectorAll(`script[type=\"${contentType}\"]`);\n    const cs = [];\n    for (let i = 0; i < codes.length; i++) {\n        cs.push(codes[i].innerHTML);\n    }\n    lisp = lisp.appendGlobals(globals || {});\n    return lisp(cs.join('\\n'));\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nexport * from './s-exp/types';\nexport * from './s-exp/ast';\nexport * from './s-exp/s-expression';\nexport * from './s-exp/browser';\n\n\nexport { default as installCore }         from './s-exp/operators/core';\nexport { default as installArithmetic }   from './s-exp/operators/arithmetic';\nexport { default as installSequence }     from './s-exp/operators/sequence';\nexport { default as installJsx }          from './s-exp/operators/jsx';\nexport { default as installConcurrent }   from './s-exp/operators/concurrent';\n\n\nimport { default as coreOperators }       from './s-exp/operators/core/core.operator';\nimport { default as coreMacros }          from './s-exp/operators/core/core.macro';\nimport { default as coreSymbols }         from './s-exp/operators/core/core.symbol';\n\nimport { default as arithmeticOperators } from './s-exp/operators/arithmetic/arithmetic.operator';\nimport { default as arithmeticMacros }    from './s-exp/operators/arithmetic/arithmetic.macro';\nimport { default as arithmeticSymbols }   from './s-exp/operators/arithmetic/arithmetic.symbol';\n\nimport { default as sequenceOperators }   from './s-exp/operators/sequence/sequence.operator';\nimport { default as sequenceMacros }      from './s-exp/operators/sequence/sequence.macro';\nimport { default as sequenceSymbols }     from './s-exp/operators/sequence/sequence.symbol';\n\nimport { default as jsxOperators }        from './s-exp/operators/jsx/jsx.operator';\nimport { default as jsxMacros }           from './s-exp/operators/jsx/jsx.macro';\nimport { default as jsxSymbols }          from './s-exp/operators/jsx/jsx.symbol';\n\nimport { default as concurrentOperators } from './s-exp/operators/concurrent/concurrent.operator';\nimport { default as concurrentMacros }    from './s-exp/operators/concurrent/concurrent.macro';\nimport { default as concurrentSymbols }   from './s-exp/operators/concurrent/concurrent.symbol';\n\n\nexport const builtinOperators = {\n    core: coreOperators,\n    arithmetic: arithmeticOperators,\n    sequence: sequenceOperators,\n    jsx: jsxOperators,\n    concurrent: concurrentOperators,\n};\n\nexport const builtinMacros = {\n    core: coreMacros,\n    arithmetic: arithmeticMacros,\n    sequence: sequenceMacros,\n    jsx: jsxMacros,\n    concurrent: concurrentMacros,\n};\n\nexport const builtinSymbols = {\n    core: coreSymbols,\n    arithmetic: arithmeticSymbols,\n    sequence: sequenceSymbols,\n    jsx: jsxSymbols,\n    concurrent: concurrentSymbols,\n};\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserState,\n         SxSymbol }     from './types';\n\n\n\nexport function quote(state: SxParserState, x: any) {\n    return [{symbol: state.config.reservedNames.quote}, x];\n}\n\n\nexport function isQuoted(state: SxParserState, x: any) {\n    if (Array.isArray(x) && 0 < x.length) {\n        const q = isSymbol(x);\n        if (q && q.symbol === state.config.reservedNames.quote) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\nexport function backquote(state: SxParserState, x: any) {\n    return [{symbol: state.config.reservedNames.backquote}, x];\n}\n\n\nexport function isBackquoted(state: SxParserState, x: any) {\n    if (Array.isArray(x) && 0 < x.length) {\n        const q = isSymbol(x);\n        if (q && q.symbol === state.config.reservedNames.backquote) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\nexport function wrapByUnquote(state: SxParserState, x: any) {\n    return [{symbol: state.config.reservedNames.unquote}, x];\n}\n\n\nexport function isUnquoted(state: SxParserState, x: any) {\n    if (Array.isArray(x) && 0 < x.length) {\n        const q = isSymbol(x);\n        if (q && q.symbol === state.config.reservedNames.unquote) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\nexport function spread(state: SxParserState, x: any) {\n    return [{symbol: state.config.reservedNames.spread}, x];\n}\n\n\nexport function splice(state: SxParserState, x: any) {\n    return [{symbol: state.config.reservedNames.splice}, x];\n}\n\n\nexport function isSymbol(x: any, name?: string): SxSymbol | null {\n    if (x && typeof x === 'object' && Object.prototype.hasOwnProperty.call(x, 'symbol')) {\n        if (name !== void 0) {\n            return x.symbol === name ? x : null;\n        } else {\n            return x;\n        }\n    }\n    return null;\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserState,\n         SxToken }             from '../types';\nimport { isSymbol }            from '../ast';\nimport { resolveSplice,\n         resolveMacro,\n         resolveValueSymbol,\n         getScope }            from '../evaluate';\nimport { setEvaluationCount,\n         checkUnsafeVarNamesEx,\n         checkUnsafeVarNames } from '../errors';\n\n\n\nexport function applyMacros(state: SxParserState, tok: SxToken) {\n    let r: SxToken = tok;\n    for (;;) {\n        if (Array.isArray(r)) {\n            if (r.length === 0) {\n                break;\n            }\n            r = resolveSplice(state, r);\n            const sym = isSymbol(r[0]);\n            if (sym) {\n                const m = resolveMacro(state, sym, r);\n                if (m) {\n                    r = m.fn(m.actualArgs as SxToken[]);\n                } else {\n                    break;\n                }\n            } else {\n                break;\n            }\n        } else {\n            break;\n        }\n        setEvaluationCount(state);\n    }\n    return r;\n}\n\n\nexport function stripQuote(state: SxParserState, tok: SxToken) {\n    if (! (Array.isArray(tok) && isSymbol((tok as any)[0], state.config.reservedNames.quote))) {\n        throw new Error(`[SX] stripQuote: token is not quoted.`);\n    }\n    return (tok as any)[1];\n}\n\n\nexport function stripQuoteOrPass(state: SxParserState, tok: SxToken) {\n    if (Array.isArray(tok) && isSymbol((tok as any)[0], state.config.reservedNames.quote)) {\n        return (tok as any)[1];\n    } else {\n        return tok;\n    }\n}\n\n\nexport function getScope_stateApplied(state: SxParserState) {\n    return (function() { return getScope(state); });\n}\n\n\nexport function resolveValueSymbol_dynamic(state: SxParserState, varName: string) {\n    checkUnsafeVarNames('(compiler)resolveValueSymbol_dynamic', varName);\n    return (function(){ return resolveValueSymbol(state, {symbol: varName}); });\n}\n\nexport function checkUnsafeVarNames_dynamic(name: string) {\n    return (function(varName: string){ return checkUnsafeVarNames(name, varName); });\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserState,\n         SxSymbol,\n         SxToken,\n         CompilerContext }             from '../types';\nimport { isSymbol }                    from '../ast';\nimport { checkParamsLength,\n         checkUnsafeVarNamesEx,\n         checkUnsafeVarNames }         from '../errors';\nimport { stripQuote,\n         stripQuoteOrPass,\n         getScope_stateApplied,\n         resolveValueSymbol_dynamic,\n         checkUnsafeVarNames_dynamic } from './helpers';\n\n\n\nexport function registerOperators(state: SxParserState, ctx: CompilerContext) {\n    const {\n        _$_vars,\n        ops,\n        makeScope,\n        compileToken,\n    } = ctx;\n\n\n    ops.set(state.config.reservedNames.quote, function(r: SxToken[], args: SxToken[]) {\n        let compFnBody = '';\n        _$_vars[ctx.varsCount] = r[1];\n        compFnBody += `(_$_vars[${String(ctx.varsCount++)}])`;\n        return compFnBody;\n    });\n\n\n    ops.set(state.config.reservedNames.self, function(r: SxToken[], args: SxToken[]) {\n        let compFnBody = '';\n        compFnBody += `((_$_vars[0])(${\n            args.map(x => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')}))`;\n        return compFnBody;\n    });\n\n\n    ops.set('$__if', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($__if condition 't-expr 'f-expr)\n        //  -> (if condition is true ) S expr  : t-expr\n        //  -> (if condition is false) S expr  : f-expr\n        let compFnBody = '';\n        checkParamsLength('compileToken:$__if', args, 2, 3);\n        compFnBody += `(${compileToken(r, 1)}?(${\n            compileToken([stripQuote(state, r[2])], 0)}):(${\n            compileToken([stripQuote(state, r[3])], 0)}))`;\n        return compFnBody;\n    });\n\n\n    ops.set('$__if-null', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($__if-null condition 'null-expr)\n        //  -> (if condition is not null ) S expr  : condition\n        //  -> (if condition is null)      S expr  : null-expr\n        let compFnBody = '';\n        checkParamsLength('compileToken:$__if-null', args, 2, 2);\n        compFnBody += `((()=>{let _$_rv=${compileToken(r, 1)};return _$_rv?_$_rv:(${\n            compileToken([stripQuote(state, r[2])], 0)}});})())`;\n        return compFnBody;\n    });\n\n\n    ops.set('$__cond', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($__cond 'cond1 'expr1 ... 'condN 'exprN)\n        //  -> (if (eval condI) is true ) S expr  : exprI\n        //  -> (if no matched)            S expr  : null\n        let compFnBody = '';\n        {\n            checkParamsLength('compileToken:$__cond', args, 1);\n            compFnBody += `(`;\n            for (let p = 0; p < args.length; p += 2) {\n                compFnBody += `${compileToken([stripQuote(state, args[p])], 0)}?(${\n                    compileToken([stripQuote(state, args[p + 1])], 0)}):(`;\n            }\n            compFnBody += `null`;\n            for (let p = 0; p < args.length; p += 2) {\n                compFnBody += `)`;\n            }\n            compFnBody += `)`;\n        }\n        return compFnBody;\n    });\n\n\n    ops.set('$__while', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($__while 'condition 'expr1 ... 'exprN)\n        //  -> (if condition is true at least 1 or more times) S expr  : exprN\n        //  -> (else)                                          S expr  : null\n        let compFnBody = '';\n        checkParamsLength('compileToken:$__while', args, 1);\n        compFnBody += `((()=>{let _$_rv=null;while(${\n            compileToken([stripQuote(state, r[1])], 0)}){_$_rv=${\n            r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')\n            }}return _$_rv})())`;\n        return compFnBody;\n    });\n\n\n    ops.set('$__do-while', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($__do-while 'condition 'expr1 ... 'exprN)\n        //  -> (if condition is true at least 1 or more times) S expr  : exprN\n        //  -> (else)                                          S expr  : null\n        let compFnBody = '';\n        checkParamsLength('compileToken:$__do-until', args, 1);\n        compFnBody += `((()=>{let _$_rv=null;do{_$_rv=${\n            r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')}}}while(${\n            compileToken([stripQuote(state, r[1])], 0)})return _$_rv)())`;\n        return compFnBody;\n    });\n\n\n    ops.set('$__until', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($__until 'condition 'expr1 ... 'exprN)\n        //  -> (if condition is true at least 1 or more times) S expr  : exprN\n        //  -> (else)                                          S expr  : null\n        let compFnBody = '';\n        checkParamsLength('compileToken:$__until', args, 1);\n        compFnBody += `((()=>{let _$_rv=null;while(!${\n            compileToken([stripQuote(state, r[1])], 0)}){_$_rv=${\n            r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')\n            }}return _$_rv})())`;\n        return compFnBody;\n    });\n\n\n    ops.set('$__do-until', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($__do-until 'condition 'expr1 ... 'exprN)\n        //  -> (if condition is true at least 1 or more times) S expr  : exprN\n        //  -> (else)                                          S expr  : null\n        let compFnBody = '';\n        checkParamsLength('compileToken:$__do-until', args, 1);\n        compFnBody += `((()=>{let _$_rv=null;do{_$_rv=${\n            r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')}}}while(!${\n            compileToken([stripQuote(state, r[1])], 0)})return _$_rv)())`;\n        return compFnBody;\n    });\n\n\n    ops.set('$__repeat', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($__repeat 'i n-times 'expr1 ... 'exprN)\n        //  -> (if n > 0) S expr  : exprN\n        //  -> (else)     S expr  : null\n        let compFnBody = '';\n        checkParamsLength('compileToken:$__repeat', args, 2);\n        if (! isSymbol(args[0])) {\n            throw new Error(`[SX] compileToken: $__repeat : args[0] is not symbol.`);\n        }\n        makeScope(() => {\n            const name = 'v' + ctx.varNamesCount++;\n            ctx.varNames.set((args[0] as SxSymbol).symbol, name);\n            compFnBody += `(((_$_n)=>{let _$_rv=null;for(let ${name}=0;${name}<_$_n;${name}++){_$_rv=${\n                r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')\n                }}return _$_rv})(${compileToken(args, 1)}))`;\n        });\n        return compFnBody;\n    });\n\n\n    ops.set('$__for', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($__for 'x list 'expr1 ... 'exprN)\n        //  -> (if list.length > 0) S expr  : exprN\n        //  -> (else)               S expr  : null\n        let compFnBody = '';\n        checkParamsLength('compileToken:$__for', args, 2);\n        if (! isSymbol(args[0])) {\n            throw new Error(`[SX] compileToken: $__for : args[0] is not symbol.`);\n        }\n        makeScope(() => {\n            const name = 'v' + ctx.varNamesCount++;\n            ctx.varNames.set((args[0] as SxSymbol).symbol, name);\n            compFnBody += `(((_$_l)=>{let _$_rv=null;for(const ${name} of _$_l){_$_rv=${\n                r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')\n                }}return _$_rv})(${compileToken(args, 1)}))`;\n        });\n        return compFnBody;\n    });\n\n\n    ops.set('$__scope', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($__scope isBlockLocal returnMultiple '((name value) | name ...) 'expr1 ... 'exprN)\n        //  -> (if returnMultiple)  S expr  : [expr1 ... exprN]\n        //  -> (else)               S expr  : exprN\n        let compFnBody = '';\n        checkParamsLength('compileToken:$__scope', args, 2);\n        // r[1]: isBlockLocal\n        // r[2]: returnMultiple\n        if (! Array.isArray(r[3])) {\n            throw new Error(`[SX] compileToken: $__scope : args[2] is not array.`);\n        }\n        makeScope(() => {\n            for (const x of stripQuote(state, r[3]) as any[]) {\n                let name = '';\n                if (Array.isArray(x)) {\n                    if (x.length < 1) {\n                        throw new Error(`[SX] compileToken: $__scope : args[0][?] is too short.`);\n                    }\n                    if (! isSymbol(x[0])) {\n                        throw new Error(`[SX] compileToken: $__scope : args[0][?][0] is not symbol.`);\n                    }\n                    name = x[0].symbol;\n                    compFnBody += `(${'v' + ctx.varNamesCount}=${compileToken(x, 1)})`;\n                } else {\n                    if (! isSymbol(x)) {\n                        throw new Error(`[SX] compileToken: $__scope : args[0][?] is not symbol.`);\n                    }\n                    name = x.symbol;\n                }\n                ctx.varDefs += `var v${ctx.varNamesCount}=void 0;`;\n                ctx.varNames.set(name, 'v' + ctx.varNamesCount++);\n            }\n            const s = `${r.slice(4).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')}`;\n            compFnBody += r[2] ? `[${s}]` : `(${s})`;\n        });\n        return compFnBody;\n    });\n\n\n    ops.set('$__try', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($__try 'expr 'catch-expr)\n        //  ->                               S expr  : expr\n        //  -> (if error is raised in expr)  S expr  : catch-expr\n        let compFnBody = '';\n        checkParamsLength('compileToken:$__try', args, 1, 2);\n        compFnBody += `((()=>{try{${\n            compileToken([stripQuote(state, r[1])], 0)}}catch(e${\n            ctx.varNamesCount}){let e${ctx.varNamesCount + 1}=(_$_vars[${String(ctx.varsCount)}])();`;\n        _$_vars[ctx.varsCount++] = getScope_stateApplied(state);\n        makeScope(() => {\n            ctx.varNames.set('$error', 'e' + ctx.varNamesCount++);\n            ctx.varNames.set('$parent', 'e' + ctx.varNamesCount++);\n            compFnBody += `${\n                compileToken([stripQuote(state, r[2])], 0)}}})())`;\n        });\n        return compFnBody;\n    });\n\n\n    ops.set(state.config.reservedNames.raise, function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($raise 'expr)\n        //  -> S expr  : -\n        let compFnBody = '';\n        compFnBody += `((()=>{throw ${\n            compileToken([stripQuoteOrPass(state, r[1])], 0)}})())`;\n        return compFnBody;\n    });\n\n\n    ops.set('$boolean', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($boolean any)\n        //  -> S expr  : boolean\n        let compFnBody = '';\n        checkParamsLength('compileToken:$boolean', args, 1, 1);\n        compFnBody += `((x0=${compileToken(args, 0)\n            }),(Array.isArray(x0)&&x0.length===0?false:boolean(x0)))`;\n        return compFnBody;\n    });\n\n\n    ops.set('$__get', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($__get 'nameOrIndex1 ... 'nameOrIndexN)\n        //  -> S expr  : any\n        let compFnBody = '';\n        checkParamsLength('compileToken:$__get', args, 1);\n        const quoted = stripQuote(state, r[1]);\n        const name = isSymbol(quoted) ? quoted.symbol : (typeof quoted === 'string' ? quoted : null);\n        if (typeof name !== 'string') {\n            throw new Error(`[SX] compileToken: $__get : operand is not symbol: ${JSON.stringify(r[1])}.`);\n        }\n        let vName = '';\n        if (ctx.varNames.has(name)) {\n            vName = ctx.varNames.get(name) as string;\n        } else {\n            _$_vars[ctx.varsCount] = resolveValueSymbol_dynamic(state, name);\n            vName = `_$_vars[${String(ctx.varsCount++)}]`;\n        }\n        const regToVars = (symName: string) => {\n            _$_vars[ctx.varsCount] = symName;\n            return `_$_vars[${String(ctx.varsCount++)}]`;\n        };\n        compFnBody += `((${vName})${r.slice(2).map((x, idx, arr) => `[${\n            isSymbol(arr[idx]) ?\n                regToVars((arr as any)[idx].symbol) :\n                compileToken(arr, idx)}]`).join('')})`;\n        return compFnBody;\n    });\n\n\n    ops.set('$__let', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($__let 'nameStrOrSymbol expr)\n        //  -> S expr  : any\n        let compFnBody = '';\n        checkParamsLength('compileToken:$__let', args, 2, 2);\n        const quoted = stripQuote(state, r[1]);\n        const name = isSymbol(quoted) ? quoted.symbol : (typeof quoted === 'string' ? quoted : null);\n        if (typeof name !== 'string') {\n            throw new Error(`[SX] compileToken: $__let : operand is not rvalue: ${JSON.stringify(r[1])}.`);\n        }\n        if (! ctx.varNames.has(name)) {\n            ctx.varDefs += `var v${ctx.varNamesCount}=void 0;`;\n            ctx.varNames.set(name, 'v' + ctx.varNamesCount++);\n        }\n        compFnBody += `(${ctx.varNames.get(name)}=${compileToken(r, 2)})`;\n        return compFnBody;\n    });\n\n\n    ops.set('$__set', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($__set 'nameOrListOfNameOrIndex expr)\n        //  -> S expr  : any\n        let compFnBody = '';\n        checkParamsLength('compileToken:$__set', args, 2);\n        const quoted = stripQuote(state, r[1]);\n        const name = isSymbol(quoted) ?\n            quoted.symbol :\n            (typeof quoted === 'string' ?\n                quoted :\n                (Array.isArray(quoted) ?\n                    (isSymbol(quoted[0]) ?\n                        quoted[0].symbol :\n                        (typeof quoted[0] === 'string' ? quoted[0] : null)\n                    ) :\n                    null\n                )\n            );\n        if (typeof name !== 'string') {\n            throw new Error(`[SX] compileToken: $__set : operand is not rvalue: ${JSON.stringify(r[1])}.`);\n        }\n        let vName = '';\n        if (ctx.varNames.has(name)) {\n            vName = ctx.varNames.get(name) as string;\n        } else {\n            _$_vars[ctx.varsCount] = resolveValueSymbol_dynamic(state, name);\n            vName = `_$_vars[${String(ctx.varsCount++)}]`;\n        }\n        const regToVars = (symName: string) => {\n            _$_vars[ctx.varsCount] = checkUnsafeVarNames('compileToken:$__set', symName);\n            return `_$_vars[${String(ctx.varsCount++)}]`;\n        };\n        let checkNameCalled = false;\n        let checkNamePos = '';\n        const checkName = (str: string) => {\n            if (! checkNameCalled) {\n                _$_vars[ctx.varsCount] = checkUnsafeVarNames_dynamic('compileToken:$__set');\n                checkNamePos = String(ctx.varsCount++);\n                checkNameCalled = true;\n            }\n            return `(_$_vars[${checkNamePos}](${str}))`;\n        };\n        compFnBody += `((${vName})${(Array.isArray(quoted) ? quoted.slice(1) : []).map((x, idx, arr) => `[${\n            isSymbol(arr[idx]) ?\n                regToVars((arr as any)[idx].symbol) :\n                checkName(compileToken(arr, idx))}]`).join('')}=${compileToken(r, 2)})`;\n        return compFnBody;\n    });\n\n\n    ops.set(state.config.reservedNames.not, function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($not any)\n        //  -> S expr  : boolean\n        let compFnBody = '';\n        checkParamsLength('compileToken:$not', args, 1, 1);\n        compFnBody += `(!${compileToken(args, 0)})`;\n        return compFnBody;\n    });\n\n\n    ops.set('$__and', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($__and 'expr1 ... 'exprN)\n        //  -> (if all of ($boolean expr1) ... ($boolean exprN) are true) S expr  : exprN\n        //  -> (else)                                                     S expr  : expr-i (false left most)\n        let compFnBody = '';\n        checkParamsLength('compileToken:$__and', args, 1);\n        compFnBody += `(${args.map((x) => compileToken([stripQuote(state, x)], 0)).join('&&')})`;\n        return compFnBody;\n    });\n\n\n    ops.set('$__or', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($__or 'expr1 ... 'exprN)\n        //  -> (if any ($boolean expr1) ... ($boolean exprN) are true) S expr  : expr-i (where i: index of item first ($boolean expr-i) is to be true)\n        //  -> (else)                                                  S expr  : expr-i (false right most)\n        let compFnBody = '';\n        checkParamsLength('compileToken:$__or', args, 1);\n        compFnBody += `(${args.map((x) => compileToken([stripQuote(state, x)], 0)).join('||')})`;\n        return compFnBody;\n    });\n\n\n    ops.set('===', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($eq arg1 arg2)\n        //  -> (if arg1 === arg2)  S expr  : true\n        //  -> (else)              S expr  : false\n        let compFnBody = '';\n        checkParamsLength('compileToken:===', args, 2, 2);\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('===')})`;\n        return compFnBody;\n    });\n\n\n    ops.set('!==', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($not-eq arg1 arg2)\n        //  -> (if arg1 !== arg2)  S expr  : true\n        //  -> (else)              S expr  : false\n        let compFnBody = '';\n        checkParamsLength('compileToken:!==', args, 2, 2);\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('!==')})`;\n        return compFnBody;\n    });\n\n\n    ops.set('==', function(r: SxToken[], args: SxToken[]) {\n        // S expression: (== a b)\n        //  -> S expr  : boolean\n        let compFnBody = '';\n        checkParamsLength('compileToken:==', args, 2, 2);\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('==')})`;\n        return compFnBody;\n    });\n\n\n    ops.set('!=', function(r: SxToken[], args: SxToken[]) {\n        // S expression: (!= a b)\n        //  -> S expr  : boolean\n        let compFnBody = '';\n        checkParamsLength('compileToken:!=', args, 2, 2);\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('!=')})`;\n        return compFnBody;\n    });\n\n\n    ops.set('<', function(r: SxToken[], args: SxToken[]) {\n        // S expression: (< a b)\n        //  -> S expr  : boolean\n        let compFnBody = '';\n        checkParamsLength('compileToken:<', args, 2, 2);\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('<')})`;\n        return compFnBody;\n    });\n\n\n    ops.set('<=', function(r: SxToken[], args: SxToken[]) {\n        // S expression: (<= a b)\n        //  -> S expr  : boolean\n        let compFnBody = '';\n        checkParamsLength('compileToken:<=', args, 2, 2);\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('<=')})`;\n        return compFnBody;\n    });\n\n\n    ops.set('>', function(r: SxToken[], args: SxToken[]) {\n        // S expression: (> a b)\n        //  -> S expr  : boolean\n        let compFnBody = '';\n        checkParamsLength('compileToken:>', args, 2, 2);\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('>')})`;\n        return compFnBody;\n    });\n\n\n    ops.set('>=', function(r: SxToken[], args: SxToken[]) {\n        // S expression: (>= a b)\n        //  -> S expr  : boolean\n        let compFnBody = '';\n        checkParamsLength('compileToken:<=', args, 2, 2);\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('>=')})`;\n        return compFnBody;\n    });\n\n\n    ops.set('$concat', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($concat listOrString1 ... listOrStringN)\n        //  -> S expr  : listOrString\n        let compFnBody = '';\n        checkParamsLength('compileToken:$concat', args, 1);\n        let w1 = '';\n        if (Array.isArray(args[0]) && isSymbol((args[0] as any)[0], state.config.reservedNames.spread)) {\n            const w0 = compileToken(args[0] as any, 1);\n            w1 = `(${w0}[0]).concat((${w0}.length>1?${w0}[1]:(typeof ${w0}[0]==='string'?'':[])),`;\n        } else {\n            w1 = `${compileToken(args as any, 0)}.concat(`;\n        }\n        compFnBody += `(${w1}${\n            args.slice(1).map((x, idx, arr) => compileToken(arr, idx)).join(',')}))`;\n        return compFnBody;\n    });\n\n\n    ops.set('+', function(r: SxToken[], args: SxToken[]) {\n        // S expression: (+ number1 ... numberN)\n        //  -> S expr  : number\n        let compFnBody = '';\n        checkParamsLength('compileToken:+', args, 1);\n\n        let hasSpread = false;\n        args.map((x, idx, arr) => {\n            if (Array.isArray(x) && isSymbol((x as any)[0], state.config.reservedNames.spread)) {\n                hasSpread = true;\n            }\n        });\n        if (hasSpread) {\n            compFnBody += `((()=>{let _$_rv=[];${\n                args.map((x, idx, arr) => `_$_rv.push(${compileToken(arr, idx)})`).join(';')\n            };return _$_rv.reduce((x,y)=>x+y);})())`;\n        } else {\n            compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('+')})`;\n        }\n        return compFnBody;\n    });\n\n\n    ops.set('-', function(r: SxToken[], args: SxToken[]) {\n        // S expression: (- number1 ... numberN)\n        //  -> S expr  : number\n        let compFnBody = '';\n        checkParamsLength('compileToken:-', args, 1);\n\n        let hasSpread = false;\n        args.map((x, idx, arr) => {\n            if (Array.isArray(x) && isSymbol((x as any)[0], state.config.reservedNames.spread)) {\n                hasSpread = true;\n            }\n        });\n        if (hasSpread) {\n            compFnBody += `((()=>{let _$_rv=[];${\n                args.map((x, idx, arr) => `_$_rv.push(${compileToken(arr, idx)})`).join(';')\n                };return (_$_rv.length>1?(_$_rv.reduce((x,y)=>x-y)):(_$_rv.length>0?-_$_rv[0]:NaN));})())`;\n        } else {\n            compFnBody += `(${r.length > 2 ?\n                args.map((x, idx, arr) => compileToken(arr, idx)).join('-') :\n                `-(${String(compileToken(r, 1))})`})`;\n        }\n        return compFnBody;\n    });\n\n\n    ops.set('*', function(r: SxToken[], args: SxToken[]) {\n        // S expression: (* number1 ... numberN)\n        //  -> S expr  : number\n        let compFnBody = '';\n        checkParamsLength('compileToken:*', args, 2);\n\n        let hasSpread = false;\n        args.map((x, idx, arr) => {\n            if (Array.isArray(x) && isSymbol((x as any)[0], state.config.reservedNames.spread)) {\n                hasSpread = true;\n            }\n        });\n        if (hasSpread) {\n            compFnBody += `((()=>{let _$_rv=[];${\n                args.map((x, idx, arr) => `_$_rv.push(${compileToken(arr, idx)})`).join(';')\n                };return _$_rv.reduce((x,y)=>x*y);})())`;\n        } else {\n            compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('*')})`;\n        }\n        return compFnBody;\n    });\n\n\n    ops.set('**', function(r: SxToken[], args: SxToken[]) {\n        // S expression: (** number1 ... numberN)\n        //  -> S expr  : number\n        let compFnBody = '';\n        checkParamsLength('compileToken:**', args, 2);\n\n        let hasSpread = false;\n        args.map((x, idx, arr) => {\n            if (Array.isArray(x) && isSymbol((x as any)[0], state.config.reservedNames.spread)) {\n                hasSpread = true;\n            }\n        });\n        if (hasSpread) {\n            compFnBody += `((()=>{let _$_rv=[];${\n                args.map((x, idx, arr) => `_$_rv.push(${compileToken(arr, idx)})`).join(';')\n                };return _$_rv.reduce((x,y)=>x**y);})())`;\n        } else {\n            compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('**')})`;\n        }\n        return compFnBody;\n    });\n\n\n    ops.set('/', function(r: SxToken[], args: SxToken[]) {\n        // S expression: (/ number1 ... numberN)\n        //  -> S expr  : number\n        let compFnBody = '';\n        checkParamsLength('compileToken:/', args, 2);\n\n        let hasSpread = false;\n        args.map((x, idx, arr) => {\n            if (Array.isArray(x) && isSymbol((x as any)[0], state.config.reservedNames.spread)) {\n                hasSpread = true;\n            }\n        });\n        if (hasSpread) {\n            compFnBody += `((()=>{let _$_rv=[];${\n                args.map((x, idx, arr) => `_$_rv.push(${compileToken(arr, idx)})`).join(';')\n                };return _$_rv.reduce((x,y)=>x/y);})())`;\n        } else {\n            compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('/')})`;\n        }\n        return compFnBody;\n    });\n\n\n    ops.set('%', function(r: SxToken[], args: SxToken[]) {\n        // S expression: (% number1 ... numberN)\n        //  -> S expr  : number\n        let compFnBody = '';\n        checkParamsLength('compileToken:%', args, 2);\n\n        let hasSpread = false;\n        args.map((x, idx, arr) => {\n            if (Array.isArray(x) && isSymbol((x as any)[0], state.config.reservedNames.spread)) {\n                hasSpread = true;\n            }\n        });\n        if (hasSpread) {\n            compFnBody += `((()=>{let _$_rv=[];${\n                args.map((x, idx, arr) => `_$_rv.push(${compileToken(arr, idx)})`).join(';')\n                };return _$_rv.reduce((x,y)=>x%y);})())`;\n        } else {\n            compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('%')})`;\n        }\n        return compFnBody;\n    });\n\n\n    ops.set('<<', function(r: SxToken[], args: SxToken[]) {\n        // S expression: (<< number shift)\n        //  -> S expr  : number\n        let compFnBody = '';\n        checkParamsLength('compileToken:<<', args, 2, 2);\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('<<')})`;\n        return compFnBody;\n    });\n\n\n    ops.set('>>', function(r: SxToken[], args: SxToken[]) {\n        // S expression: (>> number shift)\n        //  -> S expr  : number\n        let compFnBody = '';\n        checkParamsLength('compileToken:>>', args, 2, 2);\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('>>')})`;\n        return compFnBody;\n    });\n\n\n    ops.set('>>>', function(r: SxToken[], args: SxToken[]) {\n        // S expression: (>>> number shift)\n        //  -> S expr  : number\n        let compFnBody = '';\n        checkParamsLength('compileToken:>>>', args, 2, 2);\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('>>>')})`;\n        return compFnBody;\n    });\n\n\n    ops.set('$bit-not', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($bit-not number)\n        //  -> S expr  : number\n        let compFnBody = '';\n        checkParamsLength('compileToken:$bit-not', args, 1, 1);\n        compFnBody += `(~(${compileToken(r, 1)}))`;\n        return compFnBody;\n    });\n\n\n    ops.set('$bit-and', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($bit-and numberA numberB)\n        //  -> S expr  : number\n        let compFnBody = '';\n        checkParamsLength('compileToken:$bit-and', args, 2, 2);\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('&')})`;\n        return compFnBody;\n    });\n\n\n    ops.set('$bit-or', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($bit-or numberA numberB)\n        //  -> S expr  : number\n        let compFnBody = '';\n        checkParamsLength('compileToken:$bit-or', args, 2, 2);\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('|')})`;\n        return compFnBody;\n    });\n\n\n    ops.set('$bit-xor', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($bit-xor numberA numberB)\n        //  -> S expr  : number\n        let compFnBody = '';\n        checkParamsLength('compileToken:$bit-xor', args, 2, 2);\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('^')})`;\n        return compFnBody;\n    });\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserState,\n         SxSymbol,\n         SxToken,\n         SxFuncInfo,\n         CompilerOperator,\n         CompilerContext  }           from './types';\nimport { isSymbol }                   from './ast';\nimport { getCapturedScopes,\n         optimizeTailCall }           from './evaluate';\nimport { checkUnsafeVarNamesEx }      from './errors';\nimport { applyMacros,\n         stripQuoteOrPass,\n         resolveValueSymbol_dynamic } from './compile.ops/helpers';\nimport { registerOperators }          from './compile.ops';\n\n\n\n// tslint:disable-next-line:variable-name\nfunction compileCore(state: SxParserState, formalArgs: SxSymbol[], lastIsSpread: boolean, fnBody: any[], _$_vars: any[]) {\n\n    function makeScope(scoped: () => void) {\n        const varNamesCopy = new Map<string, string>();\n        for (const x of ctx.varNames.entries()) {\n            varNamesCopy.set(x[0], x[1]);\n        }\n        scoped();\n        ctx.varNames = varNamesCopy;\n    }\n\n\n    function compileValue(b: any) {\n        let compFnBody = '';\n        if (b === null) {\n            compFnBody += '(null)';\n        } else if (b === void 0) {\n            compFnBody += '(void 0)';\n        } else switch (typeof b) {\n        case 'boolean': case 'number':\n            compFnBody += `(${String(b)})`;\n            break;\n        case 'object':\n            if (isSymbol(b)) {\n                const sym = b as SxSymbol;\n                checkUnsafeVarNamesEx('(compiler)compileValue', ctx.varNames, sym.symbol);\n                if (ctx.varNames.has(sym.symbol)) {\n                    compFnBody += `(${ctx.varNames.get(sym.symbol)})`;\n                } else {\n                    _$_vars[ctx.varsCount] = sym.symbol;\n                    compFnBody += `(_$_vars[${String(ctx.varsCount++)}])`;\n                }\n                break;\n            } else {}\n            // FALL_THRU\n        default:\n            _$_vars[ctx.varsCount] = b;\n            compFnBody += `(_$_vars[${String(ctx.varsCount++)}])`;\n            break;\n        }\n        return compFnBody;\n    }\n\n\n    function compileToken(body: any[], i: number) {\n        let compFnBody = '';\n        const b = body[i];\n        if (Array.isArray(b)) {\n            if (0 < b.length) {\n                const r: SxToken = applyMacros(state, b);\n                if (Array.isArray(r)) {\n                    if (0 < r.length) {\n                        if (isSymbol(r[0])) {\n                            const sym = r[0] as SxSymbol;\n                            const args = r.slice(1);\n                            checkUnsafeVarNamesEx('(compiler)compileToken', ops, sym.symbol);\n                            if (ops.has(sym.symbol)) {\n                                compFnBody += (ops.get(sym.symbol) as CompilerOperator)(r, args);\n                            } else {\n                                if (sym.symbol === state.config.reservedNames.spread) {\n                                    compFnBody += `...(${\n                                        args.map((x) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')})`;\n                                } else if (state.funcMap.has(sym.symbol)) {\n                                    _$_vars[ctx.varsCount] = (state.funcMap.get(sym.symbol) as SxFuncInfo).fn(state, '');\n                                    compFnBody += `((_$_vars[${String(ctx.varsCount++)}])(${\n                                        args.map((x) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')}))`;\n                                } else if (ctx.varNames.has(sym.symbol)) {\n                                    compFnBody += `(${String(ctx.varNames.get(sym.symbol))})(${\n                                        args.map((x) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')})`;\n                                } else {\n                                    _$_vars[ctx.varsCount] = resolveValueSymbol_dynamic(state, sym.symbol);\n                                    compFnBody += `((_$_vars[${String(ctx.varsCount++)}])()(${\n                                        args.map((x) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')}))`;\n                                }\n                            }\n                        } else {\n                            switch (typeof r[0]) {\n                            case 'function':\n                                _$_vars[ctx.varsCount] = r[0];\n                                compFnBody += `((_$_vars[${String(ctx.varsCount++)}])(${\n                                    r.slice(1).map((x, idx, arr) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')}))`;\n                                break;\n                            default:\n                                throw new Error(`[SX] compileToken: First item of list is not a function: ${JSON.stringify(r[0])}.`);\n                            }\n                        }\n                    } else {\n                        compFnBody += '([])';\n                    }\n                } else {\n                    compFnBody += compileValue(b);\n                }\n            } else {\n                compFnBody += '([])';\n            }\n        } else {\n            compFnBody += compileValue(b);\n        }\n        return compFnBody;\n    }\n\n\n    const ctx: CompilerContext = {\n        _$_vars,\n        varsCount: 1,\n        varNames: new Map<string, string>(),\n        varNamesCount: 0,\n        varDefs: 'var x0;',\n        ops: new Map<string, CompilerOperator>(),\n        makeScope,\n        compileToken,\n    };\n\n    registerOperators(state, ctx);\n    const ops = ctx.ops;\n\n    if (state.config.enableTailCallOptimization) {\n        fnBody = optimizeTailCall(state, formalArgs, fnBody);\n    }\n\n    // set 'this' object\n    ctx.varNames.set(state.config.reservedNames.thiz, `(this===(Function('return this')())?null:(this===void 0?null:this))`);\n\n    const capturedScopes = getCapturedScopes(state);\n    if (capturedScopes) {\n        for (const x in capturedScopes) {\n            if (Object.prototype.hasOwnProperty.call(capturedScopes, x)) {\n                _$_vars[ctx.varsCount++] = x;\n                _$_vars[ctx.varsCount] = capturedScopes[x];\n                ctx.varNames.set(x, `(_$_vars[${String(ctx.varsCount)}][_$_vars[${String(ctx.varsCount - 1)}]])`);\n                ctx.varsCount++;\n            }\n        }\n    }\n\n    const compFormalArgs = `${formalArgs.map((x, i) => {\n        ctx.varNames.set(formalArgs[i].symbol, 'a' + i);\n        return `${(lastIsSpread && i === formalArgs.length - 1) ? '...' : ''}a${i}`;\n    }).join(',')}`;\n\n    const compFnBodyRoot = `return(${fnBody.map((x, i) => compileToken(fnBody, i)).join(',')})`;\n    return `(function(${compFormalArgs}){\"strict\";${ctx.varDefs}${compFnBodyRoot}})`;\n}\n\n\n// tslint:disable-next-line:variable-name\nfunction evalCompiledLambda(_$_state: SxParserState, _$_vars: any[], code: string) {\n    // tslint:disable-next-line:no-eval\n    _$_vars[0] = eval(code);\n    return _$_vars[0];\n}\n\n\nexport function compileLambda(state: SxParserState, formalArgs: SxSymbol[], lastIsSpread: boolean, fnBody: any[]) {\n    // tslint:disable-next-line:variable-name\n    const _$_vars: any[] = [];\n    return evalCompiledLambda(state, _$_vars, compileCore(state, formalArgs, lastIsSpread, fnBody, _$_vars));\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserState,\n         MaxEvaluationCountError } from './types';\nimport { globalObj,\n         objConstructor,\n         funConstructor }          from './global-this';\n\n\n\nexport function setEvaluationCount(state: SxParserState) {\n    state.evalCount++;\n    if (state.config.maxEvalCount && state.config.maxEvalCount < state.evalCount) {\n        throw new MaxEvaluationCountError();\n    }\n}\n\n\nexport function checkParamsLength(name: string, args: ArrayLike<any>, min: number, max?: number) {\n    if (args.length < min) {\n        throw new Error(`[SX] ${name}: Invalid argument length: expected: ${min} / args: ${args.length}.`);\n    }\n    if (max && max < args.length) {\n        throw new Error(`[SX] ${name}: Invalid argument length: expected: ${max} / args: ${args.length}.`);\n    }\n    return args;\n}\n\n\nexport function checkUnsafeVarNames(name: string, varName: string) {\n    if (varName === '__proto__' ||\n        varName === '__defineGetter__' || varName === '__defineSetter__' ||\n        varName === '__lookupGetter__' || varName === '__lookupSetter__') {\n        throw new Error(`[SX] ${name}: Invalid var name ${varName}.`);\n    }\n    if (varName === 'prototype' || varName === 'constructor') {\n        throw new Error(`[SX] ${name}: Invalid var name ${varName}.`);\n    }\n    if (objConstructor.hasOwnProperty(varName)) {\n        throw new Error(`[SX] ${name}: Invalid var name ${varName}.`);\n    }\n    if (varName === 'call' || varName === 'arguments' || varName === 'caller') {\n        // NOTE: arguments, caller are not accessible in strict mode\n        throw new Error(`[SX] ${name}: Invalid var name ${varName}.`);\n    }\n    return varName;\n}\n\n\nexport function checkUnsafeVarNamesEx(name: string, target: any, varName: string) {\n    if (target === globalObj ||\n        varName === '__proto__' ||\n        varName === '__defineGetter__' || varName === '__defineSetter__' ||\n        varName === '__lookupGetter__' || varName === '__lookupSetter__') {\n        throw new Error(`[SX] ${name}: Invalid var name ${varName}.`);\n    }\n    if (varName === 'prototype' || varName === 'constructor') {\n        if (target === null || target === void 0 || typeof target === 'function') {\n            throw new Error(`[SX] ${name}: Invalid var name ${varName}.`);\n        }\n    }\n    if (target === null || target === void 0 || target === objConstructor) {\n        if (objConstructor.hasOwnProperty(varName)) {\n            throw new Error(`[SX] ${name}: Invalid var name ${varName}.`);\n        }\n    }\n    if (target === null || target === void 0 || target === funConstructor) {\n        // checking 'call', 'arguments', 'caller', ...\n        let con: any = funConstructor;\n        while (con) {\n            if (con.hasOwnProperty(varName)) {\n                throw new Error(`[SX] ${name}: Invalid var name ${varName}.`);\n            }\n            con = con.__proto__;\n        }\n    }\n    if (typeof target === 'function') {\n        if (!target.hasOwnProperty(varName)) {\n            // function's prototypes' members\n            throw new Error(`[SX] ${name}: Invalid var name ${varName}.`);\n        }\n    }\n    return varName;\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserState,\n         SxExternalValue,\n         SxSymbol,\n         SxDottedPair,\n         SxDottedFragment,\n         SxToken,\n         SxScope,\n         CapturedScopes,\n         SxMacroInfo }           from './types';\nimport { isSymbol }              from './ast';\nimport { setEvaluationCount,\n         checkUnsafeVarNamesEx } from './errors';\n\n\n\nexport function toNumber(x: any) {\n    switch (typeof x) {\n    case 'object': case 'symbol': case 'function':\n        return NaN;\n    default:\n        return Number(x);\n    }\n}\n\n\nexport function resolveUnquote(state: SxParserState, r: SxToken[]) {\n    for (let i = 0; i < r.length; i++) {\n        const symUnquote = Array.isArray(r[i]) && isSymbol((r[i] as SxToken[])[0], state.config.reservedNames.unquote);\n        if (symUnquote) {\n            r = r.slice(0, i).concat([evaluate(state, (r[i] as SxToken[])[1])], r.slice(i + 1));\n        }\n        if (Array.isArray(r[i])) {\n            r = r.slice(0);\n            r[i] = resolveUnquote(state, r[i] as SxToken[]);\n        }\n    }\n    return resolveSplice(state, r);\n}\n\n\nexport function resolveSplice(state: SxParserState, r: SxToken[]) {\n    if (state.config.enableSplice) {\n        for (let i = r.length - 1; i >= 0; i--) {\n            const symSplice = Array.isArray(r[i]) && isSymbol((r[i] as SxToken[])[0], state.config.reservedNames.splice);\n            if (symSplice) {\n                r = r.slice(0, i).concat((r[i] as SxToken[])[1], r.slice(i + 1));\n            }\n        }\n    }\n    return r;\n}\n\n\nexport function resolveMacro(state: SxParserState, x: SxSymbol, r: SxToken[]) {\n    const macroInfo = state.macroMap.get(x.symbol);\n    let lastErr = null;\n    if (macroInfo) {\n        let m: SxMacroInfo | undefined = macroInfo;\n        const r1 = r.slice(1);\n        while (m) {\n            if (m.formalArgs) {\n                const matchResult = matchMacroArgs(state, x.symbol, m.formalArgs, Boolean(m.lastIsSpread), r1);\n                if (! matchResult.error) {\n                    return {\n                        fn: m.fn(state, x.symbol, matchResult.formalArgs as SxSymbol[]),\n                        actualArgs: r.slice(0, 1).concat(matchResult.actualArgs as SxToken[]),\n                    };\n                }\n                lastErr = matchResult.error;\n                m = m.next;\n            } else {\n                return {\n                    fn: m.fn(state, x.symbol),\n                    actualArgs: r,\n                };\n            }\n        }\n        if (lastErr) {\n            throw new Error(lastErr);\n        }\n    }\n    return false;\n}\n\n\nexport function resolveFunctionSymbol(state: SxParserState, x: SxSymbol) {\n    if (typeof x === 'function') {\n        return x;\n    }\n    const funcInfo = state.funcMap.get(x.symbol);\n    if (funcInfo) {\n        return funcInfo.fn(state, x.symbol);\n    } else {\n        const v = resolveValueSymbol(state, x);\n        if (typeof v === 'function') {\n            return v;\n        }\n        if (state.config.funcSymbolResolverFallback) {\n            return state.config.funcSymbolResolverFallback(state, x.symbol);\n        }\n        if (state.config.raiseOnUnresolvedSymbol) {\n            throw new Error(`[SX] resolveFunctionSymbol: Unresolved symbol: ${x.symbol}.`);\n        }\n        return x.symbol;\n    }\n}\n\n\nexport function resolveValueSymbolScope(state: SxParserState, x: SxSymbol, nullIfNotDefined: boolean) {\n    for (let i = state.scopes.length - 1; i > 0; i--) {\n        const localScope: SxScope = state.scopes[i];\n        if (localScope && Object.prototype.hasOwnProperty.call(localScope.scope, x.symbol)) {\n            return localScope.scope;\n        }\n        if (localScope.capturedScopes &&\n            Object.prototype.hasOwnProperty.call(localScope.capturedScopes, x.symbol)) {\n            return localScope.capturedScopes[x.symbol];\n        }\n        if (! localScope.isBlockLocal) {\n            break;\n        }\n    }\n    const globalScope = getGlobalScope(state);\n    if (Object.prototype.hasOwnProperty.call(globalScope.scope, x.symbol)) {\n        return globalScope.scope;\n    }\n    return nullIfNotDefined ? null : getScope(state).scope;\n}\n\n\nexport function resolveValueSymbol(state: SxParserState, x: SxSymbol) {\n    const scope = resolveValueSymbolScope(state, x, true);\n    if (scope) {\n        return scope[x.symbol];\n    }\n    const symInfo = state.symbolMap.get(x.symbol);\n    if (symInfo) {\n        return symInfo.fn(state, x.symbol);\n    } else {\n        if (state.config.valueSymbolResolverFallback) {\n            return state.config.valueSymbolResolverFallback(state, x.symbol);\n        }\n        if (state.config.raiseOnUnresolvedSymbol) {\n            throw new Error(`[SX] resolveValueSymbol: Unresolved symbol: ${x.symbol}.`);\n        }\n        return x.symbol;\n    }\n}\n\n\nexport function collectCapturedVariables(state: SxParserState, names: SxSymbol[]): CapturedScopes {\n    const capturedScopes: CapturedScopes = {};\n    for (const n of names) {\n        const scope = resolveValueSymbolScope(state, n, true);\n        if (scope === null) {\n            throw new Error(`[SX] collectCapturedVariables: Unresolved symbols ${n}`);\n        }\n        checkUnsafeVarNamesEx('collectCapturedVariables', capturedScopes, n.symbol);\n        capturedScopes[n.symbol] = scope;\n    }\n    return capturedScopes;\n}\n\n\nexport function getCapturedScopes(state: SxParserState): CapturedScopes | undefined {\n    const a: CapturedScopes[] = [];\n    for (let i = state.scopes.length - 1; i > 0; i--) {\n        const localScope: SxScope = state.scopes[i];\n        if (localScope.capturedScopes) {\n            a.unshift(localScope.capturedScopes);\n        }\n        if (! localScope.isBlockLocal) {\n            break;\n        }\n    }\n    return a.length > 0 ? Object.assign({}, ...a) : void 0;\n}\n\n\nexport function installScope(state: SxParserState, scope: any, isBlockLocal: boolean, capturedScopes?: CapturedScopes): any {\n    state.scopes.push({isBlockLocal, scope, capturedScopes});\n}\n\n\nexport function uninstallScope(state: SxParserState): any {\n    if (state.scopes.length < 2) {\n        throw new Error(`[SX] uninstallScope: Unable to pop stack.`);\n    }\n    return state.scopes.pop();\n}\n\n\nexport function getScope(state: SxParserState) {\n    return state.scopes[state.scopes.length - 1];\n}\n\n\nexport function getGlobalScope(state: SxParserState) {\n    return state.scopes[0];\n}\n\n\nexport function matchMacroArgs(\n        state: SxParserState, macroName: string,\n        formalArgs: SxSymbol[], lastIsSpread: boolean, actualArgs: SxToken[]) {\n\n    formalArgs = formalArgs.slice(0);\n    actualArgs = actualArgs.slice(0);\n    if ((actualArgs.length + (lastIsSpread ? 1 : 0)) < formalArgs.length) {\n        return ({ error: `[SX] macro call (${macroName}): Actual args too short: actual ${\n            actualArgs.length} / formal ${formalArgs.length}.` });\n    }\n    for (let i = formalArgs.length - (lastIsSpread ? 2 : 1); i >= 0; i--) {\n        let nm = formalArgs[i].symbol;\n        if (nm.startsWith('!')) {\n            formalArgs[i].symbol = formalArgs[i].symbol.slice(1);\n            nm = formalArgs[i].symbol;\n\n            if (! isSymbol(actualArgs[i])) {\n                return ({ error: `[SX] macro call (${macroName}): Actual arg(${i}: ${nm}) is not symbol.` });\n            }\n        } else if (nm.startsWith('<') && nm.endsWith('>')) {\n            formalArgs[i].symbol = formalArgs[i].symbol.slice(1, -1);\n            nm = formalArgs[i].symbol;\n\n            if (isSymbol(actualArgs[i], nm)) {\n                formalArgs = formalArgs.slice(0, i).concat(formalArgs.slice(i + 1));\n                actualArgs = actualArgs.slice(0, i).concat(actualArgs.slice(i + 1));\n            } else {\n                return ({ error: `[SX] macro call (${macroName}): Actual arg(${i}: ${nm}) is not expected symbol.` });\n            }\n        } else {\n            const tpos = nm.lastIndexOf(':');\n            if (0 < tpos) {\n                const tname = nm.slice(tpos + 1);\n                switch (tname) {\n                case 'number':\n                    if (typeof actualArgs[i] !== 'number') {\n                        return ({ error: `[SX] macro call (${macroName}): Actual arg(${i}: ${nm}) is not number.` });\n                    }\n                    break;\n                case 'string':\n                    if (typeof actualArgs[i] !== 'string') {\n                        return ({ error: `[SX] macro call (${macroName}): Actual arg(${i}: ${nm}) is not string.` });\n                    }\n                    break;\n                case 'function':\n                    if (! (Array.isArray(actualArgs[i]) && isSymbol((actualArgs[i] as any)[0]))) {\n                        return ({ error: `[SX] macro call (${macroName}): Actual arg(${i}: ${nm}) is not function.` });\n                    }\n                    break;\n                case 'list':\n                    if (! Array.isArray(actualArgs[i])) {\n                        return ({ error: `[SX] macro call (${macroName}): Actual arg(${i}: ${nm}) is not list.` });\n                    }\n                    break;\n                case 'symbol':\n                    if (! isSymbol(actualArgs[i])) {\n                        return ({ error: `[SX] macro call (${macroName}): Actual arg(${i}: ${nm}) is not symbol.` });\n                    }\n                    break;\n                case 'any':\n                    break;\n                default:\n                    return ({ error: `[SX] macro call (${macroName}): Formal arg(${i}: ${nm}) is unknown type ${tname}.` });\n                }\n                formalArgs[i].symbol = formalArgs[i].symbol.slice(0, tpos);\n            }\n        }\n    }\n    return ({ formalArgs, actualArgs });\n}\n\n\nexport function optimizeTailCall(state: SxParserState, formalArgs: SxSymbol[], fnBody: SxToken[]) {\n    // S expression: ($__lambda '(sym1 ... symN) 'expr1 ... 'exprN)\n    //    formalArgs: 'sym1 ... 'symN\n    //        fnBody: 'expr1 ... 'exprN\n    if (Array.isArray(fnBody[fnBody.length - 1])) {\n        const front = fnBody.slice(0, fnBody.length - 1);\n        const tail = fnBody[fnBody.length - 1];\n        if (tail && (typeof tail[0] === 'object') && tail[0].symbol === state.config.reservedNames.if) {\n            // S expression: ($if cond t-expr f-expr)\n            if (Array.isArray(tail[3]) && (typeof tail[3][0] === 'object') && tail[3][0].symbol === state.config.reservedNames.self) {\n                // S expression (recursive):\n                //     (                                 ;; fnBody\n                //         expr1 ... exprN-1             ;; front\n                //         ($if cond                     ;; tail[0] [1]\n                //             t-expr                    ;;     [2]\n                //             ($self                    ;;     [3]\n                //                 rArgs1 ... rArgsN) )  ;; tail[4] ... [N+4]\n                //     )\n                //\n                //  -> S exp (tail call optimization):\n                //     (                                                                  ;; fnBody\n                //         ($until cond                                                   ;; tail[1]\n                //             ($clisp-let (tempsym1 ... tempsymN)                        ;;\n                //                 expr1 ... exprN-1                                      ;; front\n                //                 ($set tempsym1   rArgs1) ... ($set tempsymN   rArgsN)  ;; tail[4] ... [N+4]\n                //                 ($set     sym1 tempsym1) ... ($set     symN tempsymN)  ;;\n                //             )                                                          ;;\n                //         )                                                              ;;\n                //         expr1 ... exprN-1                                              ;; front\n                //         t-expr                                                         ;; tail[2]\n                //     )\n\n                const varBaseName = `$__tempvar__$$ec${state.evalCount++}$$_`;\n                const tempVarsSyms = formalArgs.map((a, idx) => ({symbol: `${varBaseName}_$i${idx}_${a.symbol}`}));\n\n                return [\n                    [{symbol: state.config.reservedNames.until}, tail[1],\n                        [{symbol: state.config.reservedNames.let}, [...tempVarsSyms],\n                            ...front,\n                            ...((tail[3].slice(1) as any[]).map((x: any, idx) =>\n                                [{symbol: state.config.reservedNames.set}, tempVarsSyms[idx], x])),\n                            ...(tempVarsSyms.map((x, idx) =>\n                                [{symbol: state.config.reservedNames.set}, formalArgs[idx], x])),\n                        ],\n                    ],\n                    ...front,\n                    tail[2],\n                ];\n            }\n        }\n    }\n    return fnBody;\n}\n\n\nexport function evaluate(state: SxParserState, x: SxToken): SxToken {\n    setEvaluationCount(state);\n\n    if (x === null || x === void 0) {\n        return x;\n    }\n    let r: SxToken = x;\n\n    for (;;) {\n        if (Array.isArray(r)) {\n            if (r.length === 0) {\n                return r;\n            }\n            r = resolveSplice(state, r);\n            const sym = isSymbol(r[0]);\n            if (sym) {\n                const m = resolveMacro(state, sym, r);\n                if (m) {\n                    r = m.fn(m.actualArgs as SxToken[]);\n                } else {\n                    break;\n                }\n            } else {\n                break;\n            }\n        } else {\n            break;\n        }\n        setEvaluationCount(state);\n    }\n\n    if (Array.isArray(r)) {\n        r = r.slice(0);\n        if (0 < r.length) {\n            const sym = isSymbol(r[0]);\n            if (sym) {\n                if (sym.symbol === state.config.reservedNames.quote) {\n                    return r.slice(1, 2)[0];\n                }\n                if (sym.symbol === state.config.reservedNames.backquote) {\n                    r = r.slice(1, 2)[0];\n                    if (Array.isArray(r)) {\n                        r = resolveUnquote(state, r);\n                    }\n                    return r;\n                }\n                if (sym.symbol === state.config.reservedNames.eval) {\n                    return evaluate(state, evaluate(state, r.slice(1, 2)[0]));\n                }\n            }\n\n            const sprs = [];\n            for (let i = 1; i < r.length; i++) {\n                const symSpr = Array.isArray(r[i]) && isSymbol((r[i] as SxToken[])[0], state.config.reservedNames.spread);\n                if (symSpr) {\n                    sprs.push(i);\n                    const a = evaluate(state, (r[i] as SxToken[])[1]);\n                    r[i] = Array.isArray(a) ? a : [a];\n                } else {\n                    r[i] = evaluate(state, r[i]);\n                }\n            }\n            for (const i of sprs.reverse()) {\n                r = (r as SxToken[]).slice(0, i).concat(r[i], r.slice(i + 1));\n            }\n\n            let fn: any;\n            if (typeof r[0] === 'function') {\n                fn = r[0];\n            } else if (sym) {\n                fn = resolveFunctionSymbol(state, sym);\n            } else {\n                fn = evaluate(state, r[0]);\n            }\n\n            if (typeof fn === 'function') {\n                r = (fn as any)(...(r.slice(1)));\n            } else {\n                throw new Error(`[SX] evaluate: First item of list is not a function: ${JSON.stringify(r)}.`);\n            }\n        }\n    } else if (state.config.wrapExternalValue && Object.prototype.hasOwnProperty.call(r, 'value')) {\n        r = (r as SxExternalValue).value;\n    } else if (Object.prototype.hasOwnProperty.call(r, 'symbol')) {\n        r = resolveValueSymbol(state, r as SxSymbol);\n    } else if (Object.prototype.hasOwnProperty.call(r, 'car')) {\n        const car = evaluate(state, (r as SxDottedPair).car);\n        const cdr = evaluate(state, (r as SxDottedPair).cdr);\n        if (Array.isArray(cdr)) {\n            const a = (cdr as any[]).slice(0);\n            a.unshift(car);\n            r = a;\n        } else {\n            r = { car, cdr };\n        }\n    } else if (Object.prototype.hasOwnProperty.call(r, 'dotted')) {\n        r = [\n            evaluate(state, (r as SxDottedFragment).dotted),\n        ];\n    } else if (Object.prototype.hasOwnProperty.call(r, 'comment')) {\n        r = [];\n    }\n\n    return r;\n}\n","// Copyright (c) 2020 Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\n\n// tslint:disable: no-shadowed-variable\n// tslint:disable: function-constructor\n\n\nexport const dummyTargetObject = {};\n\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\nexport const { g: globalObj, o: objConstructor, f: funConstructor } = (() => {\n    let globalObj = null;\n    try {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-implied-eval\n        globalObj = Function('return this')();\n    } catch (e) {\n        // Nothing to do.\n    }\n    if (! globalObj) {\n        // Fall back (for CSP, etc...)\n        if (typeof window === 'object' && window) {\n            globalObj = window;\n        } else if (typeof global === 'object' && global) {\n            globalObj = global;\n        } else if (typeof globalThis === 'object' && globalThis) {\n            globalObj = globalThis;\n        } else {\n            globalObj = dummyTargetObject;\n        }\n    }\n\n    // NOTE: ({}).constructor === Object\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    let objConstructor: ObjectConstructor = null as any;\n    try {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        objConstructor = (({}).constructor ?? Object) as any;\n    } catch (e) {\n        // Nothing to do.\n    }\n    if (! objConstructor) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        objConstructor = dummyTargetObject as any;\n    }\n\n    // NOTE: ({}).toString.constructor === Function\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    let funConstructor: FunctionConstructor = null as any;\n    try {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        funConstructor = (({}).toString.constructor ?? Function) as any;\n    } catch (e) {\n        // Nothing to do.\n    }\n    if (! funConstructor) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        funConstructor = dummyTargetObject as any;\n    }\n\n    return ({\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        g: globalObj, o: objConstructor, f: funConstructor\n    });\n})();\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\n\nexport type SxMacro = (state: SxParserState, name: string, formalArgs?: SxSymbol[]) => (list: SxToken[]) => SxToken;\n\nexport interface SxMacroInfo {\n    name: string;\n    fn: SxMacro;\n\n    formalArgs?: SxSymbol[];\n    lastIsSpread?: boolean;\n    next?: SxMacroInfo;\n}\n\n\nexport type SxFunc = (state: SxParserState, name: string) => (...args: any[]) => any;\n\nexport interface SxFuncInfo {\n    name: string;\n    fn: SxFunc;\n\n    // TODO: overloading\n    // formalArgs?: SxSymbol[];\n    // lastIsSpread?: boolean;\n    // next?: SxFuncInfo;\n}\n\n\nexport type SxSymbolResolver = (state: SxParserState, name: string) => any;\n\nexport interface SxSymbolInfo {\n    name: string;\n    fn: SxSymbolResolver;\n}\n\n\nexport interface CapturedScopes { [s: string]: { [s: string]: any; }; }\n\nexport interface SxScope {\n    isBlockLocal: boolean;\n    scope: any;           // { [s: string]: any; };\n    capturedScopes?: CapturedScopes;\n}\n\n\nexport interface SxReservedNames {\n    eval: string;\n    quote: string;\n    backquote: string;\n    unquote: string;\n    spread: string;\n    splice: string;\n\n    car: string;\n    cdr: string;\n    cons: string;\n    atom: string;\n    eq: string;\n    list: string;\n\n    let: string;\n    lambda: string;\n    self: string;\n    defun: string;\n    thiz: string;\n\n    if: string;\n    cond: string;\n\n    while: string;\n    doWhile: string;\n    until: string;\n    doUntil: string;\n\n    get: string;\n    defvar: string;\n    setq: string;\n    set: string;\n    call: string;\n\n    not: string;\n    and: string;\n    or: string;\n\n    isSymbol: string;\n    gensym: string;\n    raise: string;\n    catch: string;\n\n    Template: string;\n}\n\nexport interface SxParserConfig {\n    raiseOnUnresolvedSymbol: boolean;\n    enableEvaluate: boolean;\n    enableHereDoc: boolean;\n    enableSpread: boolean;\n    enableSplice: boolean;\n    enableShorthands: boolean;\n    enableVerbatimStringLiteral: boolean;\n    enableTailCallOptimization: boolean;\n    enableRegExpMatchOperators: boolean; // IMPORTANT: Turn off to prevent ReDoS when executing untrusted code\n    enableCompilationOperators: boolean; // IMPORTANT: Turn off to prevent DoS when executing untrusted code\n    stripComments: boolean;\n    wrapExternalValue: boolean;\n    reservedNames: SxReservedNames;\n    returnMultipleRoot: boolean;\n    maxEvalCount: number;                // IMPORTANT: Set positive value to prevent DoS when executing untrusted code\n\n    jsx?: (comp: any, props: any, ...children: any[]) => any;\n    JsxFragment?: any;\n\n    funcs: SxFuncInfo[];\n    macros: SxMacroInfo[];\n    symbols: SxSymbolInfo[];\n\n    funcSymbolResolverFallback?: SxFunc;\n    valueSymbolResolverFallback?: SxSymbolResolver;\n}\n\nexport interface SxParserState {\n    strings: TemplateStringsArray | string[];\n    values: any[];\n\n    index: number;\n    pos: number;\n    line: number;\n\n    evalCount: number;\n\n    scopes: SxScope[];\n\n    macroMap: Map<string, SxMacroInfo>;\n    funcMap: Map<string, SxFuncInfo>;\n    symbolMap: Map<string, SxSymbolInfo>;\n\n    config: SxParserConfig;\n}\n\nexport interface SxEof {\n    eof: boolean; // true: truely EOF comes. false: detect virtual EOF.\n    eofSeq?: string;\n}\n\nexport interface SxExternalValue {\n    value: any;\n}\n\nexport interface SxSymbol {\n    'symbol': string;\n\n    // TODO: debug info\n    // _fileName?: string;\n    // _line?: number;\n    // _col?: number;\n}\n\nexport interface SxComment {\n    comment: string;\n}\n\nexport interface SxDottedPair {\n    car: SxToken; // left\n    cdr: SxToken; // right\n}\n\nexport interface SxDottedFragment {\n    dotted: SxToken; // right\n}\n\n\nexport type SxTokenChild = SxSymbol | SxDottedPair | SxDottedFragment | SxComment | SxExternalValue | string | number | boolean | null | /*SxToken*/ any[];\nexport type SxToken      = SxSymbol | SxDottedPair | SxDottedFragment | SxComment | SxExternalValue | string | number | boolean | null | SxTokenChild[];\nexport type SxChar = string | SxEof | SxExternalValue;\nexport type SxAtom = SxSymbol | string | number | boolean | null;\nexport type SxList = SxDottedPair | SxAtom[];\n\n\n\nexport type CompilerOperator = (r: SxToken[], args: SxToken[]) => string;\n\n\nexport interface CompilerContext {\n    _$_vars: any[];\n    varsCount: number;\n    varNames: Map<string, string>;\n    varNamesCount: number;\n    varDefs: string;\n    ops: Map<string, CompilerOperator>;\n    makeScope: (scoped: () => void) => void;\n    compileToken: (body: any[], i: number) => string;\n}\n\n\nexport interface LsxConfig {\n    jsx: (comp: any, props: any, ...children: any[]) => any;\n    jsxFlagment: any;\n    components: object;\n}\n\n\nexport class FatalError extends Error {\n    public constructor(message?: string | undefined) {\n        super(message);\n    }\n}\n\n\nexport class MaxEvaluationCountError extends FatalError {\n    public constructor() {\n        super(`[SX] evaluate: The maximum count of evaluations has been exceeded.`);\n    }\n}\n\n\nexport class ScriptTerminationError extends FatalError {\n    public constructor(where: string) {\n        super(`[SX] ${where}: Unexpected termination of script.`);\n    }\n}\n\n\nexport interface SExpressionRepl<R = SxToken> {\n    (strings: TemplateStringsArray | string, ...values: any[]): R;\n    sync: (strings: TemplateStringsArray | string, ...values: any[]) => R;\n}\n\n\nexport interface SExpressionTemplateFn<R = SxToken> {\n    (strings: TemplateStringsArray | string, ...values: any[]): R;\n    evaluateAST: (ast: SxToken[]) => R;\n    repl: () => SExpressionRepl<R>;\n    setGlobals: (globals: object) => SExpressionTemplateFn<R>;\n    appendGlobals: (globals: object) => SExpressionTemplateFn<R>;\n    setStartup: (strings: TemplateStringsArray | string, ...values: any[]) => SExpressionTemplateFn<R>;\n    setStartupAST: (ast: SxToken[]) => SExpressionTemplateFn<R>;\n    appendStartup: (strings: TemplateStringsArray | string, ...values: any[]) => SExpressionTemplateFn<R>;\n    appendStartupAST: (ast: SxToken[]) => SExpressionTemplateFn<R>;\n    install: (installer: (config: SxParserConfig) => SxParserConfig) => SExpressionTemplateFn<R>;\n}\n\n\nexport interface SExpressionAsyncRepl<R = SxToken> {\n    (strings: TemplateStringsArray | string, ...values: any[]): Promise<R>;\n    sync: (strings: TemplateStringsArray | string, ...values: any[]) => Promise<R>;\n}\n\n\nexport interface SExpressionAsyncTemplateFn<R = SxToken> {\n    (strings: TemplateStringsArray | string, ...values: any[]): Promise<R>;\n    evaluateAST: (ast: SxToken[]) => Promise<R>;\n    repl: () => SExpressionAsyncRepl<R>;\n    setGlobals: (globals: object) => SExpressionAsyncTemplateFn<R>;\n    appendGlobals: (globals: object) => SExpressionAsyncTemplateFn<R>;\n    setStartup: (strings: TemplateStringsArray | string, ...values: any[]) => SExpressionAsyncTemplateFn<R>;\n    setStartupAST: (ast: SxToken[]) => SExpressionAsyncTemplateFn<R>;\n    appendStartup: (strings: TemplateStringsArray | string, ...values: any[]) => SExpressionAsyncTemplateFn<R>;\n    appendStartupAST: (ast: SxToken[]) => SExpressionAsyncTemplateFn<R>;\n    install: (installer: (config: SxParserConfig) => SxParserConfig) => SExpressionAsyncTemplateFn<R>;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(140);\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};"],"sourceRoot":""}
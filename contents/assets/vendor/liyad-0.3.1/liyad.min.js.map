{"version":3,"sources":["webpack://liyad/webpack/universalModuleDefinition","webpack://liyad/webpack/bootstrap","webpack://liyad/./src/s-exp/errors.ts","webpack://liyad/./src/s-exp/evaluate.ts","webpack://liyad/./src/s-exp/ast.ts","webpack://liyad/./src/s-exp/compile.ops/helpers.ts","webpack://liyad/./src/s-exp/types.ts","webpack://liyad/./src/s-exp/consts.ts","webpack://liyad/./src/s-exp/compile.ts","webpack://liyad/./src/s-exp/compile.ops/index.ts","webpack://liyad/./src/s-exp/defaults.ts","webpack://liyad/./src/s-exp/parser.ts","webpack://liyad/./src/s-exp/interpreters/index.ts","webpack://liyad/./src/s-exp/interpreters/presets/s-exp.ts","webpack://liyad/./src/s-exp/operators/core/core.fn.ts","webpack://liyad/./src/s-exp/operators/core/core.operator.ts","webpack://liyad/./src/s-exp/operators/core/core.macro.ts","webpack://liyad/./src/s-exp/operators/core/core.symbol.ts","webpack://liyad/./src/s-exp/operators/core/index.ts","webpack://liyad/./src/s-exp/operators/arithmetic/arithmetic.fn.ts","webpack://liyad/./src/s-exp/operators/arithmetic/arithmetic.operator.ts","webpack://liyad/./src/s-exp/operators/arithmetic/arithmetic.macro.ts","webpack://liyad/./src/s-exp/operators/arithmetic/arithmetic.symbol.ts","webpack://liyad/./src/s-exp/operators/arithmetic/index.ts","webpack://liyad/./src/lib/data.ts","webpack://liyad/./src/s-exp/operators/sequence/sequence.fn.ts","webpack://liyad/./src/s-exp/operators/sequence/sequence.operator.ts","webpack://liyad/./src/s-exp/operators/sequence/sequence.macro.ts","webpack://liyad/./src/s-exp/operators/sequence/sequence.symbol.ts","webpack://liyad/./src/s-exp/operators/sequence/index.ts","webpack://liyad/./src/s-exp/operators/concurrent/concurrent.fn.ts","webpack://liyad/./src/s-exp/operators/concurrent/concurrent.operator.ts","webpack://liyad/./src/s-exp/operators/concurrent/concurrent.macro.ts","webpack://liyad/./src/s-exp/operators/concurrent/concurrent.symbol.ts","webpack://liyad/./src/s-exp/operators/concurrent/index.ts","webpack://liyad/./src/s-exp/interpreters/presets/lisp.ts","webpack://liyad/./src/s-exp/operators/jsx/jsx.fn.ts","webpack://liyad/./src/s-exp/operators/jsx/jsx.operator.ts","webpack://liyad/./src/s-exp/operators/jsx/jsx.macro.ts","webpack://liyad/./src/s-exp/operators/jsx/jsx.symbol.ts","webpack://liyad/./src/s-exp/operators/jsx/index.ts","webpack://liyad/./src/s-exp/interpreters/presets/lsx.ts","webpack://liyad/./src/s-exp/browser.ts","webpack://liyad/./src/index.ts"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","setEvaluationCount","state","evalCount","config","maxEvalCount","checkParamsLength","args","min","max","length","Error","objConstructor","constructor","funConstructor","Function","checkUnsafeVarNames","varName","checkUnsafeVarNamesEx","target","con","__proto__","toNumber","x","NaN","Number","resolveSplice","enableSplice","Array","isArray","reservedNames","splice","slice","concat","resolveMacro","macroInfo","macroMap","symbol","lastErr","r1","formalArgs","fn","actualArgs","matchResult","matchMacroArgs","Boolean","lastIsSpread","error","next","resolveValueSymbolScope","nullIfNotDefined","scopes","localScope","scope","capturedScopes","isBlockLocal","globalScope","getGlobalScope","getScope","resolveValueSymbol","symInfo","symbolMap","valueSymbolResolverFallback","raiseOnUnresolvedSymbol","collectCapturedVariables","names","getCapturedScopes","a","unshift","assign","installScope","push","uninstallScope","pop","macroName","nm","startsWith","endsWith","tpos","lastIndexOf","tname","optimizeTailCall","fnBody","front","tail","if","self","varBaseName","tempVarsSyms","map","idx","until","let","set","evaluate","sym","quote","backquote","resolveUnquote","unquote","eval","sprs","spread","reverse","funcInfo","funcMap","v","funcSymbolResolverFallback","resolveFunctionSymbol","JSON","stringify","wrapExternalValue","car","cdr","dotted","isQuoted","q","isSymbol","isBackquoted","wrapByUnquote","isUnquoted","applyMacros","tok","stripQuote","stripQuoteOrPass","getScope_stateApplied","resolveValueSymbol_dynamic","checkUnsafeVarNames_dynamic","FatalError","message","super","MaxEvaluationCountError","ScriptTerminationError","where","globalObj","compileCore","_$_vars","compileValue","b","compFnBody","String","ctx","varNames","has","varsCount","compileToken","body","ops","join","arr","Map","varNamesCount","varDefs","makeScope","scoped","varNamesCopy","entries","enableTailCallOptimization","thiz","compFormalArgs","compFnBodyRoot","evalCompiledLambda","_$_state","code","compileLambda","registerOperators","raise","quoted","vName","symName","regToVars","checkNameCalled","checkNamePos","str","checkName","not","w1","w0","hasSpread","defaultReservedNames","cons","atom","eq","list","lambda","defun","cond","while","doWhile","doUntil","defvar","setq","and","or","gensym","catch","Template","defaultConfig","enableEvaluate","enableHereDoc","enableSpread","enableShorthands","enableVerbatimStringLiteral","enableRegExpMatchOperators","enableCompilationOperators","stripComments","returnMultipleRoot","symbols","macros","funcs","isEOF","ch","isSpace","trim","isNumberFirstChar","test","isNumberAfterSignChar","isSymbolFirstChar","lookCurrentLineHint","line","index","pos","strings","getChar","virtualEof","disableEscape","eof","values","split","eofSeq","ch1","ch2","fromCodePoint","parseInt","lookAheads","chs","lookAhead","skipWhitespaces","parseNumber","parseSymbol","match","ws","parseStringOrComment","valuesStartSeq","valuesStopChar","allowPhysicalEof","eofSeqs","parseList","parseString","parseHereDoc","attrs","inner","parseSingleLineComment","comment","parseMultiLineComment","parseOneToken","ahead","isSpliceUnquote","ret","aheads","isHereDoc","ahs","listStopChar","initialList","parse","initState","globals","resetState","SExpression","conf","startup","exec","f","evaluateAST","ast","repl","fRepl","sync","setGlobals","appendGlobals","setStartup","setStartupAST","appendStartup","appendStartupAST","install","installer","SExpressionAsync","then","stat","execSync","S","$car","$$first","$cdr","$cons","$$firstAndSecond","$first","$second","$$second","$last","$rest","$firstAndSecond","$atom","$eq","$notEq","$list","$__scope","returnMultiple","kv","kvSym","kvName","xSym","xName","$__lambda","fa","$comp$__lambda","compile","$apply","apply","$raise","$pipe","$__let","$__set","path","subst","inprog","last","$boolean","$$boolean","$not","$$not","$__and","prev","curr","$__or","$ambiguousEq","$$ambiguousEq","$ambiguousNotEq","$lt","$le","$gt","$ge","$typeof","tyName","$symbol","$isSymbol","$isNull","$isNil","$isUndefined","$isList","$isString","$isNumber","$isNaN","isNaN","$isFinite","isFinite","$isInteger","isInteger","$toString","$toNumber","assignBlacklist","$objectAssign","includes","$jsonStringify","$jsonParse","$now","Date","now","$datetimeFromIso","dt","getTime","$datetime","year","padStart","$datetimeLc","$datetimeToIsoString","toISOString","$datetimeToComponents","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","getUTCDay","$datetimeToComponentsLc","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","getTimezoneOffset","getDay","$match","RegExp","$consoleLog","console","log","$consoleError","$consoleTrace","trace","$consoleTime","time","$consoleTimeEnd","timeEnd","$consoleTimeLog","timeLog","operators","st","info","fArgs","aArgs","e","tempVarSym","keyName","compilationOperators","compilationMacros","POSITIVE_INFINITY","NEGATIVE_INFINITY","EPSILON","MAX_VALUE","MIN_VALUE","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","$bitLShift","$bitSRShift","$bitURShift","$bitNot","$bitAnd","reduce","$bitOr","$bitXor","$add","$sub","$mul","$sup","$div","$mod","$max","Math","$min","$avg","$floor","floor","$ceil","ceil","$round","round","$abs","abs","$sign","sign","Query","data","condition","y","desc","sort","start","groupBy","array","w","first","intermediate","single","filter","query","$length","$trim","$trimHead","trimLeft","$trimTail","trimRight","$replaceAll","$split","$join","$concat","$slice","$top","$tail","$push","$pop","$__at","$reverse","$reverseDestructive","$find","find","$filter","$map","$reduce","$reduceFromTail","reduceRight","$sort","$sortDestructive","$groupEvery","groupEvery","select","$groupBy","$orderBy","orderBy","$where","stop","step","from","$__letAsync","promise","Promise","resolve","reject","$__setAsync","$then","$resolveAll","promises","all","$resolveAny","invert","res","rej","ps","firstOf","$resolvePipe","lambdas","$resolveFork","resolvers","rejectors","pa","lp","forEach","L","LS","lisp","L_async","LS_async","lisp_async","LM","LM_async","$jsxProps","styles","styleName","matched","classes","z","cs","fragment","__html","__text","getJsxTagsParams","children","props","$jsxStandardTag","jsx","$jsxComponentTag","component","lsxConf","components","jsxFlagment","JsxFragment","LSX","LSX_async","runScriptTags","contentType","codes","document","querySelectorAll","innerHTML","builtinOperators","core","arithmetic","sequence","concurrent","builtinMacros","builtinSymbols"],"mappings":"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","file":"liyad.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"liyad\"] = factory();\n\telse\n\t\troot[\"liyad\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserState,\n         MaxEvaluationCountError } from './types';\nimport { globalObj }               from './consts';\n\n\n\nexport function setEvaluationCount(state: SxParserState) {\n    state.evalCount++;\n    if (state.config.maxEvalCount && state.config.maxEvalCount < state.evalCount) {\n        throw new MaxEvaluationCountError();\n    }\n}\n\n\nexport function checkParamsLength(name: string, args: ArrayLike<any>, min: number, max?: number) {\n    if (args.length < min) {\n        throw new Error(`[SX] ${name}: Invalid argument length: expected: ${min} / args: ${args.length}.`);\n    }\n    if (max && max < args.length) {\n        throw new Error(`[SX] ${name}: Invalid argument length: expected: ${max} / args: ${args.length}.`);\n    }\n    return args;\n}\n\n\nconst objConstructor = ({}).constructor; // NOTE: objConstructor            === Object\nconst funConstructor = Function;         // NOTE: ({}).toString.constructor === Function\n\nexport function checkUnsafeVarNames(name: string, varName: string) {\n    if (varName === '__proto__' ||\n        varName === '__defineGetter__' || varName === '__defineSetter__' ||\n        varName === '__lookupGetter__' || varName === '__lookupSetter__') {\n        throw new Error(`[SX] ${name}: Invalid var name ${varName}.`);\n    }\n    if (varName === 'prototype' || varName === 'constructor') {\n        throw new Error(`[SX] ${name}: Invalid var name ${varName}.`);\n    }\n    if (objConstructor.hasOwnProperty(varName)) {\n        throw new Error(`[SX] ${name}: Invalid var name ${varName}.`);\n    }\n    if (varName === 'call' || varName === 'arguments' || varName === 'caller') {\n        // NOTE: arguments, caller are not accessible in strict mode\n        throw new Error(`[SX] ${name}: Invalid var name ${varName}.`);\n    }\n    return varName;\n}\n\n\nexport function checkUnsafeVarNamesEx(name: string, target: any, varName: string) {\n    if (target === globalObj ||\n        varName === '__proto__' ||\n        varName === '__defineGetter__' || varName === '__defineSetter__' ||\n        varName === '__lookupGetter__' || varName === '__lookupSetter__') {\n        throw new Error(`[SX] ${name}: Invalid var name ${varName}.`);\n    }\n    if (varName === 'prototype' || varName === 'constructor') {\n        if (target === null || target === void 0 || typeof target === 'function') {\n            throw new Error(`[SX] ${name}: Invalid var name ${varName}.`);\n        }\n    }\n    if (target === null || target === void 0 || target === objConstructor) {\n        if (objConstructor.hasOwnProperty(varName)) {\n            throw new Error(`[SX] ${name}: Invalid var name ${varName}.`);\n        }\n    }\n    if (target === null || target === void 0 || target === funConstructor) {\n        // checking 'call', 'arguments', 'caller', ...\n        let con: any = funConstructor;\n        while (con) {\n            if (con.hasOwnProperty(varName)) {\n                throw new Error(`[SX] ${name}: Invalid var name ${varName}.`);\n            }\n            con = con.__proto__;\n        }\n    }\n    if (typeof target === 'function') {\n        if (!target.hasOwnProperty(varName)) {\n            // function's prototypes' members\n            throw new Error(`[SX] ${name}: Invalid var name ${varName}.`);\n        }\n    }\n    return varName;\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserState,\n         SxExternalValue,\n         SxSymbol,\n         SxDottedPair,\n         SxDottedFragment,\n         SxToken,\n         SxScope,\n         CapturedScopes,\n         SxMacroInfo }           from './types';\nimport { isSymbol }              from './ast';\nimport { setEvaluationCount,\n         checkUnsafeVarNamesEx } from './errors';\n\n\n\nexport function toNumber(x: any) {\n    switch (typeof x) {\n    case 'object': case 'symbol': case 'function':\n        return NaN;\n    default:\n        return Number(x);\n    }\n}\n\n\nexport function resolveUnquote(state: SxParserState, r: SxToken[]) {\n    for (let i = 0; i < r.length; i++) {\n        const symUnquote = Array.isArray(r[i]) && isSymbol((r[i] as SxToken[])[0], state.config.reservedNames.unquote);\n        if (symUnquote) {\n            r = r.slice(0, i).concat([evaluate(state, (r[i] as SxToken[])[1])], r.slice(i + 1));\n        }\n        if (Array.isArray(r[i])) {\n            r = r.slice(0);\n            r[i] = resolveUnquote(state, r[i] as SxToken[]);\n        }\n    }\n    return resolveSplice(state, r);\n}\n\n\nexport function resolveSplice(state: SxParserState, r: SxToken[]) {\n    if (state.config.enableSplice) {\n        for (let i = r.length - 1; i >= 0; i--) {\n            const symSplice = Array.isArray(r[i]) && isSymbol((r[i] as SxToken[])[0], state.config.reservedNames.splice);\n            if (symSplice) {\n                r = r.slice(0, i).concat((r[i] as SxToken[])[1], r.slice(i + 1));\n            }\n        }\n    }\n    return r;\n}\n\n\nexport function resolveMacro(state: SxParserState, x: SxSymbol, r: SxToken[]) {\n    const macroInfo = state.macroMap.get(x.symbol);\n    let lastErr = null;\n    if (macroInfo) {\n        let m: SxMacroInfo | undefined = macroInfo;\n        const r1 = r.slice(1);\n        while (m) {\n            if (m.formalArgs) {\n                const matchResult = matchMacroArgs(state, x.symbol, m.formalArgs, Boolean(m.lastIsSpread), r1);\n                if (! matchResult.error) {\n                    return {\n                        fn: m.fn(state, x.symbol, matchResult.formalArgs as SxSymbol[]),\n                        actualArgs: r.slice(0, 1).concat(matchResult.actualArgs as SxToken[]),\n                    };\n                }\n                lastErr = matchResult.error;\n                m = m.next;\n            } else {\n                return {\n                    fn: m.fn(state, x.symbol),\n                    actualArgs: r,\n                };\n            }\n        }\n        if (lastErr) {\n            throw new Error(lastErr);\n        }\n    }\n    return false;\n}\n\n\nexport function resolveFunctionSymbol(state: SxParserState, x: SxSymbol) {\n    if (typeof x === 'function') {\n        return x;\n    }\n    const funcInfo = state.funcMap.get(x.symbol);\n    if (funcInfo) {\n        return funcInfo.fn(state, x.symbol);\n    } else {\n        const v = resolveValueSymbol(state, x);\n        if (typeof v === 'function') {\n            return v;\n        }\n        if (state.config.funcSymbolResolverFallback) {\n            return state.config.funcSymbolResolverFallback(state, x.symbol);\n        }\n        if (state.config.raiseOnUnresolvedSymbol) {\n            throw new Error(`[SX] resolveFunctionSymbol: Unresolved symbol: ${x.symbol}.`);\n        }\n        return x.symbol;\n    }\n}\n\n\nexport function resolveValueSymbolScope(state: SxParserState, x: SxSymbol, nullIfNotDefined: boolean) {\n    for (let i = state.scopes.length - 1; i > 0; i--) {\n        const localScope: SxScope = state.scopes[i];\n        if (localScope && Object.prototype.hasOwnProperty.call(localScope.scope, x.symbol)) {\n            return localScope.scope;\n        }\n        if (localScope.capturedScopes &&\n            Object.prototype.hasOwnProperty.call(localScope.capturedScopes, x.symbol)) {\n            return localScope.capturedScopes[x.symbol];\n        }\n        if (! localScope.isBlockLocal) {\n            break;\n        }\n    }\n    const globalScope = getGlobalScope(state);\n    if (Object.prototype.hasOwnProperty.call(globalScope.scope, x.symbol)) {\n        return globalScope.scope;\n    }\n    return nullIfNotDefined ? null : getScope(state).scope;\n}\n\n\nexport function resolveValueSymbol(state: SxParserState, x: SxSymbol) {\n    const scope = resolveValueSymbolScope(state, x, true);\n    if (scope) {\n        return scope[x.symbol];\n    }\n    const symInfo = state.symbolMap.get(x.symbol);\n    if (symInfo) {\n        return symInfo.fn(state, x.symbol);\n    } else {\n        if (state.config.valueSymbolResolverFallback) {\n            return state.config.valueSymbolResolverFallback(state, x.symbol);\n        }\n        if (state.config.raiseOnUnresolvedSymbol) {\n            throw new Error(`[SX] resolveValueSymbol: Unresolved symbol: ${x.symbol}.`);\n        }\n        return x.symbol;\n    }\n}\n\n\nexport function collectCapturedVariables(state: SxParserState, names: SxSymbol[]): CapturedScopes {\n    const capturedScopes: CapturedScopes = {};\n    for (const n of names) {\n        const scope = resolveValueSymbolScope(state, n, true);\n        if (scope === null) {\n            throw new Error(`[SX] collectCapturedVariables: Unresolved symbols ${n}`);\n        }\n        checkUnsafeVarNamesEx('collectCapturedVariables', capturedScopes, n.symbol);\n        capturedScopes[n.symbol] = scope;\n    }\n    return capturedScopes;\n}\n\n\nexport function getCapturedScopes(state: SxParserState): CapturedScopes | undefined {\n    const a: CapturedScopes[] = [];\n    for (let i = state.scopes.length - 1; i > 0; i--) {\n        const localScope: SxScope = state.scopes[i];\n        if (localScope.capturedScopes) {\n            a.unshift(localScope.capturedScopes);\n        }\n        if (! localScope.isBlockLocal) {\n            break;\n        }\n    }\n    return a.length > 0 ? Object.assign({}, ...a) : void 0;\n}\n\n\nexport function installScope(state: SxParserState, scope: any, isBlockLocal: boolean, capturedScopes?: CapturedScopes): any {\n    state.scopes.push({isBlockLocal, scope, capturedScopes});\n}\n\n\nexport function uninstallScope(state: SxParserState): any {\n    if (state.scopes.length < 2) {\n        throw new Error(`[SX] uninstallScope: Unable to pop stack.`);\n    }\n    return state.scopes.pop();\n}\n\n\nexport function getScope(state: SxParserState) {\n    return state.scopes[state.scopes.length - 1];\n}\n\n\nexport function getGlobalScope(state: SxParserState) {\n    return state.scopes[0];\n}\n\n\nexport function matchMacroArgs(\n        state: SxParserState, macroName: string,\n        formalArgs: SxSymbol[], lastIsSpread: boolean, actualArgs: SxToken[]) {\n\n    formalArgs = formalArgs.slice(0);\n    actualArgs = actualArgs.slice(0);\n    if ((actualArgs.length + (lastIsSpread ? 1 : 0)) < formalArgs.length) {\n        return ({ error: `[SX] macro call (${macroName}): Actual args too short: actual ${\n            actualArgs.length} / formal ${formalArgs.length}.` });\n    }\n    for (let i = formalArgs.length - (lastIsSpread ? 2 : 1); i >= 0; i--) {\n        let nm = formalArgs[i].symbol;\n        if (nm.startsWith('!')) {\n            formalArgs[i].symbol = formalArgs[i].symbol.slice(1);\n            nm = formalArgs[i].symbol;\n\n            if (! isSymbol(actualArgs[i])) {\n                return ({ error: `[SX] macro call (${macroName}): Actual arg(${i}: ${nm}) is not symbol.` });\n            }\n        } else if (nm.startsWith('<') && nm.endsWith('>')) {\n            formalArgs[i].symbol = formalArgs[i].symbol.slice(1, -1);\n            nm = formalArgs[i].symbol;\n\n            if (isSymbol(actualArgs[i], nm)) {\n                formalArgs = formalArgs.slice(0, i).concat(formalArgs.slice(i + 1));\n                actualArgs = actualArgs.slice(0, i).concat(actualArgs.slice(i + 1));\n            } else {\n                return ({ error: `[SX] macro call (${macroName}): Actual arg(${i}: ${nm}) is not expected symbol.` });\n            }\n        } else {\n            const tpos = nm.lastIndexOf(':');\n            if (0 < tpos) {\n                const tname = nm.slice(tpos + 1);\n                switch (tname) {\n                case 'number':\n                    if (typeof actualArgs[i] !== 'number') {\n                        return ({ error: `[SX] macro call (${macroName}): Actual arg(${i}: ${nm}) is not number.` });\n                    }\n                    break;\n                case 'string':\n                    if (typeof actualArgs[i] !== 'string') {\n                        return ({ error: `[SX] macro call (${macroName}): Actual arg(${i}: ${nm}) is not string.` });\n                    }\n                    break;\n                case 'function':\n                    if (! (Array.isArray(actualArgs[i]) && isSymbol((actualArgs[i] as any)[0]))) {\n                        return ({ error: `[SX] macro call (${macroName}): Actual arg(${i}: ${nm}) is not function.` });\n                    }\n                    break;\n                case 'list':\n                    if (! Array.isArray(actualArgs[i])) {\n                        return ({ error: `[SX] macro call (${macroName}): Actual arg(${i}: ${nm}) is not list.` });\n                    }\n                    break;\n                case 'symbol':\n                    if (! isSymbol(actualArgs[i])) {\n                        return ({ error: `[SX] macro call (${macroName}): Actual arg(${i}: ${nm}) is not symbol.` });\n                    }\n                    break;\n                case 'any':\n                    break;\n                default:\n                    return ({ error: `[SX] macro call (${macroName}): Formal arg(${i}: ${nm}) is unknown type ${tname}.` });\n                }\n                formalArgs[i].symbol = formalArgs[i].symbol.slice(0, tpos);\n            }\n        }\n    }\n    return ({ formalArgs, actualArgs });\n}\n\n\nexport function optimizeTailCall(state: SxParserState, formalArgs: SxSymbol[], fnBody: SxToken[]) {\n    // S expression: ($__lambda '(sym1 ... symN) 'expr1 ... 'exprN)\n    //    formalArgs: 'sym1 ... 'symN\n    //        fnBody: 'expr1 ... 'exprN\n    if (Array.isArray(fnBody[fnBody.length - 1])) {\n        const front = fnBody.slice(0, fnBody.length - 1);\n        const tail = fnBody[fnBody.length - 1];\n        if (tail && (typeof tail[0] === 'object') && tail[0].symbol === state.config.reservedNames.if) {\n            // S expression: ($if cond t-expr f-expr)\n            if (Array.isArray(tail[3]) && (typeof tail[3][0] === 'object') && tail[3][0].symbol === state.config.reservedNames.self) {\n                // S expression (recursive):\n                //     (                                 ;; fnBody\n                //         expr1 ... exprN-1             ;; front\n                //         ($if cond                     ;; tail[0] [1]\n                //             t-expr                    ;;     [2]\n                //             ($self                    ;;     [3]\n                //                 rArgs1 ... rArgsN) )  ;; tail[4] ... [N+4]\n                //     )\n                //\n                //  -> S exp (tail call optimization):\n                //     (                                                                  ;; fnBody\n                //         ($until cond                                                   ;; tail[1]\n                //             ($clisp-let (tempsym1 ... tempsymN)                        ;;\n                //                 expr1 ... exprN-1                                      ;; front\n                //                 ($set tempsym1   rArgs1) ... ($set tempsymN   rArgsN)  ;; tail[4] ... [N+4]\n                //                 ($set     sym1 tempsym1) ... ($set     symN tempsymN)  ;;\n                //             )                                                          ;;\n                //         )                                                              ;;\n                //         expr1 ... exprN-1                                              ;; front\n                //         t-expr                                                         ;; tail[2]\n                //     )\n\n                const varBaseName = `$__tempvar__$$ec${state.evalCount++}$$_`;\n                const tempVarsSyms = formalArgs.map((a, idx) => ({symbol: `${varBaseName}_$i${idx}_${a.symbol}`}));\n\n                return [\n                    [{symbol: state.config.reservedNames.until}, tail[1],\n                        [{symbol: state.config.reservedNames.let}, [...tempVarsSyms],\n                            ...front,\n                            ...((tail[3].slice(1) as any[]).map((x: any, idx) =>\n                                [{symbol: state.config.reservedNames.set}, tempVarsSyms[idx], x])),\n                            ...(tempVarsSyms.map((x, idx) =>\n                                [{symbol: state.config.reservedNames.set}, formalArgs[idx], x])),\n                        ],\n                    ],\n                    ...front,\n                    tail[2],\n                ];\n            }\n        }\n    }\n    return fnBody;\n}\n\n\nexport function evaluate(state: SxParserState, x: SxToken): SxToken {\n    setEvaluationCount(state);\n\n    if (x === null || x === void 0) {\n        return x;\n    }\n    let r: SxToken = x;\n\n    for (;;) {\n        if (Array.isArray(r)) {\n            if (r.length === 0) {\n                return r;\n            }\n            r = resolveSplice(state, r);\n            const sym = isSymbol(r[0]);\n            if (sym) {\n                const m = resolveMacro(state, sym, r);\n                if (m) {\n                    r = m.fn(m.actualArgs as SxToken[]);\n                } else {\n                    break;\n                }\n            } else {\n                break;\n            }\n        } else {\n            break;\n        }\n        setEvaluationCount(state);\n    }\n\n    if (Array.isArray(r)) {\n        r = r.slice(0);\n        if (0 < r.length) {\n            const sym = isSymbol(r[0]);\n            if (sym) {\n                if (sym.symbol === state.config.reservedNames.quote) {\n                    return r.slice(1, 2)[0];\n                }\n                if (sym.symbol === state.config.reservedNames.backquote) {\n                    r = r.slice(1, 2)[0];\n                    if (Array.isArray(r)) {\n                        r = resolveUnquote(state, r);\n                    }\n                    return r;\n                }\n                if (sym.symbol === state.config.reservedNames.eval) {\n                    return evaluate(state, evaluate(state, r.slice(1, 2)[0]));\n                }\n            }\n\n            const sprs = [];\n            for (let i = 1; i < r.length; i++) {\n                const symSpr = Array.isArray(r[i]) && isSymbol((r[i] as SxToken[])[0], state.config.reservedNames.spread);\n                if (symSpr) {\n                    sprs.push(i);\n                    const a = evaluate(state, (r[i] as SxToken[])[1]);\n                    r[i] = Array.isArray(a) ? a : [a];\n                } else {\n                    r[i] = evaluate(state, r[i]);\n                }\n            }\n            for (const i of sprs.reverse()) {\n                r = (r as SxToken[]).slice(0, i).concat(r[i], r.slice(i + 1));\n            }\n\n            let fn: any;\n            if (typeof r[0] === 'function') {\n                fn = r[0];\n            } else if (sym) {\n                fn = resolveFunctionSymbol(state, sym);\n            } else {\n                fn = evaluate(state, r[0]);\n            }\n\n            if (typeof fn === 'function') {\n                r = (fn as any)(...(r.slice(1)));\n            } else {\n                throw new Error(`[SX] evaluate: First item of list is not a function: ${JSON.stringify(r)}.`);\n            }\n        }\n    } else if (state.config.wrapExternalValue && Object.prototype.hasOwnProperty.call(r, 'value')) {\n        r = (r as SxExternalValue).value;\n    } else if (Object.prototype.hasOwnProperty.call(r, 'symbol')) {\n        r = resolveValueSymbol(state, r as SxSymbol);\n    } else if (Object.prototype.hasOwnProperty.call(r, 'car')) {\n        const car = evaluate(state, (r as SxDottedPair).car);\n        const cdr = evaluate(state, (r as SxDottedPair).cdr);\n        if (Array.isArray(cdr)) {\n            const a = (cdr as any[]).slice(0);\n            a.unshift(car);\n            r = a;\n        } else {\n            r = { car, cdr };\n        }\n    } else if (Object.prototype.hasOwnProperty.call(r, 'dotted')) {\n        r = [\n            evaluate(state, (r as SxDottedFragment).dotted),\n        ];\n    } else if (Object.prototype.hasOwnProperty.call(r, 'comment')) {\n        r = [];\n    }\n\n    return r;\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserState,\n         SxSymbol }     from './types';\n\n\n\nexport function quote(state: SxParserState, x: any) {\n    return [{symbol: state.config.reservedNames.quote}, x];\n}\n\n\nexport function isQuoted(state: SxParserState, x: any) {\n    if (Array.isArray(x) && 0 < x.length) {\n        const q = isSymbol(x);\n        if (q && q.symbol === state.config.reservedNames.quote) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\nexport function backquote(state: SxParserState, x: any) {\n    return [{symbol: state.config.reservedNames.backquote}, x];\n}\n\n\nexport function isBackquoted(state: SxParserState, x: any) {\n    if (Array.isArray(x) && 0 < x.length) {\n        const q = isSymbol(x);\n        if (q && q.symbol === state.config.reservedNames.backquote) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\nexport function wrapByUnquote(state: SxParserState, x: any) {\n    return [{symbol: state.config.reservedNames.unquote}, x];\n}\n\n\nexport function isUnquoted(state: SxParserState, x: any) {\n    if (Array.isArray(x) && 0 < x.length) {\n        const q = isSymbol(x);\n        if (q && q.symbol === state.config.reservedNames.unquote) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\nexport function spread(state: SxParserState, x: any) {\n    return [{symbol: state.config.reservedNames.spread}, x];\n}\n\n\nexport function splice(state: SxParserState, x: any) {\n    return [{symbol: state.config.reservedNames.splice}, x];\n}\n\n\nexport function isSymbol(x: any, name?: string): SxSymbol | null {\n    if (x && typeof x === 'object' && Object.prototype.hasOwnProperty.call(x, 'symbol')) {\n        if (name !== void 0) {\n            return x.symbol === name ? x : null;\n        } else {\n            return x;\n        }\n    }\n    return null;\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserState,\n         SxToken }             from '../types';\nimport { isSymbol }            from '../ast';\nimport { resolveSplice,\n         resolveMacro,\n         resolveValueSymbol,\n         getScope }            from '../evaluate';\nimport { setEvaluationCount,\n         checkUnsafeVarNamesEx,\n         checkUnsafeVarNames } from '../errors';\n\n\n\nexport function applyMacros(state: SxParserState, tok: SxToken) {\n    let r: SxToken = tok;\n    for (;;) {\n        if (Array.isArray(r)) {\n            if (r.length === 0) {\n                break;\n            }\n            r = resolveSplice(state, r);\n            const sym = isSymbol(r[0]);\n            if (sym) {\n                const m = resolveMacro(state, sym, r);\n                if (m) {\n                    r = m.fn(m.actualArgs as SxToken[]);\n                } else {\n                    break;\n                }\n            } else {\n                break;\n            }\n        } else {\n            break;\n        }\n        setEvaluationCount(state);\n    }\n    return r;\n}\n\n\nexport function stripQuote(state: SxParserState, tok: SxToken) {\n    if (! (Array.isArray(tok) && isSymbol((tok as any)[0], state.config.reservedNames.quote))) {\n        throw new Error(`[SX] stripQuote: token is not quoted.`);\n    }\n    return (tok as any)[1];\n}\n\n\nexport function stripQuoteOrPass(state: SxParserState, tok: SxToken) {\n    if (Array.isArray(tok) && isSymbol((tok as any)[0], state.config.reservedNames.quote)) {\n        return (tok as any)[1];\n    } else {\n        return tok;\n    }\n}\n\n\nexport function getScope_stateApplied(state: SxParserState) {\n    return (function() { return getScope(state); });\n}\n\n\nexport function resolveValueSymbol_dynamic(state: SxParserState, varName: string) {\n    checkUnsafeVarNames('(compiler)resolveValueSymbol_dynamic', varName);\n    return (function(){ return resolveValueSymbol(state, {symbol: varName}); });\n}\n\nexport function checkUnsafeVarNames_dynamic(name: string) {\n    return (function(varName: string){ return checkUnsafeVarNames(name, varName); });\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\n\nexport type SxMacro = (state: SxParserState, name: string, formalArgs?: SxSymbol[]) => (list: SxToken[]) => SxToken;\n\nexport interface SxMacroInfo {\n    name: string;\n    fn: SxMacro;\n\n    formalArgs?: SxSymbol[];\n    lastIsSpread?: boolean;\n    next?: SxMacroInfo;\n}\n\n\nexport type SxFunc = (state: SxParserState, name: string) => (...args: any[]) => any;\n\nexport interface SxFuncInfo {\n    name: string;\n    fn: SxFunc;\n\n    // TODO: overloading\n    // formalArgs?: SxSymbol[];\n    // lastIsSpread?: boolean;\n    // next?: SxFuncInfo;\n}\n\n\nexport type SxSymbolResolver = (state: SxParserState, name: string) => any;\n\nexport interface SxSymbolInfo {\n    name: string;\n    fn: SxSymbolResolver;\n}\n\n\nexport interface CapturedScopes { [s: string]: { [s: string]: any; }; }\n\nexport interface SxScope {\n    isBlockLocal: boolean;\n    scope: any;           // { [s: string]: any; };\n    capturedScopes?: CapturedScopes;\n}\n\n\nexport interface SxReservedNames {\n    eval: string;\n    quote: string;\n    backquote: string;\n    unquote: string;\n    spread: string;\n    splice: string;\n\n    car: string;\n    cdr: string;\n    cons: string;\n    atom: string;\n    eq: string;\n    list: string;\n\n    let: string;\n    lambda: string;\n    self: string;\n    defun: string;\n    thiz: string;\n\n    if: string;\n    cond: string;\n\n    while: string;\n    doWhile: string;\n    until: string;\n    doUntil: string;\n\n    get: string;\n    defvar: string;\n    setq: string;\n    set: string;\n    call: string;\n\n    not: string;\n    and: string;\n    or: string;\n\n    isSymbol: string;\n    gensym: string;\n    raise: string;\n    catch: string;\n\n    Template: string;\n}\n\nexport interface SxParserConfig {\n    raiseOnUnresolvedSymbol: boolean;\n    enableEvaluate: boolean;\n    enableHereDoc: boolean;\n    enableSpread: boolean;\n    enableSplice: boolean;\n    enableShorthands: boolean;\n    enableVerbatimStringLiteral: boolean;\n    enableTailCallOptimization: boolean;\n    enableRegExpMatchOperators: boolean; // IMPORTANT: Turn off to prevent ReDoS when executing untrusted code\n    enableCompilationOperators: boolean; // IMPORTANT: Turn off to prevent DoS when executing untrusted code\n    stripComments: boolean;\n    wrapExternalValue: boolean;\n    reservedNames: SxReservedNames;\n    returnMultipleRoot: boolean;\n    maxEvalCount: number;                // IMPORTANT: Set positive value to prevent DoS when executing untrusted code\n\n    jsx?: (comp: any, props: any, ...children: any[]) => any;\n    JsxFragment?: any;\n\n    funcs: SxFuncInfo[];\n    macros: SxMacroInfo[];\n    symbols: SxSymbolInfo[];\n\n    funcSymbolResolverFallback?: SxFunc;\n    valueSymbolResolverFallback?: SxSymbolResolver;\n}\n\nexport interface SxParserState {\n    strings: TemplateStringsArray | string[];\n    values: any[];\n\n    index: number;\n    pos: number;\n    line: number;\n\n    evalCount: number;\n\n    scopes: SxScope[];\n\n    macroMap: Map<string, SxMacroInfo>;\n    funcMap: Map<string, SxFuncInfo>;\n    symbolMap: Map<string, SxSymbolInfo>;\n\n    config: SxParserConfig;\n}\n\nexport interface SxEof {\n    eof: boolean; // true: truely EOF comes. false: detect virtual EOF.\n    eofSeq?: string;\n}\n\nexport interface SxExternalValue {\n    value: any;\n}\n\nexport interface SxSymbol {\n    'symbol': string;\n\n    // TODO: debug info\n    // _fileName?: string;\n    // _line?: number;\n    // _col?: number;\n}\n\nexport interface SxComment {\n    comment: string;\n}\n\nexport interface SxDottedPair {\n    car: SxToken; // left\n    cdr: SxToken; // right\n}\n\nexport interface SxDottedFragment {\n    dotted: SxToken; // right\n}\n\n\nexport type SxTokenChild = SxSymbol | SxDottedPair | SxDottedFragment | SxComment | SxExternalValue | string | number | boolean | null | /*SxToken*/ any[];\nexport type SxToken      = SxSymbol | SxDottedPair | SxDottedFragment | SxComment | SxExternalValue | string | number | boolean | null | SxTokenChild[];\nexport type SxChar = string | SxEof | SxExternalValue;\nexport type SxAtom = SxSymbol | string | number | boolean | null;\nexport type SxList = SxDottedPair | SxAtom[];\n\n\n\nexport type CompilerOperator = (r: SxToken[], args: SxToken[]) => string;\n\n\nexport interface CompilerContext {\n    _$_vars: any[];\n    varsCount: number;\n    varNames: Map<string, string>;\n    varNamesCount: number;\n    varDefs: string;\n    ops: Map<string, CompilerOperator>;\n    makeScope: (scoped: () => void) => void;\n    compileToken: (body: any[], i: number) => string;\n}\n\n\nexport interface LsxConfig {\n    jsx: (comp: any, props: any, ...children: any[]) => any;\n    jsxFlagment: any;\n    components: object;\n}\n\n\nexport class FatalError extends Error {\n    public constructor(message?: string | undefined) {\n        super(message);\n    }\n}\n\n\nexport class MaxEvaluationCountError extends FatalError {\n    public constructor() {\n        super(`[SX] evaluate: The maximum count of evaluations has been exceeded.`);\n    }\n}\n\n\nexport class ScriptTerminationError extends FatalError {\n    public constructor(where: string) {\n        super(`[SX] ${where}: Unexpected termination of script.`);\n    }\n}\n\n\nexport interface SExpressionRepl<R = SxToken> {\n    (strings: TemplateStringsArray | string, ...values: any[]): R;\n    sync: (strings: TemplateStringsArray | string, ...values: any[]) => R;\n}\n\n\nexport interface SExpressionTemplateFn<R = SxToken> {\n    (strings: TemplateStringsArray | string, ...values: any[]): R;\n    evaluateAST: (ast: SxToken[]) => R;\n    repl: () => SExpressionRepl<R>;\n    setGlobals: (globals: object) => SExpressionTemplateFn<R>;\n    appendGlobals: (globals: object) => SExpressionTemplateFn<R>;\n    setStartup: (strings: TemplateStringsArray | string, ...values: any[]) => SExpressionTemplateFn<R>;\n    setStartupAST: (ast: SxToken[]) => SExpressionTemplateFn<R>;\n    appendStartup: (strings: TemplateStringsArray | string, ...values: any[]) => SExpressionTemplateFn<R>;\n    appendStartupAST: (ast: SxToken[]) => SExpressionTemplateFn<R>;\n    install: (installer: (config: SxParserConfig) => SxParserConfig) => SExpressionTemplateFn<R>;\n}\n\n\nexport interface SExpressionAsyncRepl<R = SxToken> {\n    (strings: TemplateStringsArray | string, ...values: any[]): Promise<R>;\n    sync: (strings: TemplateStringsArray | string, ...values: any[]) => Promise<R>;\n}\n\n\nexport interface SExpressionAsyncTemplateFn<R = SxToken> {\n    (strings: TemplateStringsArray | string, ...values: any[]): Promise<R>;\n    evaluateAST: (ast: SxToken[]) => Promise<R>;\n    repl: () => SExpressionAsyncRepl<R>;\n    setGlobals: (globals: object) => SExpressionAsyncTemplateFn<R>;\n    appendGlobals: (globals: object) => SExpressionAsyncTemplateFn<R>;\n    setStartup: (strings: TemplateStringsArray | string, ...values: any[]) => SExpressionAsyncTemplateFn<R>;\n    setStartupAST: (ast: SxToken[]) => SExpressionAsyncTemplateFn<R>;\n    appendStartup: (strings: TemplateStringsArray | string, ...values: any[]) => SExpressionAsyncTemplateFn<R>;\n    appendStartupAST: (ast: SxToken[]) => SExpressionAsyncTemplateFn<R>;\n    install: (installer: (config: SxParserConfig) => SxParserConfig) => SExpressionAsyncTemplateFn<R>;\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\n// tslint:disable-next-line:function-constructor\nexport const globalObj = Function('return this')();\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserState,\n         SxSymbol,\n         SxToken,\n         SxFuncInfo,\n         CompilerOperator,\n         CompilerContext  }           from './types';\nimport { isSymbol }                   from './ast';\nimport { getCapturedScopes,\n         optimizeTailCall }           from './evaluate';\nimport { checkUnsafeVarNamesEx }      from './errors';\nimport { applyMacros,\n         stripQuoteOrPass,\n         resolveValueSymbol_dynamic } from './compile.ops/helpers';\nimport { registerOperators }          from './compile.ops';\n\n\n\n// tslint:disable-next-line:variable-name\nfunction compileCore(state: SxParserState, formalArgs: SxSymbol[], lastIsSpread: boolean, fnBody: any[], _$_vars: any[]) {\n\n    function makeScope(scoped: () => void) {\n        const varNamesCopy = new Map<string, string>();\n        for (const x of ctx.varNames.entries()) {\n            varNamesCopy.set(x[0], x[1]);\n        }\n        scoped();\n        ctx.varNames = varNamesCopy;\n    }\n\n\n    function compileValue(b: any) {\n        let compFnBody = '';\n        if (b === null) {\n            compFnBody += '(null)';\n        } else if (b === void 0) {\n            compFnBody += '(void 0)';\n        } else switch (typeof b) {\n        case 'boolean': case 'number':\n            compFnBody += `(${String(b)})`;\n            break;\n        case 'object':\n            if (isSymbol(b)) {\n                const sym = b as SxSymbol;\n                checkUnsafeVarNamesEx('(compiler)compileValue', ctx.varNames, sym.symbol);\n                if (ctx.varNames.has(sym.symbol)) {\n                    compFnBody += `(${ctx.varNames.get(sym.symbol)})`;\n                } else {\n                    _$_vars[ctx.varsCount] = sym.symbol;\n                    compFnBody += `(_$_vars[${String(ctx.varsCount++)}])`;\n                }\n                break;\n            } else {}\n            // FALL_THRU\n        default:\n            _$_vars[ctx.varsCount] = b;\n            compFnBody += `(_$_vars[${String(ctx.varsCount++)}])`;\n            break;\n        }\n        return compFnBody;\n    }\n\n\n    function compileToken(body: any[], i: number) {\n        let compFnBody = '';\n        const b = body[i];\n        if (Array.isArray(b)) {\n            if (0 < b.length) {\n                const r: SxToken = applyMacros(state, b);\n                if (Array.isArray(r)) {\n                    if (0 < r.length) {\n                        if (isSymbol(r[0])) {\n                            const sym = r[0] as SxSymbol;\n                            const args = r.slice(1);\n                            checkUnsafeVarNamesEx('(compiler)compileToken', ops, sym.symbol);\n                            if (ops.has(sym.symbol)) {\n                                compFnBody += (ops.get(sym.symbol) as CompilerOperator)(r, args);\n                            } else {\n                                if (sym.symbol === state.config.reservedNames.spread) {\n                                    compFnBody += `...(${\n                                        args.map((x) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')})`;\n                                } else if (state.funcMap.has(sym.symbol)) {\n                                    _$_vars[ctx.varsCount] = (state.funcMap.get(sym.symbol) as SxFuncInfo).fn(state, '');\n                                    compFnBody += `((_$_vars[${String(ctx.varsCount++)}])(${\n                                        args.map((x) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')}))`;\n                                } else if (ctx.varNames.has(sym.symbol)) {\n                                    compFnBody += `(${String(ctx.varNames.get(sym.symbol))})(${\n                                        args.map((x) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')})`;\n                                } else {\n                                    _$_vars[ctx.varsCount] = resolveValueSymbol_dynamic(state, sym.symbol);\n                                    compFnBody += `((_$_vars[${String(ctx.varsCount++)}])()(${\n                                        args.map((x) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')}))`;\n                                }\n                            }\n                        } else {\n                            switch (typeof r[0]) {\n                            case 'function':\n                                _$_vars[ctx.varsCount] = r[0];\n                                compFnBody += `((_$_vars[${String(ctx.varsCount++)}])(${\n                                    r.slice(1).map((x, idx, arr) => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')}))`;\n                                break;\n                            default:\n                                throw new Error(`[SX] compileToken: First item of list is not a function: ${JSON.stringify(r[0])}.`);\n                            }\n                        }\n                    } else {\n                        compFnBody += '([])';\n                    }\n                } else {\n                    compFnBody += compileValue(b);\n                }\n            } else {\n                compFnBody += '([])';\n            }\n        } else {\n            compFnBody += compileValue(b);\n        }\n        return compFnBody;\n    }\n\n\n    const ctx: CompilerContext = {\n        _$_vars,\n        varsCount: 1,\n        varNames: new Map<string, string>(),\n        varNamesCount: 0,\n        varDefs: 'var x0;',\n        ops: new Map<string, CompilerOperator>(),\n        makeScope,\n        compileToken,\n    };\n\n    registerOperators(state, ctx);\n    const ops = ctx.ops;\n\n    if (state.config.enableTailCallOptimization) {\n        fnBody = optimizeTailCall(state, formalArgs, fnBody);\n    }\n\n    // set 'this' object\n    ctx.varNames.set(state.config.reservedNames.thiz, `(this===(Function('return this')())?null:(this===void 0?null:this))`);\n\n    const capturedScopes = getCapturedScopes(state);\n    if (capturedScopes) {\n        for (const x in capturedScopes) {\n            if (Object.prototype.hasOwnProperty.call(capturedScopes, x)) {\n                _$_vars[ctx.varsCount++] = x;\n                _$_vars[ctx.varsCount] = capturedScopes[x];\n                ctx.varNames.set(x, `(_$_vars[${String(ctx.varsCount)}][_$_vars[${String(ctx.varsCount - 1)}]])`);\n                ctx.varsCount++;\n            }\n        }\n    }\n\n    const compFormalArgs = `${formalArgs.map((x, i) => {\n        ctx.varNames.set(formalArgs[i].symbol, 'a' + i);\n        return `${(lastIsSpread && i === formalArgs.length - 1) ? '...' : ''}a${i}`;\n    }).join(',')}`;\n\n    const compFnBodyRoot = `return(${fnBody.map((x, i) => compileToken(fnBody, i)).join(',')})`;\n    return `(function(${compFormalArgs}){\"strict\";${ctx.varDefs}${compFnBodyRoot}})`;\n}\n\n\n// tslint:disable-next-line:variable-name\nfunction evalCompiledLambda(_$_state: SxParserState, _$_vars: any[], code: string) {\n    // tslint:disable-next-line:no-eval\n    _$_vars[0] = eval(code);\n    return _$_vars[0];\n}\n\n\nexport function compileLambda(state: SxParserState, formalArgs: SxSymbol[], lastIsSpread: boolean, fnBody: any[]) {\n    // tslint:disable-next-line:variable-name\n    const _$_vars: any[] = [];\n    return evalCompiledLambda(state, _$_vars, compileCore(state, formalArgs, lastIsSpread, fnBody, _$_vars));\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserState,\n         SxSymbol,\n         SxToken,\n         CompilerContext }             from '../types';\nimport { isSymbol }                    from '../ast';\nimport { checkParamsLength,\n         checkUnsafeVarNamesEx,\n         checkUnsafeVarNames }         from '../errors';\nimport { stripQuote,\n         stripQuoteOrPass,\n         getScope_stateApplied,\n         resolveValueSymbol_dynamic,\n         checkUnsafeVarNames_dynamic } from './helpers';\n\n\n\nexport function registerOperators(state: SxParserState, ctx: CompilerContext) {\n    const {\n        _$_vars,\n        ops,\n        makeScope,\n        compileToken,\n    } = ctx;\n\n\n    ops.set(state.config.reservedNames.quote, function(r: SxToken[], args: SxToken[]) {\n        let compFnBody = '';\n        _$_vars[ctx.varsCount] = r[1];\n        compFnBody += `(_$_vars[${String(ctx.varsCount++)}])`;\n        return compFnBody;\n    });\n\n\n    ops.set(state.config.reservedNames.self, function(r: SxToken[], args: SxToken[]) {\n        let compFnBody = '';\n        compFnBody += `((_$_vars[0])(${\n            args.map(x => compileToken([stripQuoteOrPass(state, x)], 0)).join(',')}))`;\n        return compFnBody;\n    });\n\n\n    ops.set('$__if', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($__if condition 't-expr 'f-expr)\n        //  -> (if condition is true ) S expr  : t-expr\n        //  -> (if condition is false) S expr  : f-expr\n        let compFnBody = '';\n        checkParamsLength('compileToken:$__if', args, 2, 3);\n        compFnBody += `(${compileToken(r, 1)}?(${\n            compileToken([stripQuote(state, r[2])], 0)}):(${\n            compileToken([stripQuote(state, r[3])], 0)}))`;\n        return compFnBody;\n    });\n\n\n    ops.set('$__if-null', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($__if-null condition 'null-expr)\n        //  -> (if condition is not null ) S expr  : condition\n        //  -> (if condition is null)      S expr  : null-expr\n        let compFnBody = '';\n        checkParamsLength('compileToken:$__if-null', args, 2, 2);\n        compFnBody += `((()=>{let _$_rv=${compileToken(r, 1)};return _$_rv?_$_rv:(${\n            compileToken([stripQuote(state, r[2])], 0)}});})())`;\n        return compFnBody;\n    });\n\n\n    ops.set('$__cond', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($__cond 'cond1 'expr1 ... 'condN 'exprN)\n        //  -> (if (eval condI) is true ) S expr  : exprI\n        //  -> (if no matched)            S expr  : null\n        let compFnBody = '';\n        {\n            checkParamsLength('compileToken:$__cond', args, 1);\n            compFnBody += `(`;\n            for (let p = 0; p < args.length; p += 2) {\n                compFnBody += `${compileToken([stripQuote(state, args[p])], 0)}?(${\n                    compileToken([stripQuote(state, args[p + 1])], 0)}):(`;\n            }\n            compFnBody += `null`;\n            for (let p = 0; p < args.length; p += 2) {\n                compFnBody += `)`;\n            }\n            compFnBody += `)`;\n        }\n        return compFnBody;\n    });\n\n\n    ops.set('$__while', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($__while 'condition 'expr1 ... 'exprN)\n        //  -> (if condition is true at least 1 or more times) S expr  : exprN\n        //  -> (else)                                          S expr  : null\n        let compFnBody = '';\n        checkParamsLength('compileToken:$__while', args, 1);\n        compFnBody += `((()=>{let _$_rv=null;while(${\n            compileToken([stripQuote(state, r[1])], 0)}){_$_rv=${\n            r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')\n            }}return _$_rv})())`;\n        return compFnBody;\n    });\n\n\n    ops.set('$__do-while', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($__do-while 'condition 'expr1 ... 'exprN)\n        //  -> (if condition is true at least 1 or more times) S expr  : exprN\n        //  -> (else)                                          S expr  : null\n        let compFnBody = '';\n        checkParamsLength('compileToken:$__do-until', args, 1);\n        compFnBody += `((()=>{let _$_rv=null;do{_$_rv=${\n            r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')}}}while(${\n            compileToken([stripQuote(state, r[1])], 0)})return _$_rv)())`;\n        return compFnBody;\n    });\n\n\n    ops.set('$__until', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($__until 'condition 'expr1 ... 'exprN)\n        //  -> (if condition is true at least 1 or more times) S expr  : exprN\n        //  -> (else)                                          S expr  : null\n        let compFnBody = '';\n        checkParamsLength('compileToken:$__until', args, 1);\n        compFnBody += `((()=>{let _$_rv=null;while(!${\n            compileToken([stripQuote(state, r[1])], 0)}){_$_rv=${\n            r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')\n            }}return _$_rv})())`;\n        return compFnBody;\n    });\n\n\n    ops.set('$__do-until', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($__do-until 'condition 'expr1 ... 'exprN)\n        //  -> (if condition is true at least 1 or more times) S expr  : exprN\n        //  -> (else)                                          S expr  : null\n        let compFnBody = '';\n        checkParamsLength('compileToken:$__do-until', args, 1);\n        compFnBody += `((()=>{let _$_rv=null;do{_$_rv=${\n            r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')}}}while(!${\n            compileToken([stripQuote(state, r[1])], 0)})return _$_rv)())`;\n        return compFnBody;\n    });\n\n\n    ops.set('$__repeat', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($__repeat 'i n-times 'expr1 ... 'exprN)\n        //  -> (if n > 0) S expr  : exprN\n        //  -> (else)     S expr  : null\n        let compFnBody = '';\n        checkParamsLength('compileToken:$__repeat', args, 2);\n        if (! isSymbol(args[0])) {\n            throw new Error(`[SX] compileToken: $__repeat : args[0] is not symbol.`);\n        }\n        makeScope(() => {\n            const name = 'v' + ctx.varNamesCount++;\n            ctx.varNames.set((args[0] as SxSymbol).symbol, name);\n            compFnBody += `(((_$_n)=>{let _$_rv=null;for(let ${name}=0;${name}<_$_n;${name}++){_$_rv=${\n                r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')\n                }}return _$_rv})(${compileToken(args, 1)}))`;\n        });\n        return compFnBody;\n    });\n\n\n    ops.set('$__for', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($__for 'x list 'expr1 ... 'exprN)\n        //  -> (if list.length > 0) S expr  : exprN\n        //  -> (else)               S expr  : null\n        let compFnBody = '';\n        checkParamsLength('compileToken:$__for', args, 2);\n        if (! isSymbol(args[0])) {\n            throw new Error(`[SX] compileToken: $__for : args[0] is not symbol.`);\n        }\n        makeScope(() => {\n            const name = 'v' + ctx.varNamesCount++;\n            ctx.varNames.set((args[0] as SxSymbol).symbol, name);\n            compFnBody += `(((_$_l)=>{let _$_rv=null;for(const ${name} of _$_l){_$_rv=${\n                r.slice(2).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')\n                }}return _$_rv})(${compileToken(args, 1)}))`;\n        });\n        return compFnBody;\n    });\n\n\n    ops.set('$__scope', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($__scope isBlockLocal returnMultiple '((name value) | name ...) 'expr1 ... 'exprN)\n        //  -> (if returnMultiple)  S expr  : [expr1 ... exprN]\n        //  -> (else)               S expr  : exprN\n        let compFnBody = '';\n        checkParamsLength('compileToken:$__scope', args, 2);\n        // r[1]: isBlockLocal\n        // r[2]: returnMultiple\n        if (! Array.isArray(r[3])) {\n            throw new Error(`[SX] compileToken: $__scope : args[2] is not array.`);\n        }\n        makeScope(() => {\n            for (const x of stripQuote(state, r[3]) as any[]) {\n                let name = '';\n                if (Array.isArray(x)) {\n                    if (x.length < 1) {\n                        throw new Error(`[SX] compileToken: $__scope : args[0][?] is too short.`);\n                    }\n                    if (! isSymbol(x[0])) {\n                        throw new Error(`[SX] compileToken: $__scope : args[0][?][0] is not symbol.`);\n                    }\n                    name = x[0].symbol;\n                    compFnBody += `(${'v' + ctx.varNamesCount}=${compileToken(x, 1)})`;\n                } else {\n                    if (! isSymbol(x)) {\n                        throw new Error(`[SX] compileToken: $__scope : args[0][?] is not symbol.`);\n                    }\n                    name = x.symbol;\n                }\n                ctx.varDefs += `var v${ctx.varNamesCount}=void 0;`;\n                ctx.varNames.set(name, 'v' + ctx.varNamesCount++);\n            }\n            const s = `${r.slice(4).map((x) => compileToken([stripQuote(state, x)], 0)).join(',')}`;\n            compFnBody += r[2] ? `[${s}]` : `(${s})`;\n        });\n        return compFnBody;\n    });\n\n\n    ops.set('$__try', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($__try 'expr 'catch-expr)\n        //  ->                               S expr  : expr\n        //  -> (if error is raised in expr)  S expr  : catch-expr\n        let compFnBody = '';\n        checkParamsLength('compileToken:$__try', args, 1, 2);\n        compFnBody += `((()=>{try{${\n            compileToken([stripQuote(state, r[1])], 0)}}catch(e${\n            ctx.varNamesCount}){let e${ctx.varNamesCount + 1}=(_$_vars[${String(ctx.varsCount)}])();`;\n        _$_vars[ctx.varsCount++] = getScope_stateApplied(state);\n        makeScope(() => {\n            ctx.varNames.set('$error', 'e' + ctx.varNamesCount++);\n            ctx.varNames.set('$parent', 'e' + ctx.varNamesCount++);\n            compFnBody += `${\n                compileToken([stripQuote(state, r[2])], 0)}}})())`;\n        });\n        return compFnBody;\n    });\n\n\n    ops.set(state.config.reservedNames.raise, function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($raise 'expr)\n        //  -> S expr  : -\n        let compFnBody = '';\n        compFnBody += `((()=>{throw ${\n            compileToken([stripQuoteOrPass(state, r[1])], 0)}})())`;\n        return compFnBody;\n    });\n\n\n    ops.set('$boolean', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($boolean any)\n        //  -> S expr  : boolean\n        let compFnBody = '';\n        checkParamsLength('compileToken:$boolean', args, 1, 1);\n        compFnBody += `((x0=${compileToken(args, 0)\n            }),(Array.isArray(x0)&&x0.length===0?false:boolean(x0)))`;\n        return compFnBody;\n    });\n\n\n    ops.set('$__get', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($__get 'nameOrIndex1 ... 'nameOrIndexN)\n        //  -> S expr  : any\n        let compFnBody = '';\n        checkParamsLength('compileToken:$__get', args, 1);\n        const quoted = stripQuote(state, r[1]);\n        const name = isSymbol(quoted) ? quoted.symbol : (typeof quoted === 'string' ? quoted : null);\n        if (typeof name !== 'string') {\n            throw new Error(`[SX] compileToken: $__get : operand is not symbol: ${JSON.stringify(r[1])}.`);\n        }\n        let vName = '';\n        if (ctx.varNames.has(name)) {\n            vName = ctx.varNames.get(name) as string;\n        } else {\n            _$_vars[ctx.varsCount] = resolveValueSymbol_dynamic(state, name);\n            vName = `_$_vars[${String(ctx.varsCount++)}]`;\n        }\n        const regToVars = (symName: string) => {\n            _$_vars[ctx.varsCount] = symName;\n            return `_$_vars[${String(ctx.varsCount++)}]`;\n        };\n        compFnBody += `((${vName})${r.slice(2).map((x, idx, arr) => `[${\n            isSymbol(arr[idx]) ?\n                regToVars((arr as any)[idx].symbol) :\n                compileToken(arr, idx)}]`).join('')})`;\n        return compFnBody;\n    });\n\n\n    ops.set('$__let', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($__let 'nameStrOrSymbol expr)\n        //  -> S expr  : any\n        let compFnBody = '';\n        checkParamsLength('compileToken:$__let', args, 2, 2);\n        const quoted = stripQuote(state, r[1]);\n        const name = isSymbol(quoted) ? quoted.symbol : (typeof quoted === 'string' ? quoted : null);\n        if (typeof name !== 'string') {\n            throw new Error(`[SX] compileToken: $__let : operand is not rvalue: ${JSON.stringify(r[1])}.`);\n        }\n        if (! ctx.varNames.has(name)) {\n            ctx.varDefs += `var v${ctx.varNamesCount}=void 0;`;\n            ctx.varNames.set(name, 'v' + ctx.varNamesCount++);\n        }\n        compFnBody += `(${ctx.varNames.get(name)}=${compileToken(r, 2)})`;\n        return compFnBody;\n    });\n\n\n    ops.set('$__set', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($__set 'nameOrListOfNameOrIndex expr)\n        //  -> S expr  : any\n        let compFnBody = '';\n        checkParamsLength('compileToken:$__set', args, 2);\n        const quoted = stripQuote(state, r[1]);\n        const name = isSymbol(quoted) ?\n            quoted.symbol :\n            (typeof quoted === 'string' ?\n                quoted :\n                (Array.isArray(quoted) ?\n                    (isSymbol(quoted[0]) ?\n                        quoted[0].symbol :\n                        (typeof quoted[0] === 'string' ? quoted[0] : null)\n                    ) :\n                    null\n                )\n            );\n        if (typeof name !== 'string') {\n            throw new Error(`[SX] compileToken: $__set : operand is not rvalue: ${JSON.stringify(r[1])}.`);\n        }\n        let vName = '';\n        if (ctx.varNames.has(name)) {\n            vName = ctx.varNames.get(name) as string;\n        } else {\n            _$_vars[ctx.varsCount] = resolveValueSymbol_dynamic(state, name);\n            vName = `_$_vars[${String(ctx.varsCount++)}]`;\n        }\n        const regToVars = (symName: string) => {\n            _$_vars[ctx.varsCount] = checkUnsafeVarNames('compileToken:$__set', symName);\n            return `_$_vars[${String(ctx.varsCount++)}]`;\n        };\n        let checkNameCalled = false;\n        let checkNamePos = '';\n        const checkName = (str: string) => {\n            if (! checkNameCalled) {\n                _$_vars[ctx.varsCount] = checkUnsafeVarNames_dynamic('compileToken:$__set');\n                checkNamePos = String(ctx.varsCount++);\n                checkNameCalled = true;\n            }\n            return `(_$_vars[${checkNamePos}](${str}))`;\n        };\n        compFnBody += `((${vName})${(Array.isArray(quoted) ? quoted.slice(1) : []).map((x, idx, arr) => `[${\n            isSymbol(arr[idx]) ?\n                regToVars((arr as any)[idx].symbol) :\n                checkName(compileToken(arr, idx))}]`).join('')}=${compileToken(r, 2)})`;\n        return compFnBody;\n    });\n\n\n    ops.set(state.config.reservedNames.not, function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($not any)\n        //  -> S expr  : boolean\n        let compFnBody = '';\n        checkParamsLength('compileToken:$not', args, 1, 1);\n        compFnBody += `(!${compileToken(args, 0)})`;\n        return compFnBody;\n    });\n\n\n    ops.set('$__and', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($__and 'expr1 ... 'exprN)\n        //  -> (if all of ($boolean expr1) ... ($boolean exprN) are true) S expr  : exprN\n        //  -> (else)                                                     S expr  : expr-i (false left most)\n        let compFnBody = '';\n        checkParamsLength('compileToken:$__and', args, 1);\n        compFnBody += `(${args.map((x) => compileToken([stripQuote(state, x)], 0)).join('&&')})`;\n        return compFnBody;\n    });\n\n\n    ops.set('$__or', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($__or 'expr1 ... 'exprN)\n        //  -> (if any ($boolean expr1) ... ($boolean exprN) are true) S expr  : expr-i (where i: index of item first ($boolean expr-i) is to be true)\n        //  -> (else)                                                  S expr  : expr-i (false right most)\n        let compFnBody = '';\n        checkParamsLength('compileToken:$__or', args, 1);\n        compFnBody += `(${args.map((x) => compileToken([stripQuote(state, x)], 0)).join('||')})`;\n        return compFnBody;\n    });\n\n\n    ops.set('===', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($eq arg1 arg2)\n        //  -> (if arg1 === arg2)  S expr  : true\n        //  -> (else)              S expr  : false\n        let compFnBody = '';\n        checkParamsLength('compileToken:===', args, 2, 2);\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('===')})`;\n        return compFnBody;\n    });\n\n\n    ops.set('!==', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($not-eq arg1 arg2)\n        //  -> (if arg1 !== arg2)  S expr  : true\n        //  -> (else)              S expr  : false\n        let compFnBody = '';\n        checkParamsLength('compileToken:!==', args, 2, 2);\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('!==')})`;\n        return compFnBody;\n    });\n\n\n    ops.set('==', function(r: SxToken[], args: SxToken[]) {\n        // S expression: (== a b)\n        //  -> S expr  : boolean\n        let compFnBody = '';\n        checkParamsLength('compileToken:==', args, 2, 2);\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('==')})`;\n        return compFnBody;\n    });\n\n\n    ops.set('!=', function(r: SxToken[], args: SxToken[]) {\n        // S expression: (!= a b)\n        //  -> S expr  : boolean\n        let compFnBody = '';\n        checkParamsLength('compileToken:!=', args, 2, 2);\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('!=')})`;\n        return compFnBody;\n    });\n\n\n    ops.set('<', function(r: SxToken[], args: SxToken[]) {\n        // S expression: (< a b)\n        //  -> S expr  : boolean\n        let compFnBody = '';\n        checkParamsLength('compileToken:<', args, 2, 2);\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('<')})`;\n        return compFnBody;\n    });\n\n\n    ops.set('<=', function(r: SxToken[], args: SxToken[]) {\n        // S expression: (<= a b)\n        //  -> S expr  : boolean\n        let compFnBody = '';\n        checkParamsLength('compileToken:<=', args, 2, 2);\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('<=')})`;\n        return compFnBody;\n    });\n\n\n    ops.set('>', function(r: SxToken[], args: SxToken[]) {\n        // S expression: (> a b)\n        //  -> S expr  : boolean\n        let compFnBody = '';\n        checkParamsLength('compileToken:>', args, 2, 2);\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('>')})`;\n        return compFnBody;\n    });\n\n\n    ops.set('>=', function(r: SxToken[], args: SxToken[]) {\n        // S expression: (>= a b)\n        //  -> S expr  : boolean\n        let compFnBody = '';\n        checkParamsLength('compileToken:<=', args, 2, 2);\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('>=')})`;\n        return compFnBody;\n    });\n\n\n    ops.set('$concat', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($concat listOrString1 ... listOrStringN)\n        //  -> S expr  : listOrString\n        let compFnBody = '';\n        checkParamsLength('compileToken:$concat', args, 1);\n        let w1 = '';\n        if (Array.isArray(args[0]) && isSymbol((args[0] as any)[0], state.config.reservedNames.spread)) {\n            const w0 = compileToken(args[0] as any, 1);\n            w1 = `(${w0}[0]).concat((${w0}.length>1?${w0}[1]:(typeof ${w0}[0]==='string'?'':[])),`;\n        } else {\n            w1 = `${compileToken(args as any, 0)}.concat(`;\n        }\n        compFnBody += `(${w1}${\n            args.slice(1).map((x, idx, arr) => compileToken(arr, idx)).join(',')}))`;\n        return compFnBody;\n    });\n\n\n    ops.set('+', function(r: SxToken[], args: SxToken[]) {\n        // S expression: (+ number1 ... numberN)\n        //  -> S expr  : number\n        let compFnBody = '';\n        checkParamsLength('compileToken:+', args, 1);\n\n        let hasSpread = false;\n        args.map((x, idx, arr) => {\n            if (Array.isArray(x) && isSymbol((x as any)[0], state.config.reservedNames.spread)) {\n                hasSpread = true;\n            }\n        });\n        if (hasSpread) {\n            compFnBody += `((()=>{let _$_rv=[];${\n                args.map((x, idx, arr) => `_$_rv.push(${compileToken(arr, idx)})`).join(';')\n            };return _$_rv.reduce((x,y)=>x+y);})())`;\n        } else {\n            compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('+')})`;\n        }\n        return compFnBody;\n    });\n\n\n    ops.set('-', function(r: SxToken[], args: SxToken[]) {\n        // S expression: (- number1 ... numberN)\n        //  -> S expr  : number\n        let compFnBody = '';\n        checkParamsLength('compileToken:-', args, 1);\n\n        let hasSpread = false;\n        args.map((x, idx, arr) => {\n            if (Array.isArray(x) && isSymbol((x as any)[0], state.config.reservedNames.spread)) {\n                hasSpread = true;\n            }\n        });\n        if (hasSpread) {\n            compFnBody += `((()=>{let _$_rv=[];${\n                args.map((x, idx, arr) => `_$_rv.push(${compileToken(arr, idx)})`).join(';')\n                };return (_$_rv.length>1?(_$_rv.reduce((x,y)=>x-y)):(_$_rv.length>0?-_$_rv[0]:NaN));})())`;\n        } else {\n            compFnBody += `(${r.length > 2 ?\n                args.map((x, idx, arr) => compileToken(arr, idx)).join('-') :\n                `-(${String(compileToken(r, 1))})`})`;\n        }\n        return compFnBody;\n    });\n\n\n    ops.set('*', function(r: SxToken[], args: SxToken[]) {\n        // S expression: (* number1 ... numberN)\n        //  -> S expr  : number\n        let compFnBody = '';\n        checkParamsLength('compileToken:*', args, 2);\n\n        let hasSpread = false;\n        args.map((x, idx, arr) => {\n            if (Array.isArray(x) && isSymbol((x as any)[0], state.config.reservedNames.spread)) {\n                hasSpread = true;\n            }\n        });\n        if (hasSpread) {\n            compFnBody += `((()=>{let _$_rv=[];${\n                args.map((x, idx, arr) => `_$_rv.push(${compileToken(arr, idx)})`).join(';')\n                };return _$_rv.reduce((x,y)=>x*y);})())`;\n        } else {\n            compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('*')})`;\n        }\n        return compFnBody;\n    });\n\n\n    ops.set('**', function(r: SxToken[], args: SxToken[]) {\n        // S expression: (** number1 ... numberN)\n        //  -> S expr  : number\n        let compFnBody = '';\n        checkParamsLength('compileToken:**', args, 2);\n\n        let hasSpread = false;\n        args.map((x, idx, arr) => {\n            if (Array.isArray(x) && isSymbol((x as any)[0], state.config.reservedNames.spread)) {\n                hasSpread = true;\n            }\n        });\n        if (hasSpread) {\n            compFnBody += `((()=>{let _$_rv=[];${\n                args.map((x, idx, arr) => `_$_rv.push(${compileToken(arr, idx)})`).join(';')\n                };return _$_rv.reduce((x,y)=>x**y);})())`;\n        } else {\n            compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('**')})`;\n        }\n        return compFnBody;\n    });\n\n\n    ops.set('/', function(r: SxToken[], args: SxToken[]) {\n        // S expression: (/ number1 ... numberN)\n        //  -> S expr  : number\n        let compFnBody = '';\n        checkParamsLength('compileToken:/', args, 2);\n\n        let hasSpread = false;\n        args.map((x, idx, arr) => {\n            if (Array.isArray(x) && isSymbol((x as any)[0], state.config.reservedNames.spread)) {\n                hasSpread = true;\n            }\n        });\n        if (hasSpread) {\n            compFnBody += `((()=>{let _$_rv=[];${\n                args.map((x, idx, arr) => `_$_rv.push(${compileToken(arr, idx)})`).join(';')\n                };return _$_rv.reduce((x,y)=>x/y);})())`;\n        } else {\n            compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('/')})`;\n        }\n        return compFnBody;\n    });\n\n\n    ops.set('%', function(r: SxToken[], args: SxToken[]) {\n        // S expression: (% number1 ... numberN)\n        //  -> S expr  : number\n        let compFnBody = '';\n        checkParamsLength('compileToken:%', args, 2);\n\n        let hasSpread = false;\n        args.map((x, idx, arr) => {\n            if (Array.isArray(x) && isSymbol((x as any)[0], state.config.reservedNames.spread)) {\n                hasSpread = true;\n            }\n        });\n        if (hasSpread) {\n            compFnBody += `((()=>{let _$_rv=[];${\n                args.map((x, idx, arr) => `_$_rv.push(${compileToken(arr, idx)})`).join(';')\n                };return _$_rv.reduce((x,y)=>x%y);})())`;\n        } else {\n            compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('%')})`;\n        }\n        return compFnBody;\n    });\n\n\n    ops.set('<<', function(r: SxToken[], args: SxToken[]) {\n        // S expression: (<< number shift)\n        //  -> S expr  : number\n        let compFnBody = '';\n        checkParamsLength('compileToken:<<', args, 2, 2);\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('<<')})`;\n        return compFnBody;\n    });\n\n\n    ops.set('>>', function(r: SxToken[], args: SxToken[]) {\n        // S expression: (>> number shift)\n        //  -> S expr  : number\n        let compFnBody = '';\n        checkParamsLength('compileToken:>>', args, 2, 2);\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('>>')})`;\n        return compFnBody;\n    });\n\n\n    ops.set('>>>', function(r: SxToken[], args: SxToken[]) {\n        // S expression: (>>> number shift)\n        //  -> S expr  : number\n        let compFnBody = '';\n        checkParamsLength('compileToken:>>>', args, 2, 2);\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('>>>')})`;\n        return compFnBody;\n    });\n\n\n    ops.set('$bit-not', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($bit-not number)\n        //  -> S expr  : number\n        let compFnBody = '';\n        checkParamsLength('compileToken:$bit-not', args, 1, 1);\n        compFnBody += `(~(${compileToken(r, 1)}))`;\n        return compFnBody;\n    });\n\n\n    ops.set('$bit-and', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($bit-and numberA numberB)\n        //  -> S expr  : number\n        let compFnBody = '';\n        checkParamsLength('compileToken:$bit-and', args, 2, 2);\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('&')})`;\n        return compFnBody;\n    });\n\n\n    ops.set('$bit-or', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($bit-or numberA numberB)\n        //  -> S expr  : number\n        let compFnBody = '';\n        checkParamsLength('compileToken:$bit-or', args, 2, 2);\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('|')})`;\n        return compFnBody;\n    });\n\n\n    ops.set('$bit-xor', function(r: SxToken[], args: SxToken[]) {\n        // S expression: ($bit-xor numberA numberB)\n        //  -> S expr  : number\n        let compFnBody = '';\n        checkParamsLength('compileToken:$bit-xor', args, 2, 2);\n        compFnBody += `(${args.map((x, idx, arr) => compileToken(arr, idx)).join('^')})`;\n        return compFnBody;\n    });\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxReservedNames,\n         SxParserConfig } from './types';\n\n\n\nexport const defaultReservedNames: SxReservedNames = {\n    eval: '$eval',\n    quote: '$quote',\n    backquote: '$backquote',\n    unquote: '$unquote',\n    spread: '$spread',\n    splice: '$splice',\n\n    car: '$car',\n    cdr: '$cdr',\n    cons: '$cons',\n    atom: '$atom',\n    eq: '$eq',\n    list: '$list',\n\n    let: '$clisp-let',\n    lambda: '$lambda',\n    self: '$self',\n    defun: '$defun',\n    thiz: '$this',\n\n    if: '$if',\n    cond: '$cond',\n\n    while: '$while',\n    doWhile: '$do-while',\n    until: '$until',\n    doUntil: '$do-until',\n\n    get: '$get',\n    defvar: '$clisp-defvar',\n    setq: '$clisp-setq',\n    set: '$set',\n    call: '$call',\n\n    not: '$not',\n    and: '$and',\n    or: '$or',\n\n    isSymbol: '$is-symbol',\n    gensym: '$gensym',\n    raise: '$raise',\n    catch: '$catch',\n\n    Template: 'Template',\n};\n\nexport const defaultConfig: SxParserConfig = {\n    raiseOnUnresolvedSymbol: false,\n    enableEvaluate: true,\n    enableHereDoc: true,\n    enableSpread: true,\n    enableSplice: true,\n    enableShorthands: true,\n    enableVerbatimStringLiteral: true,\n    enableTailCallOptimization: true,\n    enableRegExpMatchOperators: true,\n    enableCompilationOperators: true,\n    stripComments: false,\n    wrapExternalValue: true,\n    returnMultipleRoot: false,\n    maxEvalCount: 0,\n\n    reservedNames: defaultReservedNames,\n    symbols: [],\n    macros: [],\n    funcs: [],\n};\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserState,\n         SxEof,\n         SxExternalValue,\n         SxSymbol,\n         SxDottedFragment,\n         SxComment,\n         SxToken,\n         SxChar,\n         ScriptTerminationError } from './types';\nimport { quote,\n         backquote,\n         wrapByUnquote,\n         spread,\n         splice }                 from './ast';\n\n\n\nfunction isEOF(ch: SxChar): boolean {\n    return typeof ch === 'object' && Object.prototype.hasOwnProperty.call(ch, 'eof');\n}\n\n\nfunction isSpace(ch: SxChar): boolean {\n    return typeof ch === 'string' && ch.trim().length === 0;\n}\n\n\nfunction isNumberFirstChar(ch: SxChar): boolean {\n    return typeof ch === 'string' && /^[0-9\\+\\-]$/.test(ch);\n}\n\n\nfunction isNumberAfterSignChar(ch: SxChar): boolean {\n    return typeof ch === 'string' && /^[0-9]$/.test(ch);\n}\n\n\nfunction isSymbolFirstChar(ch: SxChar): boolean {\n    return typeof ch === 'string' &&\n        !isSpace(ch) &&\n        !isNumberFirstChar(ch);\n}\n\n\n\nfunction lookCurrentLineHint(state: SxParserState): string {\n    return `line: ${state.line} / strings: ${state.index} / pos: ${state.pos} :${\n        state.strings.length > state.index ?\n            state.strings[state.index].slice(state.pos, state.pos + 20) : ''}`;\n}\n\n\nfunction getChar(state: SxParserState, virtualEof?: string[], disableEscape?: boolean): SxChar {\n    if (state.strings.length <= state.index) {\n        return {eof: true};\n    }\n    if (state.strings[state.index].length <= state.pos) {\n        if ((! state.values) || (state.values.length <= state.index)) {\n            state.pos = 0;\n            state.index++;\n            return getChar(state);\n        } else {\n            const ch = {value: state.values[state.index]};\n            state.pos = 0;\n            state.index++;\n            return ch;\n        }\n    }\n    if (virtualEof) {\n        for (const v of virtualEof) {\n            const ch = state.strings[state.index].slice(state.pos, state.pos + v.length);\n            if (ch === v) {\n                state.pos += v.length;\n                state.line += ch.split('\\n').length - 1;\n                return { eof: false , eofSeq: v };\n            }\n        }\n    }\n    {\n        let ch = state.strings[state.index].slice(state.pos, state.pos + 1);\n        state.pos++;\n\n        if (ch === '\\n') {\n            state.line++;\n        }\n\n        if ((! disableEscape) && ch === '\\\\') {\n            if (state.strings[state.index].length <= state.pos) {\n                throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\n            }\n            ch = state.strings[state.index].slice(state.pos, state.pos + 1);\n            state.pos++;\n\n            switch (ch) {\n            case 'b':\n                ch = '\\b';\n                break;\n            case 't':\n                ch = '\\t';\n                break;\n            case 'n':\n                ch = '\\n';\n                break;\n            case 'v':\n                ch = '\\v';\n                break;\n            case 'f':\n                ch = '\\f';\n                break;\n            case 'r':\n                ch = '\\r';\n                break;\n            case 'U': case 'u':\n                {\n                    if (state.strings[state.index].slice(state.pos, state.pos + 1) === '{') {\n                        let ch1 = '';\n                        for (let i = 0; i < 6; i++) {\n                            const ch2 = state.strings[state.index].slice(state.pos + i, state.pos + 1 + i);\n                            if (ch2 === '}') {\n                                if (i === 0) {\n                                    throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\n                                }\n                                state.pos += i;\n                                break;\n                            } else if (! /^[0-9A-Fa-f]{1}$/.test(ch1)) {\n                                throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\n                            }\n                            ch1 += ch2;\n                        }\n                        if (state.strings[state.index].slice(state.pos, state.pos + 1) !== '}') {\n                            throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\n                        }\n                        state.pos++;\n                        ch = String.fromCodePoint(Number.parseInt(ch1, 16));\n                    } else {\n                        const ch1 = state.strings[state.index].slice(state.pos, state.pos + 4);\n                        if (! /^[0-9A-Fa-f]{4}$/.test(ch1)) {\n                            throw new Error(`[SX] getChar: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\n                        }\n                        state.pos += 4;\n                        ch = String.fromCodePoint(Number.parseInt(ch1, 16));\n                    }\n                }\n                break;\n            }\n        }\n        return ch;\n    }\n}\n\n\nfunction lookAheads(state: SxParserState, n: number, virtualEof?: string[], disableEscape?: boolean): SxChar[] {\n    const index = state.index;\n    const pos = state.pos;\n    const line = state.line;\n    const chs: SxChar[] = [];\n\n    try {\n        for (let i = 0; i < n; i++) {\n            chs.push(getChar(state, virtualEof, disableEscape));\n        }\n    } finally {\n        state.index = index;\n        state.pos = pos;\n        state.line = line;\n    }\n\n    return chs;\n}\n\n\nfunction lookAhead(state: SxParserState, virtualEof?: string[], disableEscape?: boolean): SxChar {\n    const index = state.index;\n    const pos = state.pos;\n    const line = state.line;\n    let ch: SxChar;\n\n    try {\n        ch = getChar(state, virtualEof, disableEscape);\n    } finally {\n        state.index = index;\n        state.pos = pos;\n        state.line = line;\n    }\n\n    return ch;\n}\n\n\nfunction skipWhitespaces(state: SxParserState): void {\n    let ch = lookAhead(state);\n    while (!isEOF(ch) && isSpace(ch)) {\n        getChar(state);\n        ch = lookAhead(state);\n    }\n}\n\n\n\nfunction parseNumber(state: SxParserState, virtualEof?: string[]): number {\n    let s = '';\n    let ch = lookAhead(state, virtualEof);\n\n    while (! isEOF(ch)) {\n        if (typeof ch === 'string') {\n            if (/^0[XxOoBb][0-9]*$/.test(s + ch)) {\n                getChar(state, virtualEof);\n                s += ch;\n            } else if (/^[0-9\\+\\-\\.EeInfinityNaN]+$/.test(s + ch)) {\n                getChar(state, virtualEof);\n                s += ch;\n            } else {\n                break;\n            }\n        } else {\n            break;\n        }\n\n        ch = lookAhead(state, virtualEof);\n    }\n\n    if (! /^([\\+\\-]?\\d*\\.?\\d+(?:[Ee][\\+\\-]?\\d+)?)|(0[XxOoBb][0-9]+)|([\\+\\-]Infinity)|(NaN)$/.test(s)) {\n        throw new Error(`[SX] parseNumber: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\n    }\n    return Number(s);\n}\n\n\nfunction parseSymbol(state: SxParserState, virtualEof?: string[]): SxSymbol | number | null {\n    let s = '';\n    let ch = lookAhead(state, virtualEof);\n\n    while (! isEOF(ch)) {\n        if (typeof ch === 'string') {\n            if (isSpace(ch)) {\n                break;\n            } else if (ch === '#' && lookAheads(state, 2, virtualEof)[1] === '|') {\n                break;\n            } else if (/^[^.;()\"]+$/.test(s + ch)) {\n                getChar(state, virtualEof);\n                s += ch;\n            } else {\n                break;\n            }\n        } else {\n            if (typeof ch === 'object' && Object.prototype.hasOwnProperty.call(ch, 'value')) {\n                getChar(state, virtualEof);\n                const v = (ch as SxExternalValue).value;\n                s += String(ch);\n            } else {\n                throw new Error(`[SX] parseSymbol: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\n            }\n        }\n\n        ch = lookAhead(state, virtualEof);\n    }\n\n    if (state.config.enableShorthands) {\n        let m: RegExpMatchArray | null = null;\n        // tslint:disable-next-line:no-conditional-assignment\n        if (m = s.match(/^:((?:\\:[^=:]+?)+?)=$/)) {\n            // ::foo:bar:baz= -> ($splice ($set (foo bar baz)))\n            const ws = m[1].slice(1).split(':');\n            const z =\n                [{symbol: state.config.reservedNames.splice},\n                    [{symbol: state.config.reservedNames.set},\n                        ws\n                    ]\n                ];\n            return z as any;\n        }\n        // tslint:disable-next-line:no-conditional-assignment\n        else if (m = s.match(/^:((?:\\:[^@:]+?)+?)@([^@:]+?)$/)) {\n            // ::foo:bar@baz -> ($splice ($call ($get foo bar) baz))\n            const ws = m[1].slice(1).split(':');\n            const z =\n                [{symbol: state.config.reservedNames.splice},\n                    [{symbol: state.config.reservedNames.call},\n                        [{symbol: state.config.reservedNames.get}, ...ws],\n                        {symbol: m[2]},\n                    ]\n                ];\n            return z as any;\n        }\n        // tslint:disable-next-line:no-conditional-assignment\n        else if (m = s.match(/^:((?:\\:[^:]+?)+?)$/)) {\n            // ::foo:bar:baz -> ($get foo bar baz)\n            const ws = m[1].slice(1).split(':');\n            const z = [{symbol: state.config.reservedNames.get}, ...ws];\n            return z as any;\n        }\n    }\n\n    return {symbol: s};\n}\n\n\nfunction parseStringOrComment(\n        state: SxParserState, eof: string[],\n        valuesStartSeq: string | null,\n        valuesStopChar: string,\n        disableEscape: boolean,\n        allowPhysicalEof: boolean,\n    ): { strings: string[], values: any[] } {\n\n    const eofSeqs = valuesStartSeq ? [...eof, valuesStartSeq] : eof;\n    const strings: string[] = [];\n    const values: any[] = [];\n\n    for (;;) {\n        let s = '';\n        let ch = lookAhead(state, eofSeqs, disableEscape);\n\n        while (! isEOF(ch)) {\n            if (typeof ch === 'string') {\n                getChar(state, eofSeqs, disableEscape);\n                s += ch;\n            } else {\n                if (typeof ch === 'object' && Object.prototype.hasOwnProperty.call(ch, 'value')) {\n                    getChar(state, eofSeqs, disableEscape);\n                    const v = (ch as SxExternalValue).value;\n                    s += String(ch);\n                } else {\n                    throw new Error(`[SX] parseStringOrComment: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\n                }\n            }\n\n            ch = lookAhead(state, eofSeqs, disableEscape);\n        }\n\n        getChar(state, eofSeqs, disableEscape);\n\n        if ((ch as SxEof).eof === true) {\n            if (! allowPhysicalEof) {\n                throw new ScriptTerminationError('parseStringOrComment');\n            }\n        }\n\n        strings.push(s);\n\n        if ((ch as SxEof).eofSeq === valuesStartSeq) {\n            values.push(parseList(state, valuesStopChar, []));\n        } else {\n            break;\n        }\n    }\n\n    return { strings, values };\n}\n\n\nfunction parseString(state: SxParserState, disableEscape: boolean): string {\n    return parseStringOrComment(state, ['\"'], null, ')', disableEscape, false).strings[0];\n}\n\n\nfunction parseHereDoc(state: SxParserState, symbol: SxSymbol, attrs: SxToken[] | null): SxToken[] {\n    const q: SxToken[] = [symbol];\n\n    if (attrs) {\n        q.push(attrs);\n    }\n\n    const inner = parseStringOrComment(state, ['\"\"\"'], '%%%(', ')', false, false);\n    for (let i = 0; i < inner.strings.length; i++) {\n        q.push(inner.strings[i]);\n        if (i < inner.values.length) {\n            q.push(inner.values[i]);\n        }\n    }\n\n    return q;\n}\n\n\nfunction parseSingleLineComment(state: SxParserState): SxComment | ' ' {\n    return {\n        comment: parseStringOrComment(state, ['\\r', '\\n'], null, ')', false, true).strings[0]\n    };\n}\n\n\nfunction parseMultiLineComment(state: SxParserState): SxComment | ' ' {\n    return {\n        comment: parseStringOrComment(state, ['|#'], null, ')', false, false).strings[0]\n    };\n}\n\n\nfunction parseOneToken(state: SxParserState): SxToken {\n    skipWhitespaces(state);\n    let ch = lookAhead(state);\n\n    while (! isEOF(ch)) {\n        switch (ch) {\n        case ')':\n            throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\n\n        case '(':\n            getChar(state);\n            return parseList(state, ')', []);\n\n        case \"'\": case \"`\": case ',':\n            {\n                getChar(state);\n                const ahead = lookAhead(state);\n                let isSpliceUnquote = false;\n                if (ch === ',' && ahead === '@') {\n                    getChar(state);\n                    isSpliceUnquote = true;\n                }\n                skipWhitespaces(state);\n                const ret = (ch === \"'\" ?\n                        quote :\n                        (ch === \"`\" ? backquote : wrapByUnquote))\n                    (state, parseOneToken(state)\n                );\n                return (isSpliceUnquote ? splice(state, ret) : ret);\n            }\n\n        case \".\":\n            {\n                getChar(state);\n                const aheads = lookAheads(state, 2);\n                if (state.config.enableSpread && aheads[0] === '.' && aheads[1] === '.') {\n                    getChar(state);\n                    getChar(state);\n                    skipWhitespaces(state);\n                    return spread(state, parseOneToken(state));\n                } else {\n                    skipWhitespaces(state);\n                    return {dotted: parseOneToken(state)};\n                }\n            }\n\n        case ';':\n            getChar(state);\n            return parseSingleLineComment(state);\n\n        case '#':\n            {\n                const aheads = lookAheads(state, 2);\n                if (aheads[1] === '|') {\n                    getChar(state);\n                    getChar(state);\n                    return parseMultiLineComment(state);\n                } else {\n                    return parseSymbol(state);\n                }\n            }\n\n        case '\"':\n            {\n                getChar(state);\n                const aheads = lookAheads(state, 4);\n                if (state.config.enableHereDoc && aheads[0] === '\"' && aheads[1] === '\"') {\n                    let isHereDoc = true;\n                    if (isEOF(aheads[2]) || isSpace(aheads[2])) {\n                        // here doc\n                    } else if (isNumberFirstChar(aheads[2])) { // TODO: single +/- char is a symbol.\n                        if (aheads[2] === '+' || aheads[2] === '-') {\n                            if (! isNumberAfterSignChar(aheads[3])) {\n                                isHereDoc = false;\n                            }\n                        }\n                        // here doc\n                    } else if (isSymbolFirstChar(aheads[2])) {\n                        isHereDoc = false;\n                    } else {\n                        // here doc\n                    }\n                    getChar(state);\n                    getChar(state);\n\n                    let sym: SxSymbol | number | null = null;\n                    let attrs: SxToken[] | null = null;\n                    if (isHereDoc) {\n                        sym = {symbol: state.config.reservedNames.Template};\n                    } else {\n                        sym = parseSymbol(state, ['@']);\n                        if (sym === null) {\n                            throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\n                        }\n                        if (typeof sym === 'number') {\n                            throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\n                        }\n                        const ahs = lookAheads(state, 2);\n                        if (ahs[0] === '@') {\n                            if (ahs[1] !== '{') {\n                                throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\n                            }\n                            getChar(state);\n                            getChar(state);\n                            const a = parseList(state, '}', [{symbol: '@'}]);\n                            if (Array.isArray(a)) {\n                                attrs = a;\n                            }\n                        }\n                    }\n\n                    return parseHereDoc(state, sym, attrs);\n                } else {\n                    return parseString(state, false);\n                }\n            }\n\n        case '@':\n            if (state.config.enableVerbatimStringLiteral) {\n                const aheads = lookAheads(state, 2);\n                if (aheads[1] === '\"') {\n                    getChar(state);\n                    getChar(state);\n                    return parseString(state, true);\n                }\n            }\n            // FALL_THRU\n\n        default:\n            if (typeof ch !== 'string') {\n                if (typeof ch === 'object' && Object.prototype.hasOwnProperty.call(ch, 'value')) {\n                    getChar(state);\n                    return state.config.wrapExternalValue ? ch : (ch as SxExternalValue).value;\n                } else {\n                    throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\n                }\n            } else if (isSpace(ch)) {\n                break;\n            } else if (isNumberFirstChar(ch)) { // TODO: single +/- char is a symbol.\n                if (ch === '+' || ch === '-') {\n                    const aheads = lookAheads(state, 2);\n                    if (! isNumberAfterSignChar(aheads[1])) {\n                        return parseSymbol(state);\n                    }\n                }\n                return parseNumber(state);\n            } else if (isSymbolFirstChar(ch)) {\n                return parseSymbol(state);\n            } else {\n                throw new Error(`[SX] parseOneToken: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\n            }\n        }\n\n        skipWhitespaces(state);\n        ch = lookAhead(state);\n    }\n\n    throw new ScriptTerminationError('parseOneToken');\n}\n\n\nfunction parseList(state: SxParserState, listStopChar: string, initialList: SxToken[]): SxToken {\n    const r: SxToken[] = initialList.slice(0);\n    let dotted = false;\n\n    skipWhitespaces(state);\n    let ch = lookAhead(state);\n\n    while (! isEOF(ch)) {\n        switch (ch) {\n        case listStopChar:\n            getChar(state);\n            if (dotted) {\n                return r[0];\n            } else {\n                return r;\n            }\n\n        default:\n            {\n                const t = parseOneToken(state);\n                if (typeof t === 'object' && Object.prototype.hasOwnProperty.call(t, 'dotted')) {\n                    if (r.length !== 1) {\n                        throw new Error(`[SX] parseList: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\n                    }\n                    dotted = true;\n                    if (Array.isArray(t)) {\n                        t.unshift(r.pop() as SxToken);\n                        r.push(t);\n                    } else {\n                        r.push({car: r.pop() as SxToken, cdr: (t as SxDottedFragment).dotted});\n                    }\n                } else if (typeof t === 'object' && Object.prototype.hasOwnProperty.call(t, 'comment')) {\n                    if (! state.config.stripComments) {\n                        r.push(t);\n                    }\n                } else {\n                    if (dotted) {\n                        throw new Error(`[SX] parseList: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\n                    }\n                    r.push(t);\n                }\n            }\n            break;\n        }\n\n        skipWhitespaces(state);\n        ch = lookAhead(state);\n    }\n\n    throw new ScriptTerminationError('parseList');\n}\n\n\n\nexport function parse(state: SxParserState) {\n    const r: SxToken[] = [];\n\n    skipWhitespaces(state);\n    let ch = lookAhead(state);\n\n    while (! isEOF(ch)) {\n        switch (ch) {\n        case '(':\n            getChar(state);\n            r.push(parseList(state, ')', []));\n            break;\n\n        case \"'\": case \"`\":\n            {\n                getChar(state);\n                skipWhitespaces(state);\n                for (;;) {\n                    const t = parseOneToken(state);\n                    if (typeof t === 'object' && Object.prototype.hasOwnProperty.call(t, 'comment')) {\n                        if (! state.config.stripComments) {\n                            r.push(t);\n                        }\n                    } else {\n                        r.push((ch === \"'\" ? quote : backquote)(state, t));\n                        break;\n                    }\n                }\n                break;\n            }\n\n        case ';':\n            getChar(state);\n            if (state.config.stripComments) {\n                parseSingleLineComment(state);\n            } else {\n                r.push(parseSingleLineComment(state));\n            }\n            break;\n\n        case '#':\n            {\n                const aheads = lookAheads(state, 2);\n                if (aheads[1] === '|') {\n                    getChar(state);\n                    getChar(state);\n                    if (state.config.stripComments) {\n                        parseMultiLineComment(state);\n                    } else {\n                        r.push(parseMultiLineComment(state));\n                    }\n                } else {\n                    getChar(state);\n                    if (state.config.stripComments) {\n                        parseSingleLineComment(state);\n                    } else {\n                        r.push(parseSingleLineComment(state));\n                    }\n                }\n            }\n            break;\n\n        case '\"':\n            {\n                const aheads = lookAheads(state, 3);\n                if (aheads[1] === '\"' && aheads[2] === '\"') {\n                    r.push(parseOneToken(state));\n                    break;\n                }\n            }\n            // FALL_THRU\n\n        default:\n            throw new Error(`[SX] parseInitialState: Invalid syntax at: ${lookCurrentLineHint(state)}.`);\n        }\n\n        skipWhitespaces(state);\n        ch = lookAhead(state);\n    }\n\n    return r;\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxMacroInfo,\n         SxFuncInfo,\n         SxSymbolInfo,\n         SxParserConfig,\n         SxParserState,\n         SxToken,\n         SExpressionTemplateFn,\n         SExpressionAsyncTemplateFn } from '../types';\nimport { parse }                      from '../parser';\nimport { evaluate }                   from '../evaluate';\nimport { defaultConfig }              from '../defaults';\n\n\n\nfunction initState(config: SxParserConfig, globals: any, strings: TemplateStringsArray | string, values?: any[]): SxParserState {\n    return {\n        strings: typeof strings === 'string' ? [strings] : strings,\n        values: values || [],\n\n        index: 0,\n        pos: 0,\n        line: 0,\n\n        evalCount: 0,\n\n        scopes: [{isBlockLocal: false, scope: globals}],\n\n        macroMap: new Map<string, SxMacroInfo>(config.macros.map(x => [x.name, x] as [string, SxMacroInfo])),\n        funcMap: new Map<string, SxFuncInfo>(config.funcs.map(x => [x.name, x] as [string, SxFuncInfo])),\n        symbolMap: new Map<string, SxSymbolInfo>(config.symbols.map(x => [x.name, x] as [string, SxSymbolInfo])),\n\n        config,\n    };\n}\n\n\nfunction resetState(state: SxParserState, strings: TemplateStringsArray | string, values?: any[]) {\n    state.strings = typeof strings === 'string' ? [strings] : strings;\n    state.values = values || [];\n    state.index = 0;\n    state.pos = 0;\n    state.line = 0;\n    state.evalCount = 0;\n    return state;\n}\n\n\nexport function SExpression(conf?: SxParserConfig): SExpressionTemplateFn {\n    let config = conf || Object.assign({}, defaultConfig);\n    let globalScope: any = {};\n    let startup: SxToken[] = [];\n\n    const exec = (state: SxParserState, s: SxToken[]) => {\n        if (config.enableEvaluate) {\n            for (let i = 0; i < s.length; i++) {\n                s[i] = evaluate(state, s[i]);\n            }\n        }\n\n        if (config.returnMultipleRoot) {\n            return s.length === 1 ? s[0] : s;\n        } else {\n            return s[s.length - 1];\n        }\n    };\n\n    const f: SExpressionTemplateFn = ((strings: TemplateStringsArray | string, ...values: any[]) => {\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\n        return exec(state, startup.concat(parse(state)));\n    }) as any;\n\n    f.evaluateAST = (ast: SxToken[]) => {\n        const state = initState(config, Object.assign({}, globalScope), '');\n        return exec(state, startup.concat(ast));\n    };\n    (f as any).repl = () => {\n        const state = initState(config, Object.assign({}, globalScope), '');\n        exec(state, startup.slice(0));\n        const fRepl: SExpressionTemplateFn = ((strings: TemplateStringsArray | string, ...values: any[]) => {\n            resetState(state, strings, values);\n            return exec(state, parse(state));\n        }) as any;\n        (fRepl as any).sync = fRepl;\n        return fRepl;\n    };\n    f.setGlobals = (globals: object) => {\n        globalScope = Object.assign({}, globals || {});\n        return f;\n    };\n    f.appendGlobals = (globals: object) => {\n        globalScope = Object.assign({}, globalScope, globals || {});\n        return f;\n    };\n    f.setStartup = (strings: TemplateStringsArray | string, ...values: any[]) => {\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\n        startup = parse(state);\n        return f;\n    };\n    f.setStartupAST = (ast: SxToken[]) => {\n        startup = ast;\n        return f;\n    };\n    f.appendStartup = (strings: TemplateStringsArray | string, ...values: any[]) => {\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\n        startup = startup.concat(parse(state));\n        return f;\n    };\n    f.appendStartupAST = (ast: SxToken[]) => {\n        startup = startup.concat(ast);\n        return f;\n    };\n    f.install = (installer) => {\n        config = installer(config);\n        return f;\n    };\n\n    return f;\n}\n\n\nexport function SExpressionAsync(conf?: SxParserConfig): SExpressionAsyncTemplateFn {\n    let config = conf || Object.assign({}, defaultConfig);\n    let globalScope: any = {};\n    let startup: SxToken[] = [];\n\n    const exec = async (state: SxParserState, s: SxToken[]) => {\n        if (config.enableEvaluate) {\n            for (let i = 0; i < s.length; i++) {\n                s[i] = evaluate(state, s[i]);\n\n                if (typeof s[i] === 'object' && s[i] !== null && typeof (s[i] as any).then === 'function') {\n                    s[i] = await s[i];\n                }\n            }\n        }\n\n        if (config.returnMultipleRoot) {\n            return s.length === 1 ? s[0] : s;\n        } else {\n            return s[s.length - 1];\n        }\n    };\n\n    const f: SExpressionAsyncTemplateFn = (async (strings: TemplateStringsArray | string, ...values: any[]) => {\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\n        return exec(state, startup.concat(parse(state)));\n    }) as any;\n\n    f.evaluateAST = (ast: SxToken[]) => {\n        const state = initState(config, Object.assign({}, globalScope), '');\n        return exec(state, startup.concat(ast));\n    };\n    (f as any).repl = () => {\n        const execSync = (stat: SxParserState, s: SxToken[]) => {\n            if (config.enableEvaluate) {\n                for (let i = 0; i < s.length; i++) {\n                    s[i] = evaluate(stat, s[i]);\n                }\n            }\n\n            if (config.returnMultipleRoot) {\n                return s.length === 1 ? s[0] : s;\n            } else {\n                return s[s.length - 1];\n            }\n        };\n        const state = initState(config, Object.assign({}, globalScope), '');\n        exec(state, startup.slice(0));\n        const fRepl: SExpressionAsyncTemplateFn = (async (strings: TemplateStringsArray | string, ...values: any[]) => {\n            resetState(state, strings, values);\n            return exec(state, parse(state));\n        }) as any;\n        const fReplSync: SExpressionTemplateFn = ((strings: TemplateStringsArray | string, ...values: any[]) => {\n            resetState(state, strings, values);\n            return execSync(state, parse(state));\n        }) as any;\n        (fRepl as any).sync = fReplSync;\n        return fRepl;\n    };\n    f.setGlobals = (globals: object) => {\n        globalScope = Object.assign({}, globals || {});\n        return f;\n    };\n    f.appendGlobals = (globals: object) => {\n        globalScope = Object.assign({}, globalScope, globals || {});\n        return f;\n    };\n    f.setStartup = (strings: TemplateStringsArray | string, ...values: any[]) => {\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\n        startup = parse(state);\n        return f;\n    };\n    f.setStartupAST = (ast: SxToken[]) => {\n        startup = ast;\n        return f;\n    };\n    f.appendStartup = (strings: TemplateStringsArray | string, ...values: any[]) => {\n        const state = initState(config, Object.assign({}, globalScope), strings, values);\n        startup = startup.concat(parse(state));\n        return f;\n    };\n    f.appendStartupAST = (ast: SxToken[]) => {\n        startup = startup.concat(ast);\n        return f;\n    };\n    f.install = (installer) => {\n        config = installer(config);\n        return f;\n    };\n\n    return f;\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserConfig } from '../../types';\nimport { SExpression }    from '../../interpreters';\nimport { defaultConfig }  from '../../defaults';\n\n\n\nexport const S = (() => {\n    const config: SxParserConfig = Object.assign({}, defaultConfig);\n\n    config.enableEvaluate = false;\n    config.returnMultipleRoot = true;\n\n    return SExpression(config);\n})();\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserState,\n         SxSymbol,\n         SxToken,\n         FatalError,\n         CapturedScopes,\n         SxMacroInfo }           from '../../types';\nimport { globalObj }             from '../../consts';\nimport { isSymbol,\n         quote }                 from '../../ast';\nimport { evaluate,\n         resolveValueSymbolScope,\n         collectCapturedVariables,\n         getCapturedScopes,\n         getScope,\n         getGlobalScope,\n         installScope,\n         uninstallScope,\n         optimizeTailCall,\n         toNumber }              from '../../evaluate';\nimport { compileLambda }         from '../../compile';\nimport { checkParamsLength,\n         checkUnsafeVarNamesEx } from '../../errors';\n\n\n\nexport const $car = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($car '(first second ... last))\n    //  -> S expr  : first\n    checkParamsLength('$car', args, 1, 1);\n\n    const car = $$first(...args);\n    if (! Array.isArray(car)) {\n        throw new Error(`[SX] $car: Invalid argument(s): args[0] is not array.`);\n    }\n    if (car.length === 0) {\n        throw new Error(`[SX] $car: Invalid argument(s): args[0] is nil.`);\n    }\n    return car[0];\n};\nexport const $$car = $car(null as any, null as any);\n\n\nexport const $cdr = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($cdr '(first second ... last))\n    //  -> S expr  : (second ... last)\n    checkParamsLength('$cdr', args, 1, 1);\n\n    const car = $$first(...args);\n    if (! Array.isArray(car)) {\n        throw new Error(`[SX] $cdr: Invalid argument(s): args[0] is not array.`);\n    }\n    if (car.length === 0) {\n        throw new Error(`[SX] $cdr: Invalid argument(s): args[0] is nil.`);\n    }\n    return car.slice(1);\n};\nexport const $$cdr = $cdr(null as any, null as any);\n\n\nexport const $cons = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($cons arg1 '(arg2-item1 ...) ... argN)\n    //  -> S expr  : (arg1 arg2-item1 ...)\n    // S expression: ($cons arg1 nilOrNull ... argN)\n    //  -> S expr  : (arg1)\n    // S expression: ($cons arg1 arg2 ... argN)\n    //  -> S expr  : arg1.arg2\n    checkParamsLength('$cons', args, 2, 2);\n\n    let {car, cdr} = $$firstAndSecond(...args);\n    if (car === null) {\n        car = [];\n    }\n    if (cdr === null) {\n        cdr = [];\n    }\n\n    if (Array.isArray(cdr)) {\n        cdr = cdr.slice(0);\n        cdr.unshift(car);\n        return cdr;\n    } else {\n        return {car, cdr};\n    }\n};\nexport const $$cons = $cons(null as any, null as any);\n\n\nexport const $first = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($first first second ... last)\n    //  -> S expr  : first\n    // S expression: ($first)\n    //  -> S expr  : null\n    const car: any = args.slice(0, 1);\n    return (car.length === 1) ? car[0] : null;\n};\nexport const $$first = $first(null as any, null as any);\n\n\nexport const $second = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($second first second ... last)\n    //  -> S expr  : second\n    // S expression: ($second first)\n    //  -> S expr  : null\n    const cdr: any = args.slice(1, 2);\n    return (cdr.length === 1) ? cdr[0] : null;\n};\nexport const $$second = $second(null as any, null as any);\n\n\nexport const $last = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($last first second ... last)\n    //  -> S expr  : last\n    // S expression: ($last)\n    //  -> S expr  : null\n    const car: any = args.slice(args.length - 1, args.length);\n    return (car.length === 1) ? car[0] : null;\n};\nexport const $$last = $last(null as any, null as any);\n\n\nexport const $rest = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($rest first second ... last)\n    //  -> S expr  : (second ... last)\n    // S expression: ($rest first)\n    //  -> S expr  : null\n    const cdr: any = args.slice(1);\n    return (0 < cdr.length) ? cdr : null;\n};\nexport const $$rest = $rest(null as any, null as any);\n\n\nexport const $firstAndSecond = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($first-and-second first second ... last)\n    //  -> S expr  : first.second\n    let car: any = args.slice(0, 1);\n    car = (car.length === 1) ? car[0] : null;\n\n    let cdr: any = args.slice(1, 2);\n    cdr = (cdr.length === 1) ? cdr[0] : null;\n\n    return {car, cdr};\n};\nexport const $$firstAndSecond = $firstAndSecond(null as any, null as any);\n\n\nexport const $atom = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($atom arg1 ...)\n    //  -> (if arg1 is list or dotted pair)  S expr  : false\n    //  -> (if arg1 is nil or anything else) S expr  : true\n    checkParamsLength('$atom', args, 1, 1);\n\n    const car = $$first(...args);\n\n    if (car === null || car === void 0) {\n        return true;\n    }\n    if (Array.isArray(car)) {\n        if (car.length === 0) return  true;\n        else                  return false;\n    }\n\n    switch (typeof car) {\n    case 'number': case 'string': case 'function': case 'boolean':\n        return true;\n    case 'object':\n        return isSymbol(car) ? true : false;\n    }\n    return false;\n};\nexport const $$atom = $atom(null as any, null as any);\n\n\nexport const $eq = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($eq arg1 arg2)\n    //  -> (if arg1 === arg2)  S expr  : true\n    //  -> (else)              S expr  : false\n    checkParamsLength('$eq', args, 2, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    return car === cdr;\n};\nexport const $$eq = $eq(null as any, null as any);\n\n\nexport const $notEq = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($not-eq arg1 arg2)\n    //  -> (if arg1 !== arg2)  S expr  : true\n    //  -> (else)              S expr  : false\n    checkParamsLength('$notEq', args, 2, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    return car !== cdr;\n};\nexport const $$notEq = $notEq(null as any, null as any);\n\n\nexport const $list = (state: SxParserState, name: string) => (...args: any[]) =>\n    // S expression: ($list arg1 ... argN)\n    //  -> S expr  : (arg1 ... argN)\n    args.slice(0);\nexport const $$list = $list(null as any, null as any);\n\n\n// tslint:disable-next-line:variable-name\nexport const $__scope = (state: SxParserState, name: string, capturedScopes?: CapturedScopes) => (...args: any[]) => {\n    // S expression: ($__scope isBlockLocal returnMultiple '((name value) | name ...) 'expr1 ... 'exprN)\n    //  -> (if returnMultiple)  S expr  : [expr1 ... exprN]\n    //  -> (else)               S expr  : exprN\n    checkParamsLength('$__scope', args, 3);\n\n    const isBlockLocal = $$first(...args);\n    const returnMultiple = $$second(...args);\n    const {car, cdr} = $$firstAndSecond(...args.slice(2));\n    let r: SxToken = null;\n\n    const scope: any = {};\n    if (Array.isArray(car)) {\n        for (const x of car) {\n            if (Array.isArray(x)) {\n                const kv = $$firstAndSecond(...x);\n                const kvSym = isSymbol(kv.car);\n                const kvName = kvSym ? kvSym.symbol : String(kv.car);\n                checkUnsafeVarNamesEx('$__scope', scope, kvName);\n                scope[kvName] = evaluate(state, kv.cdr);\n            } else {\n                const xSym = isSymbol(x);\n                const xName = xSym ? xSym.symbol : String(x);\n                checkUnsafeVarNamesEx('$__scope', scope, xName);\n                scope[xName] = null;\n            }\n        }\n    }\n    installScope(state, scope, isBlockLocal, capturedScopes);\n\n    try {\n        if (4 < args.length) {\n            if (returnMultiple) {\n                r = [];\n                for (const x of args.slice(3)) {\n                    r.push(evaluate(state, x));\n                }\n            } else {\n                for (const x of args.slice(3)) {\n                    r = evaluate(state, x);\n                }\n            }\n        } else {\n            r = evaluate(state, cdr);\n        }\n    } finally {\n        uninstallScope(state);\n    }\n\n    return r;\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__globalScope = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__global returnMultiple 'expr1 ... 'exprN)\n    //  -> (if returnMultiple)  S expr  : [expr1 ... exprN]\n    //  -> (else)               S expr  : exprN\n    checkParamsLength('$__globalScope', args, 1);\n\n    const returnMultiple = $$first(...args);\n    const cdr = $$second(...args);\n    let r: SxToken = null;\n\n    installScope(state, getGlobalScope(state).scope, true);\n    try {\n        if (2 < args.length) {\n            if (returnMultiple) {\n                r = [];\n                for (const x of args.slice(1)) {\n                    r.push(evaluate(state, x));\n                }\n            } else {\n                for (const x of args.slice(1)) {\n                    r = evaluate(state, x);\n                }\n            }\n        } else {\n            r = evaluate(state, cdr);\n        }\n    } finally {\n        uninstallScope(state);\n    }\n\n    return r;\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__capture = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__capture '(sym1 ... symN) 'expr1 ... 'exprN)\n    //  -> S expr  : exprN\n    checkParamsLength('$__capture', args, 1);\n\n    const formalArgs: SxSymbol[] = args[0];\n    if (! Array.isArray(formalArgs)) {\n        throw new Error(`[SX] $__lambda: Invalid argument(s): args[0] is not array.`);\n    }\n\n    let r: SxToken = null;\n\n    const capturedScopes = collectCapturedVariables(state, formalArgs);\n    installScope(state, {}, true, capturedScopes);\n    try {\n        for (const x of args.slice(1)) {\n            r = evaluate(state, x);\n        }\n    } finally {\n        uninstallScope(state);\n    }\n\n    return r;\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__lambda = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__lambda '(sym1 ... symN) 'expr1 ... 'exprN)\n    //  -> S expr  : fn\n    checkParamsLength('$__lambda', args, 2);\n\n    const formalArgs: SxSymbol[] = args[0];\n    if (! Array.isArray(formalArgs)) {\n        throw new Error(`[SX] $__lambda: Invalid argument(s): args[0] is not array.`);\n    }\n\n    let lastIsSpread = false;\n    for (let i = 0; i < formalArgs.length; i++) {\n        const fa = formalArgs[i];\n        if (i === formalArgs.length - 1 && state.config.enableSpread &&\n            Array.isArray(fa) && isSymbol(fa[0], state.config.reservedNames.spread)) {\n            if (! isSymbol(fa[1])) {\n                throw new Error(`[SX] $__lambda: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\n            }\n            formalArgs[i] = fa[1];\n            lastIsSpread = true;\n        } else if (! isSymbol(fa)) {\n            throw new Error(`[SX] $__lambda: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\n        }\n    }\n\n    let fnBody = args.slice(1);\n    if (state.config.enableTailCallOptimization) {\n        fnBody = optimizeTailCall(state, formalArgs, fnBody);\n    }\n\n    const capturedScopes = getCapturedScopes(state);\n\n    const fn = function(this: any, ...actualArgs: any[]) {\n        if ((actualArgs.length + (lastIsSpread ? 1 : 0)) < formalArgs.length) {\n            throw new Error(`[SX] func call: Actual args too short: actual ${\n                actualArgs.length} / formal ${formalArgs.length}.`);\n        }\n        // TODO: add type checking\n        return $__scope(state, name, capturedScopes)(false, false, [\n            [state.config.reservedNames.self, fn],\n            [state.config.reservedNames.thiz, this === globalObj || this === void 0 ? null : quote(state, this)],\n            ...(formalArgs.map((x: SxSymbol, index) => [\n                x.symbol,\n                quote(state,\n                    (lastIsSpread && index === formalArgs.length - 1) ?\n                        actualArgs.slice(index) : actualArgs[index]\n                )\n            ])),\n        ], ...fnBody);\n    };\n    return fn;\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $comp$__lambda = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__lambda '(sym1 ... symN) 'expr1 ... 'exprN)\n    //  -> S expr  : fn\n    checkParamsLength('$$__lambda', args, 2);\n\n    const formalArgs: SxSymbol[] = args[0];\n    if (! Array.isArray(formalArgs)) {\n        throw new Error(`[SX] $$__lambda: Invalid argument(s): args[0] is not array.`);\n    }\n\n    let lastIsSpread = false;\n    for (let i = 0; i < formalArgs.length; i++) {\n        const fa = formalArgs[i];\n        if (i === formalArgs.length - 1 && state.config.enableSpread &&\n            Array.isArray(fa) && isSymbol(fa[0], state.config.reservedNames.spread)) {\n            if (! isSymbol(fa[1])) {\n                throw new Error(`[SX] $$__lambda: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\n            }\n            formalArgs[i] = fa[1];\n            lastIsSpread = true;\n        } else if (! isSymbol(fa)) {\n            throw new Error(`[SX] $$__lambda: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\n        }\n    }\n\n    const fnBody = args.slice(1);\n    return compileLambda(state, formalArgs, lastIsSpread, fnBody);\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__defun = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__defun 'name '(sym1 ... symN) 'expr ... 'expr)\n    //  -> S expr  : fn\n    checkParamsLength('$__defun', args, 3);\n\n    const car: SxSymbol = $$first(...args);\n    const fn = $__lambda(state, name)(...args.slice(1));\n\n    checkUnsafeVarNamesEx('$__defun', state.funcMap, car.symbol);\n    // TODO: overloading\n    state.funcMap.set(car.symbol, {\n        name: car.symbol,\n        fn: (st, nm) => fn,\n        // formalArgs: ,\n        // lastIsSpread: ,\n        // next: ,\n    });\n    return fn;\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $comp$__defun = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__defun 'name '(sym1 ... symN) 'expr ... 'expr)\n    //  -> S expr  : fn\n    checkParamsLength('$$__defun', args, 3);\n\n    const car: SxSymbol = $$first(...args);\n    const fn = $comp$__lambda(state, name)(...args.slice(1));\n\n    checkUnsafeVarNamesEx('$$__defun', state.funcMap, car.symbol);\n    // TODO: overloading\n    state.funcMap.set(car.symbol, {\n        name: car.symbol,\n        fn: (st, nm) => fn,\n        // formalArgs: ,\n        // lastIsSpread: ,\n        // next: ,\n    });\n    return fn;\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__refun = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($refun 'name)\n    //  -> S expr  : fn\n    checkParamsLength('$__refun', args, 1, 1);\n\n    const car: SxSymbol = $$first(...args);\n\n    checkUnsafeVarNamesEx('$__refun', state.funcMap, car.symbol);\n    const info = state.funcMap.get(car.symbol);\n    if (!info) {\n        throw new Error(`[SX] $__refun: function ${car.symbol} is not defined.`);\n    }\n    return info.fn(state, car.symbol);\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__defmacro = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__defmacro 'name '(sym1 ... symN) 'expr ... 'expr)\n    //  -> S expr  : fn\n    checkParamsLength('$__defmacro', args, 3);\n\n    const car: SxSymbol = $$first(...args);\n    const formalArgs: SxSymbol[] = args[1];\n    if (! Array.isArray(formalArgs)) {\n        throw new Error(`[SX] $__defmacro: Invalid argument(s): args[1] is not array.`);\n    }\n\n    let lastIsSpread = false;\n    for (let i = 0; i < formalArgs.length; i++) {\n        const fa = formalArgs[i];\n        if (i === formalArgs.length - 1 && state.config.enableSpread &&\n            Array.isArray(fa) && isSymbol(fa[0], state.config.reservedNames.spread)) {\n            if (! isSymbol(fa[1])) {\n                throw new Error(`[SX] $__defmacro: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\n            }\n            formalArgs[i] = fa[1];\n            lastIsSpread = true;\n        } else if (! isSymbol(fa)) {\n            throw new Error(`[SX] $__defmacro: Invalid formal argument(s): item(s) of args[${i}] is not symbol.`);\n        }\n    }\n\n    const fnBody = args.slice(2);\n    const capturedScopes = getCapturedScopes(state);\n\n    const fn = (fArgs: SxSymbol[]) => (...aArgs: any[]) => {\n        return $__scope(state, name, capturedScopes)(false, false, [\n            [state.config.reservedNames.self, fn],\n            ...(fArgs.map((x: SxSymbol, index) => [\n                x.symbol,\n                quote(state,\n                    (lastIsSpread && index === fArgs.length - 1) ?\n                        aArgs.slice(index) : aArgs[index]\n                )\n            ])),\n        ], ...fnBody);\n    };\n\n    const m: SxMacroInfo = {\n        name: car.symbol,\n        fn: (st: SxParserState, nm: string, fArgs: SxSymbol[]) => (list: SxToken[]) => fn(fArgs)(...(list.slice(1))),\n        formalArgs,\n        lastIsSpread,\n    };\n\n    checkUnsafeVarNamesEx('$__defmacro', state.macroMap, car.symbol);\n\n    if (state.macroMap.has(car.symbol)) {\n        let curr = state.macroMap.get(car.symbol);\n        (curr as SxMacroInfo).next = m;\n        if (curr && curr.formalArgs) {\n            if (curr.formalArgs.length < formalArgs.length) {\n                state.macroMap.set(car.symbol, m);\n                m.next = curr;\n            } else {\n                let prev = curr;\n                curr = curr.next;\n                while (curr) {\n                    if (curr.formalArgs) {\n                        if (curr.formalArgs.length < formalArgs.length) {\n                            prev.next = m;\n                            m.next = curr;\n                            break;\n                        }\n                    }\n                    prev = curr;\n                    curr = curr.next;\n                }\n            }\n        }\n    } else {\n        state.macroMap.set(car.symbol, m);\n    }\n    return fn;\n};\n\n\nexport const $apply = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($apply fn arg1 ... argN)\n    //  -> S expr  : fn'\n    checkParamsLength('$apply', args, 1);\n\n    const car: () => any = $$first(...args);\n    if (typeof car !== 'function') {\n        throw new Error(`[SX] $apply: Invalid argument(s): args[0] is not function.`);\n    }\n\n    return (\n        (...p: any[]) => car.apply(null, args.slice(1).concat(p))\n    );\n};\nexport const $$apply = $apply(null as any, null as any);\n\n\n// tslint:disable-next-line:variable-name\nexport const $__call = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__call thisArg 'symbol arg1 ... argN)\n    //  -> S expr  : fn\n    checkParamsLength('$__call', args, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    const sym = isSymbol(cdr);\n    const xName = sym ? sym.symbol : evaluate(state, cdr) as any;\n\n    checkUnsafeVarNamesEx('$__call', car, xName);\n\n    return Function.prototype.apply.call(\n        car[xName],\n        car,\n        args.slice(2)\n    );\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__try = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__try 'expr 'catch-expr)\n    //  ->                               S expr  : expr\n    //  -> (if error is raised in expr)  S expr  : catch-expr\n    checkParamsLength('$__try', args, 1, 2);\n\n    let r: SxToken = [];\n    try {\n        r = evaluate(state, args[0]);\n    } catch (e) {\n        if (e instanceof FatalError) {\n            throw e;\n        }\n        if (1 < args.length) {\n            r = $__scope(state, name)(true, false, [\n                ['$error', quote(state, e)],\n                ['$parent', quote(state, getScope(state))],\n            ], args[1]);\n        } else {\n            r = null;\n        }\n    }\n    return r;\n};\n\n\nexport const $raise = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($raise 'expr)\n    //  -> S expr  : -\n    const car = $$first(...args);\n    throw car;\n};\nexport const $$raise = $raise(null as any, null as any);\n\n\n// tslint:disable-next-line:variable-name\nexport const $__if = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__if condition 't-expr 'f-expr)\n    //  -> (if condition is true ) S expr  : t-expr\n    //  -> (if condition is false) S expr  : f-expr\n    checkParamsLength('$__if', args, 2, 3);\n\n    const car = $$first(...args);\n    let r: SxToken = [];\n    if ($$boolean(car)) {\n        r = evaluate(state, args[1]);\n    } else {\n        if (2 < args.length) {\n            r = evaluate(state, args[2]);\n        } else {\n            r = null;\n        }\n    }\n    return r;\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__ifNull = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__if-null condition 'null-expr)\n    //  -> (if condition is not null ) S expr  : condition\n    //  -> (if condition is null)      S expr  : null-expr\n    checkParamsLength('$__ifNull', args, 2, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    let r: SxToken = [];\n    if (! $$ambiguousEq(car, null)) {\n        r = car;\n    } else {\n        r = evaluate(state, cdr);\n    }\n    return r;\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__cond = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__cond 'cond1 'expr1 ... 'condN 'exprN)\n    //  -> (if (eval condI) is true ) S expr  : exprI\n    //  -> (if no matched)            S expr  : null\n    checkParamsLength('$__cond', args, 1);\n\n    for (let i = 0; i < args.length - 1; i += 2) {\n        const c = args[i];\n        const x = args[i + 1];\n        if ($$boolean(evaluate(state, c))) {\n            return evaluate(state, x);\n        }\n    }\n    return null;\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__while = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__while 'condition 'expr1 ... 'exprN)\n    //  -> (if condition is true at least 1 or more times) S expr  : exprN\n    //  -> (else)                                          S expr  : null\n    checkParamsLength('$__while', args, 1);\n\n    const car = $$first(...args);\n    const cdr = args.slice(1);\n    let r: SxToken = null;\n    while ($$boolean(evaluate(state, car))) {\n        for (const x of cdr) {\n            r = evaluate(state, x);\n        }\n    }\n    return r;\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__doWhile = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__do-while 'condition 'expr1 ... 'exprN)\n    //  -> (if condition is true at least 1 or more times) S expr  : exprN\n    //  -> (else)                                          S expr  : null\n    checkParamsLength('$__doWhile', args, 1);\n\n    const car = $$first(...args);\n    const cdr = args.slice(1);\n    let r: SxToken = null;\n\n    do {\n        for (const x of cdr) {\n            r = evaluate(state, x);\n        }\n    } while ($$boolean(evaluate(state, car)));\n    return r;\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__until = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__until 'condition 'expr1 ... 'exprN)\n    //  -> (if condition is true at least 1 or more times) S expr  : exprN\n    //  -> (else)                                          S expr  : null\n    checkParamsLength('$__until', args, 1);\n\n    const car = $$first(...args);\n    const cdr = args.slice(1);\n    let r: SxToken = null;\n    while ($$not(evaluate(state, car))) {\n        for (const x of cdr) {\n            r = evaluate(state, x);\n        }\n    }\n    return r;\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__doUntil = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__do-until 'condition 'expr1 ... 'exprN)\n    //  -> (if condition is true at least 1 or more times) S expr  : exprN\n    //  -> (else)                                          S expr  : null\n    checkParamsLength('$__doUntil', args, 1);\n\n    const car = $$first(...args);\n    const cdr = args.slice(1);\n    let r: SxToken = null;\n    do {\n        for (const x of cdr) {\n            r = evaluate(state, x);\n        }\n    } while ($$not(evaluate(state, car)));\n    return r;\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__repeat = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__repeat 'i n-times 'expr1 ... 'exprN)\n    //  -> (if n > 0) S expr  : exprN\n    //  -> (else)     S expr  : null\n    checkParamsLength('$__repeat', args, 2);\n\n    const sym = isSymbol($$first(...args));\n    if (! sym) {\n        throw new Error(`[SX] $__repeat: Invalid argument(s): item(s) of args[0] is not symbol.`);\n    }\n\n    checkUnsafeVarNamesEx('$__repeat', {}, sym.symbol); // NOTE: pass dummy target object.\n    const scope = resolveValueSymbolScope(state, sym, false);\n\n    const n = toNumber($$second(...args));\n    const cdr = args.slice(2);\n    let r: SxToken = null;\n    for (let i = 0; i < n; i++) {\n        scope[sym.symbol] = i;\n        for (const x of cdr) {\n            r = evaluate(state, x);\n        }\n    }\n    return r;\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__for = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__for 'x list 'expr1 ... 'exprN)\n    //  -> (if list.length > 0) S expr  : exprN\n    //  -> (else)               S expr  : null\n    checkParamsLength('$__for', args, 2);\n\n    const sym = isSymbol($$first(...args));\n    if (! sym) {\n        throw new Error(`[SX] $__for: Invalid argument(s): item(s) of args[0] is not symbol.`);\n    }\n\n    checkUnsafeVarNamesEx('$__for', {}, sym.symbol); // NOTE: pass dummy target object.\n    const scope = resolveValueSymbolScope(state, sym, false);\n\n    const list = $$second(...args);\n    if (! Array.isArray(list)) {\n        throw new Error(`[SX] $__for: Invalid argument(s): item(s) of args[1] is not array.`);\n    }\n\n    const cdr = args.slice(2);\n    let r: SxToken = null;\n    for (const q of list) {\n        scope[sym.symbol] = q;\n        for (const x of cdr) {\n            r = evaluate(state, x);\n        }\n    }\n    return r;\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $pipe = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__get v fn1 ... fnN)\n    //  -> S expr  : any\n    checkParamsLength('$pipe', args, 1);\n\n    let v = args[0];\n    for (let i = 1; i < args.length; i++) {\n        v = args[i](v);\n    }\n    return v;\n};\nexport const $$pipe = $pipe(null as any, null as any);\n\n\n// tslint:disable-next-line:variable-name\nexport const $__get = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__get 'nameOrIndex1 ... 'nameOrIndexN)\n    //  -> S expr  : any\n    checkParamsLength('$__get', args, 1);\n\n    let v: any = null;\n    let sym = isSymbol(args[0]);\n\n    if (!sym) {\n        switch (typeof args[0]) {\n        case 'string': case 'number':\n            sym = {symbol: String(args[0])};\n            break;\n        default:\n            v = evaluate(state, args[0]);\n            break;\n        }\n    }\n\n    if (sym) {\n        const scope = resolveValueSymbolScope(state, sym, true);\n        if (! scope) {\n            throw new Error(`[SX] $__get: Invalid argument(s): args[0]: symbol \"${sym.symbol}\" is not defined.`);\n        }\n        v = scope[sym.symbol];\n    }\n\n    for (let i = 1; i < args.length; i++) {\n        let q: any = args[i];\n        let inprog = true;\n        while (inprog) {\n            switch (typeof q) {\n            case 'function':\n                v = q(v);\n                inprog = false;\n                break;\n            case 'object':\n                if (Array.isArray(q)) {\n                    q = evaluate(state, q);\n                } else {\n                    sym = isSymbol(q);\n                    if (sym) {\n                        q = sym.symbol;\n                    } else if (Object.prototype.hasOwnProperty.call(q, 'value')) {\n                        q = evaluate(state, q);\n                    } else {\n                        throw new Error(`[SX] $__get: Invalid argument(s): invalid name path.`);\n                    }\n                }\n                break;\n            case 'number':\n                if (q < 0) {\n                    q = v.length + q;\n                }\n                // FALL_THRU\n            case 'string':\n                checkUnsafeVarNamesEx('$__get', v, q);\n                v = v[q];\n                inprog = false;\n                break;\n            default:\n                throw new Error(`[SX] $__get: Invalid argument(s): invalid name path.`);\n            }\n        }\n    }\n    return v;\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__let = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__let 'nameStrOrSymbol expr)\n    //  -> S expr  : any\n    checkParamsLength('$__let', args, 2, 2);\n\n    let sym = isSymbol($$first(...args));\n\n    if (! sym) {\n        if (typeof args[0] === 'string') {\n            sym = {symbol: args[0]};\n        } else {\n            throw new Error(`[SX] $__let: Invalid argument(s): invalid name.`);\n        }\n    }\n\n    checkUnsafeVarNamesEx('$__let', {}, sym.symbol); // NOTE: pass dummy target object.\n\n    const scope = resolveValueSymbolScope(state, sym, false);\n    scope[sym.symbol] = args[1];\n\n    return args[1];\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__set = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__set 'nameOrListOfNameOrIndex expr)\n    //  -> S expr  : any\n    checkParamsLength('$__set', args, 2, 2);\n\n    let path: any = [];\n\n    if (Array.isArray(args[0])) {\n        path = args[0];\n    } else {\n        path.push(args[0]);\n    }\n\n    let sym = isSymbol(path[0]);\n\n    if (! sym) {\n        if (typeof path[0] === 'string') {\n            checkUnsafeVarNamesEx('$__set', {}, path[0]); // NOTE: pass dummy target object.\n            sym = {symbol: path[0]};\n        } else {\n            throw new Error(`[SX] $__set: Invalid argument(s): invalid name.`);\n        }\n    }\n\n    let scope = resolveValueSymbolScope(state, sym, true);\n    if (scope === null) {\n        throw new Error(`[SX] $__set: Unresolved symbol: ${sym.symbol}.`);\n    }\n\n    let subst = false;\n\n    for (let i = 0; i < path.length; i++) {\n        let q: any = path[i];\n        let inprog = true;\n        const last = i === path.length - 1;\n        while (inprog) {\n            switch (typeof q) {\n            case 'function':\n                scope = q(scope);\n                inprog = false;\n                break;\n            case 'object':\n                if (Array.isArray(q)) {\n                    q = evaluate(state, q);\n                } else {\n                    sym = isSymbol(q);\n                    if (sym) {\n                        q = sym.symbol;\n                    } else if (Object.prototype.hasOwnProperty.call(q, 'value')) {\n                        q = evaluate(state, q);\n                    } else {\n                        throw new Error(`[SX] $__set: Invalid argument(s): invalid name.`);\n                    }\n                }\n                break;\n            case 'number':\n                if (q < 0) {\n                    q = scope.length + q;\n                }\n                // FALL_THRU\n            case 'string':\n                checkUnsafeVarNamesEx('$__set', scope, q);\n                if (last) {\n                    scope[q] = args[1];\n                    subst = true;\n                } else {\n                    scope = scope[q];\n                }\n                inprog = false;\n                break;\n            default:\n                throw new Error(`[SX] $__set: Invalid argument(s): invalid name.`);\n            }\n        }\n    }\n\n    if (! subst) {\n        throw new Error(`[SX] $__set: Invalid argument(s): last path is not lvalue.`);\n    }\n\n    return args[1];\n};\n\n\nexport const $boolean = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($boolean any)\n    //  -> S expr  : boolean\n    checkParamsLength('$boolean', args, 1, 1);\n\n    const car = $$first(...args);\n    if (Array.isArray(car) && car.length === 0) return false;\n    else return Boolean(car);\n};\nexport const $$boolean = $boolean(null as any, null as any);\n\n\nexport const $not = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($not any)\n    //  -> S expr  : boolean\n    checkParamsLength('$not', args, 1, 1);\n\n    return ! $$boolean(...args);\n};\nexport const $$not = $not(null as any, null as any);\n\n\n// tslint:disable-next-line:variable-name\nexport const $__and = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__and 'expr1 ... 'exprN)\n    //  -> (if all of ($boolean expr1) ... ($boolean exprN) are true) S expr  : exprN\n    //  -> (else)                                                     S expr  : expr-i (false left most)\n    checkParamsLength('$__and', args, 1);\n\n    let prev = null;\n    for (let i = 0; i < args.length; i++) {\n        const curr = evaluate(state, args[i]);\n        if (! $$boolean(curr)) {\n            return curr;\n        }\n        prev = curr;\n    }\n    return prev;\n};\n// tslint:disable-next-line:variable-name\nexport const $$__and = $__and(null as any, null as any);\n\n\n// tslint:disable-next-line:variable-name\nexport const $__or = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__or 'expr1 ... 'exprN)\n    //  -> (if any ($boolean expr1) ... ($boolean exprN) are true) S expr  : expr-i (where i: index of item first ($boolean expr-i) is to be true)\n    //  -> (else)                                                  S expr  : expr-i (false right most)\n    checkParamsLength('$__or', args, 1);\n\n    let prev = null;\n    for (let i = 0; i < args.length; i++) {\n        const curr = evaluate(state, args[i]);\n        if ($$boolean(curr)) {\n            return curr;\n        }\n        prev = curr;\n    }\n    return prev;\n};\n// tslint:disable-next-line:variable-name\nexport const $$__or = $__or(null as any, null as any);\n\n\nexport const $ambiguousEq = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: (== a b)\n    //  -> S expr  : boolean\n    checkParamsLength('$ambiguousEq', args, 2, 2);\n\n    let {car, cdr} = $$firstAndSecond(...args);\n    if (Array.isArray(car) && car.length === 0) car = null;\n    if (Array.isArray(cdr) && cdr.length === 0) cdr = null;\n    if (car === void 0) car = null;\n    if (cdr === void 0) cdr = null;\n    // tslint:disable-next-line:triple-equals\n    return car == cdr;\n};\nexport const $$ambiguousEq = $ambiguousEq(null as any, null as any);\n\n\nexport const $ambiguousNotEq = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: (!= a b)\n    //  -> S expr  : boolean\n    return ! $$ambiguousEq(...args);\n};\nexport const $$ambiguousNotEq = $ambiguousNotEq(null as any, null as any);\n\n\nexport const $lt = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: (< a b)\n    //  -> S expr  : boolean\n    checkParamsLength('$lt', args, 2, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    return toNumber(car) < toNumber(cdr);\n};\nexport const $$lt = $lt(null as any, null as any);\n\n\nexport const $le = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: (<= a b)\n    //  -> S expr  : boolean\n    checkParamsLength('$le', args, 2, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    return toNumber(car) <= toNumber(cdr);\n};\nexport const $$le = $le(null as any, null as any);\n\n\nexport const $gt = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: (> a b)\n    //  -> S expr  : boolean\n    checkParamsLength('$gt', args, 2, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    return toNumber(car) > toNumber(cdr);\n};\nexport const $$gt = $gt(null as any, null as any);\n\n\nexport const $ge = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: (>= a b)\n    //  -> S expr  : boolean\n    checkParamsLength('$ge', args, 2, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    return toNumber(car) >= toNumber(cdr);\n};\nexport const $$ge = $ge(null as any, null as any);\n\n\nexport const $typeof = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($typeof x)\n    //  -> S expr  : 'null' | 'bigint' | 'boolean' | 'function' | 'number' | 'string' | 'undefined' |\n    //               'js-symbol' | 'list' | 'object'\n    checkParamsLength('$typeof', args, 1, 1);\n\n    const car = $$first(...args);\n    if (car === null) {\n        return 'null';\n    }\n    const tyName = typeof car;\n    switch (tyName) {\n    case 'object':\n        if (Array.isArray(car)) {\n            return 'list';\n        } else {\n            return 'object';\n        }\n    case 'symbol':\n        return 'js-symbol';\n    default:\n        return tyName;\n    }\n};\nexport const $$typeof = $typeof(null as any, null as any);\n\n\nexport const $symbol = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($symbol)\n    // S expression: ($symbol name)\n    //  -> S expr  : symbol\n    checkParamsLength('$symbol', args, 1, 1);\n\n    if (typeof args[0] === 'string') {\n        return {symbol: args[0]};\n    } else {\n        throw new Error(`[SX] $symbol: Invalid argument(s): item(s) of args[0] is not string.`);\n    }\n};\nexport const $$symbol = $symbol(null as any, null as any);\n\n\n// tslint:disable-next-line:variable-name\nexport const $__gensym = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__gensym)\n    // S expression: ($__gensym name)\n    //  -> S expr  : symbol\n    checkParamsLength('$__gensym', args, 0, 1);\n\n    const varBaseName = `$__tempvar__$$ec${state.evalCount++}$$_`;\n    const tempVarSym = ({symbol: `${varBaseName}_$gensym`});\n    if (args.length === 1) {\n        const a = isSymbol(args[0]);\n        if (a) {\n            $__let(state, '')(a, tempVarSym);\n        } else if (typeof args[0] === 'string') {\n            $__let(state, '')({symbol: args[0]}, tempVarSym);\n        } else {\n            throw new Error(`[SX] $__gensym: Invalid argument(s): item(s) of args[0] is not symbol.`);\n        }\n    }\n    return tempVarSym;\n};\n\n\nexport const $isSymbol = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($is-symbol x)\n    // S expression: ($is-symbol x name)\n    //  -> S expr  : boolean\n    checkParamsLength('$isSymbol', args, 1, 2);\n\n    if (args.length === 1) {\n        return (isSymbol(args[0]) ? true : false);\n    } else {\n        if (typeof args[1] === 'string') {\n            return (isSymbol(args[0], args[1]) ? true : false);\n        } else {\n            throw new Error(`[SX] $isSymbol: Invalid argument(s): item(s) of args[1] is not string.`);\n        }\n    }\n};\nexport const $$isSymbol = $isSymbol(null as any, null as any);\n\n\nexport const $isNull = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($is-null x)\n    //  -> S expr  : boolean\n    checkParamsLength('$isNull', args, 1, 1);\n\n    return $$first(...args) === null;\n};\nexport const $$isNull = $isNull(null as any, null as any);\n\n\nexport const $isNil = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($is-nil x)\n    //  -> S expr  : boolean\n    checkParamsLength('$isNil', args, 1, 1);\n\n    const car = $$first(...args);\n    return Array.isArray(car) && car.length === 0;\n};\nexport const $$isNil = $isNil(null as any, null as any);\n\n\nexport const $isUndefined = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($is-undefined x)\n    //  -> S expr  : boolean\n    checkParamsLength('$isUndefined', args, 1, 1);\n\n    return $$first(...args) === void 0;\n};\nexport const $$isUndefined = $isUndefined(null as any, null as any);\n\n\nexport const $isList = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($is-list x)\n    //  -> S expr  : boolean\n    checkParamsLength('$isList', args, 1, 1);\n\n    return Array.isArray($$first(...args));\n};\nexport const $$isList = $isList(null as any, null as any);\n\n\nexport const $isString = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($is-string x)\n    //  -> S expr  : boolean\n    checkParamsLength('$isString', args, 1, 1);\n\n    return typeof $$first(...args) === 'string';\n};\nexport const $$isString = $isString(null as any, null as any);\n\n\nexport const $isNumber = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($is-number x)\n    //  -> S expr  : boolean\n    checkParamsLength('$isNumber', args, 1, 1);\n\n    return typeof $$first(...args) === 'number';\n};\nexport const $$isNumber = $isNumber(null as any, null as any);\n\n\nexport const $isNaN = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($is-NaN x)\n    //  -> S expr  : boolean\n    checkParamsLength('$isNaN', args, 1, 1);\n\n    return Number.isNaN($$first(...args));\n};\nexport const $$isNaN = $isNaN(null as any, null as any);\n\n\nexport const $isFinite = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($is-finate x)\n    //  -> S expr  : boolean\n    checkParamsLength('$isFinite', args, 1, 1);\n\n    return Number.isFinite($$first(...args));\n};\nexport const $$isFinite = $isFinite(null as any, null as any);\n\n\nexport const $isInteger = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($is-integer x)\n    //  -> S expr  : boolean\n    checkParamsLength('$isInteger', args, 1, 1);\n\n    return Number.isInteger($$first(...args));\n};\nexport const $$isInteger = $isInteger(null as any, null as any);\n\n\nexport const $toString = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($to-string x)\n    //  -> S expr  : string\n    checkParamsLength('$toString', args, 1, 1);\n\n    return String($$first(...args));\n};\nexport const $$toString = $toString(null as any, null as any);\n\n\nexport const $toNumber = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($to-number x)\n    //  -> S expr  : number\n    checkParamsLength('$toNumber', args, 1, 1);\n\n    return toNumber($$first(...args));\n};\nexport const $$toNumber = $toNumber(null as any, null as any);\n\n\n// tslint:disable-next-line:variable-name\nexport const $__toObject = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__# '(name value...)...)\n    //  -> JSON    : {name: value, ...}\n    const r: any = {};\n    for (const x of args) {\n        if (Array.isArray(x) && 0 < x.length) {\n            const sym = isSymbol(x[0]);\n            const keyName =\n                sym ? sym.symbol :\n                String(evaluate(state, x[0]));\n\n            checkUnsafeVarNamesEx('$__#', r, keyName);\n            if (x.length === 1) {\n                // S expression: (# ... (keyName) ...)\n                //  -> JSON    : {..., keyName: true, ...}\n                r[keyName] = true;\n            } else if (x.length === 2) {\n                // S expression: (# ... (keyName value) ...)\n                //  -> JSON    : {..., keyName: value, ...}\n                r[keyName] = evaluate(state, x[1]);\n            } else {\n                // S expression: (# ... (keyName value1 value2 ...) ...)\n                //  -> JSON    : {..., keyName: [value1, value2, ], ...}\n                r[keyName] =\n                    evaluate(state, ([{symbol: state.config.reservedNames.list}] as SxToken[])\n                    .concat(x.slice(1)));\n            }\n        } else {\n            throw new Error(`[SX] $__toObject: Invalid argument(s): args[?] is not array.`);\n        }\n    }\n    return r;\n};\n\n\nconst assignBlacklist = [\n    globalObj,\n    (Object as any).__proto__,\n    ({} as any).__proto__,\n    (Function as any).__proto__,\n];\n\nexport const $objectAssign = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($object-assign x)\n    //  -> S expr  : string\n    checkParamsLength('$objectAssign', args, 1);\n\n    if (assignBlacklist.includes(args[0])) {\n        throw new Error(`[SX] $objectAssign: Invalid argument: args[0] is blacklisted object.`);\n    }\n    return Object.assign(args[0], ...(args.slice(1)));\n};\nexport const $$objectAssign = $objectAssign(null as any, null as any);\n\n\nexport const $jsonStringify = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($json-stringify x)\n    //  -> S expr  : string\n    checkParamsLength('$jsonStringify', args, 1, 1);\n\n    return JSON.stringify($$first(...args));\n};\nexport const $$jsonStringify = $jsonStringify(null as any, null as any);\n\n\nexport const $jsonParse = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($json-parse x)\n    //  -> S expr  : object\n    checkParamsLength('$jsonParse', args, 1, 1);\n\n    const s = $$first(...args);\n    if (typeof s !== 'string') {\n        throw new Error(`[SX] $jsonParse: Invalid argument(s): args[0] is not string.`);\n    }\n    return JSON.parse(s);\n};\nexport const $$jsonParse = $jsonParse(null as any, null as any);\n\n\nexport const $now = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($now)\n    //  -> S expr  : number\n    return Date.now();\n};\nexport const $$now = $now(null as any, null as any);\n\n\nexport const $datetimeFromIso = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($datetime-from-iso str)\n    //  -> S expr  : number\n    checkParamsLength('$datetimeFromIso', args, 1, 1);\n\n    const s = $$first(...args);\n    if (typeof s !== 'string') {\n        throw new Error(`[SX] $datetimeFromIso: Invalid argument(s): args[0] is not string.`);\n    }\n    if (! /^(?:(?:-[0-9]{6,})|[0-9]{4,})-(?:[0-1][0-9])-(?:[0-3][0-9])(?:T(?:[0-2][0-9])(?:[:](?:[0-6][0-9])(?:[:](?:[0-6][0-9])(?:.[0-9]{1,})?)?)?(?:Z|[-+][0-9]{2}(?:[:]?[0-6][0-9])?)?)?$/.test(s)) {\n        throw new Error(`[SX] $datetimeFromIso: Invalid datetime (pattern unmatched): ${s}.`);\n    }\n    const dt = new Date(s).getTime();\n    if (Number.isNaN(dt)) {\n        throw new Error(`[SX] $datetimeFromIso: Invalid datetime: ${s}.`);\n    }\n    return dt;\n};\nexport const $$datetimeFromIso = $datetimeFromIso(null as any, null as any);\n\n\nexport const $datetime = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($datetime year month1-12 day)\n    // S expression: ($datetime year month1-12 day hours)\n    // S expression: ($datetime year month1-12 day hours minutes)\n    // S expression: ($datetime year month1-12 day hours minutes seconds)\n    // S expression: ($datetime year month1-12 day hours minutes seconds milliseconds)\n    //  -> S expr  : number\n    checkParamsLength('$datetime', args, 3, 7);\n\n    let s = '';\n    const year = Number(args[0]);\n    if (year >= 0) {\n        s += String(year).padStart(4, '0');\n    } else {\n        s += '-' + String(-year).padStart(6, '0');\n    }\n    // month1\n    s += '-' + String(Number(args[1])).padStart(2, '0');\n    // day\n    s += '-' + String(Number(args[2])).padStart(2, '0');\n    // hours\n    if (args.length >= 4) {\n        s += 'T' + String(Number(args[3])).padStart(2, '0');\n        // minutes\n        if (args.length >= 5) {\n            s += ':' + String(Number(args[4])).padStart(2, '0');\n        } else {\n            s += ':00';\n        }\n        // seconds\n        if (args.length >= 6) {\n            s += ':' + String(Number(args[5])).padStart(2, '0');\n        }\n        // milliseconds\n        if (args.length >= 7) {\n            s += '.' + String(Number(args[6])).padStart(3, '0').slice(0, 3);\n        }\n        s += 'Z';\n    }\n    const dt = new Date(s).getTime();\n    if (Number.isNaN(dt)) {\n        throw new Error(`[SX] $datetime: Invalid datetime: ${s}.`);\n    }\n    return dt;\n};\nexport const $$datetime = $datetime(null as any, null as any);\n\n\nexport const $datetimeLc = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($datetime-lc year month1-12 day)\n    // S expression: ($datetime-lc year month1-12 day hours)\n    // S expression: ($datetime-lc year month1-12 day hours minutes)\n    // S expression: ($datetime-lc year month1-12 day hours minutes seconds)\n    // S expression: ($datetime-lc year month1-12 day hours minutes seconds milliseconds)\n    //  -> S expr  : number\n    checkParamsLength('$datetimeLc', args, 3, 7);\n\n    let s = '';\n    const year = Number(args[0]);\n    if (year >= 0) {\n        s += String(year).padStart(4, '0');\n    } else {\n        s += '-' + String(-year).padStart(6, '0');\n    }\n    // month1\n    s += '-' + String(Number(args[1])).padStart(2, '0');\n    // day\n    s += '-' + String(Number(args[2])).padStart(2, '0');\n    // hours\n    if (args.length >= 4) {\n        s += 'T' + String(Number(args[3])).padStart(2, '0');\n        // minutes\n        if (args.length >= 5) {\n            s += ':' + String(Number(args[4])).padStart(2, '0');\n        } else {\n            s += ':00';\n        }\n        // seconds\n        if (args.length >= 6) {\n            s += ':' + String(Number(args[5])).padStart(2, '0');\n        }\n        // milliseconds\n        if (args.length >= 7) {\n            s += '.' + String(Number(args[6])).padStart(3, '0').slice(0, 3);\n        }\n    } else {\n        s += 'T00:00:00.000';\n    }\n    const dt = new Date(s).getTime();\n    if (Number.isNaN(dt)) {\n        throw new Error(`[SX] $datetimeLc: Invalid datetime: ${s}.`);\n    }\n    return dt;\n};\nexport const $$datetimeLc = $datetimeLc(null as any, null as any);\n\n\nexport const $datetimeToIsoString = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($datetime-to-iso-string number)\n    //  -> S expr  : string\n    checkParamsLength('$datetimeToIsoString', args, 1, 1);\n\n    const n = $$first(...args);\n    if (typeof n !== 'number') {\n        throw new Error(`[SX] $datetimeToIsoString: Invalid argument(s): args[0] is not number.`);\n    }\n    const dt = new Date(n);\n    if (Number.isNaN(dt.getTime())) {\n        throw new Error(`[SX] $datetimeToIsoString: Invalid datetime: ${n}.`);\n    }\n    return dt.toISOString();\n};\nexport const $$datetimeToIsoString = $datetimeToIsoString(null as any, null as any);\n\n\nexport const $datetimeToComponents = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($datetime-to-components number)\n    //  -> S expr  : list\n    checkParamsLength('$datetimeToComponents', args, 1, 1);\n\n    const n = $$first(...args);\n    if (typeof n !== 'number') {\n        throw new Error(`[SX] $datetimeToComponents: Invalid argument(s): args[0] is not number.`);\n    }\n    const dt = new Date(n);\n    if (Number.isNaN(dt.getTime())) {\n        throw new Error(`[SX] $datetimeToComponents: Invalid datetime: ${n}.`);\n    }\n    return ([\n        dt.getUTCFullYear(),\n        dt.getUTCMonth() + 1,\n        dt.getUTCDate(),\n        dt.getUTCHours(),\n        dt.getUTCMinutes(),\n        dt.getUTCSeconds(),\n        dt.getUTCMilliseconds(),\n        0, // TZ\n        dt.getUTCDay(),\n    ]);\n};\nexport const $$datetimeToComponents = $datetimeToComponents(null as any, null as any);\n\n\nexport const $datetimeToComponentsLc = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($datetime-to-components-lc number)\n    //  -> S expr  : list\n    checkParamsLength('$datetimeToComponentsLc', args, 1, 1);\n\n    const n = $$first(...args);\n    if (typeof n !== 'number') {\n        throw new Error(`[SX] $datetimeToComponentsLc: Invalid argument(s): args[0] is not number.`);\n    }\n    const dt = new Date(n);\n    if (Number.isNaN(dt.getTime())) {\n        throw new Error(`[SX] $datetimeToComponentsLc: Invalid datetime: ${n}.`);\n    }\n    return ([\n        dt.getFullYear(),\n        dt.getMonth() + 1,\n        dt.getDate(),\n        dt.getHours(),\n        dt.getMinutes(),\n        dt.getSeconds(),\n        dt.getMilliseconds(),\n        -dt.getTimezoneOffset(), // time difference between local time and UTC time, in minutes.\n                                 // If your time zone is UTC+2:00, +120 will be returned.\n        dt.getDay(),\n    ]);\n};\nexport const $$datetimeToComponentsLc = $datetimeToComponentsLc(null as any, null as any);\n\n\nexport const $match = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($match pattern-str string)\n    // S expression: ($match pattern-str options-str string)\n    //  -> S expr  : array\n    checkParamsLength('$match', args, 2, 3);\n\n    if (! state.config.enableRegExpMatchOperators) {\n        throw new Error(`[SX] $match: Operator is disabled by configuration.`);\n    }\n\n    if (args.length === 2) {\n        const m = new RegExp(args[0]);\n        return m.exec(args[1]);\n    } else {\n        const m = new RegExp(args[0], args[1]);\n        return m.exec(args[2]);\n    }\n};\nexport const $$match = $match(null as any, null as any);\n\n\nexport const $consoleLog = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($console-log expr1 ... exprN)\n    //  -> S expr  : null\n    console.log(...args);\n    return null;\n};\nexport const $$consoleLog = $consoleLog(null as any, null as any);\n\n\nexport const $consoleError = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($console-error expr1 ... exprN)\n    //  -> S expr  : null\n    console.error(...args);\n    return null;\n};\nexport const $$consoleError = $consoleError(null as any, null as any);\n\n\nexport const $consoleTrace = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($console-trace expr1 ... exprN)\n    //  -> S expr  : null\n    console.trace(...args);\n    return null;\n};\nexport const $$consoleTrace = $consoleTrace(null as any, null as any);\n\n\nexport const $consoleTime = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($console-time)\n    // S expression: ($console-time label)\n    //  -> S expr  : null\n    console.time(...args);\n    return null;\n};\nexport const $$consoleTime = $consoleTime(null as any, null as any);\n\n\nexport const $consoleTimeEnd = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($console-time-end)\n    // S expression: ($console-time-end label)\n    //  -> S expr  : null\n    console.timeEnd(...args);\n    return null;\n};\nexport const $$consoleTimeEnd = $consoleTimeEnd(null as any, null as any);\n\n\nexport const $consoleTimeLog = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($console-time-log label)\n    // S expression: ($console-time-log label value ... value)\n    //  -> S expr  : null\n    (console as any).timeLog(...args);\n    return null;\n};\nexport const $$consoleTimeLog = $consoleTimeLog(null as any, null as any);\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxFuncInfo } from '../../types';\nimport * as ops       from './core.fn';\n\n\n\nexport const operators: SxFuncInfo[] = [{\n    name: '$car',\n    fn: ops.$car,\n}, {\n    name: '$cdr',\n    fn: ops.$cdr,\n}, {\n    name: '$cons',\n    fn: ops.$cons,\n}, {\n    name: '$first',\n    fn: ops.$first,\n}, {\n    name: '$second',\n    fn: ops.$second,\n}, {\n    name: '$last',\n    fn: ops.$last,\n}, {\n    name: '$progn', // alias of $last\n    fn: ops.$last,\n}, {\n    name: '$rest',\n    fn: ops.$rest,\n}, {\n    name: '$first-and-second',\n    fn: ops.$firstAndSecond,\n}, {\n    name: '$atom',\n    fn: ops.$atom,\n}, {\n    name: '$eq',\n    fn: ops.$eq,\n}, {\n    name: '===',\n    fn: ops.$eq,\n}, {\n    name: '$not-eq',\n    fn: ops.$notEq,\n}, {\n    name: '!==',\n    fn: ops.$notEq,\n}, {\n    name: '$list',\n    fn: ops.$list,\n}, {\n    name: '$__scope',\n    fn: ops.$__scope,\n}, {\n    name: '$__global',\n    fn: ops.$__globalScope,\n}, {\n    name: '$__capture',\n    fn: ops.$__capture,\n}, {\n    name: '$__lambda',\n    fn: ops.$__lambda,\n}, {\n    name: '$__defun',\n    fn: ops.$__defun,\n}, {\n    name: '$__refun',\n    fn: ops.$__refun,\n}, {\n    name: '$__defmacro',\n    fn: ops.$__defmacro,\n}, {\n    name: '$apply',\n    fn: ops.$apply,\n}, {\n    name: '$__call',\n    fn: ops.$__call,\n}, {\n    name: '$__try',\n    fn: ops.$__try,\n}, {\n    name: '$raise',\n    fn: ops.$raise,\n}, {\n    name: '$__if',\n    fn: ops.$__if,\n}, {\n    name: '$__if-null',\n    fn: ops.$__ifNull,\n}, {\n    name: '$__cond',\n    fn: ops.$__cond,\n}, {\n    name: '$__while',\n    fn: ops.$__while,\n}, {\n    name: '$__do-while',\n    fn: ops.$__doWhile,\n}, {\n    name: '$__until',\n    fn: ops.$__until,\n}, {\n    name: '$__do-until',\n    fn: ops.$__doUntil,\n}, {\n    name: '$__repeat',\n    fn: ops.$__repeat,\n}, {\n    name: '$__for',\n    fn: ops.$__for,\n}, {\n    name: '$pipe',\n    fn: ops.$pipe,\n}, {\n    name: '$__get',\n    fn: ops.$__get,\n}, {\n    name: '$__let',\n    fn: ops.$__let,\n}, {\n    name: '$__set',\n    fn: ops.$__set,\n}, {\n    name: '$boolean',\n    fn: ops.$boolean,\n}, {\n    name: '$not',\n    fn: ops.$not,\n}, {\n    name: '$__and',\n    fn: ops.$__and,\n}, {\n    name: '$__or',\n    fn: ops.$__or,\n}, {\n    name: '==',\n    fn: ops.$ambiguousEq,\n}, {\n    name: '!=',\n    fn: ops.$ambiguousNotEq,\n}, {\n    name: '<',\n    fn: ops.$lt,\n}, {\n    name: '<=',\n    fn: ops.$le,\n}, {\n    name: '>',\n    fn: ops.$gt,\n}, {\n    name: '>=',\n    fn: ops.$ge,\n}, {\n    name: '$typeof',\n    fn: ops.$typeof,\n}, {\n    name: '$symbol',\n    fn: ops.$symbol,\n}, {\n    name: '$__gensym',\n    fn: ops.$__gensym,\n}, {\n    name: '$is-symbol',\n    fn: ops.$isSymbol,\n}, {\n    name: '$is-null',\n    fn: ops.$isNull,\n}, {\n    name: '$is-nil',\n    fn: ops.$isNil,\n}, {\n    name: '$is-undefined',\n    fn: ops.$isUndefined,\n}, {\n    name: '$is-list',\n    fn: ops.$isList,\n}, {\n    name: '$is-string',\n    fn: ops.$isString,\n}, {\n    name: '$is-number',\n    fn: ops.$isNumber,\n}, {\n    name: '$is-NaN',\n    fn: ops.$isNaN,\n}, {\n    name: '$is-finite',\n    fn: ops.$isFinite,\n}, {\n    name: '$is-integer',\n    fn: ops.$isInteger,\n}, {\n    name: '$to-string',\n    fn: ops.$toString,\n}, {\n    name: '$to-number',\n    fn: ops.$toNumber,\n}, {\n    name: '$__#',\n    fn: ops.$__toObject,\n}, {\n    name: '$object-assign',\n    fn: ops.$objectAssign,\n}, {\n    name: '$json-stringify',\n    fn: ops.$jsonStringify,\n}, {\n    name: '$now',\n    fn: ops.$now,\n}, {\n    name: '$datetime-from-iso',\n    fn: ops.$datetimeFromIso,\n}, {\n    name: '$datetime',\n    fn: ops.$datetime,\n}, {\n    name: '$datetime-lc',\n    fn: ops.$datetimeLc,\n}, {\n    name: '$datetime-to-iso-string',\n    fn: ops.$datetimeToIsoString,\n}, {\n    name: '$datetime-to-components',\n    fn: ops.$datetimeToComponents,\n}, {\n    name: '$datetime-to-components-lc',\n    fn: ops.$datetimeToComponentsLc,\n}, {\n    name: '$json-parse',\n    fn: ops.$jsonParse,\n}, {\n    name: '$match',\n    fn: ops.$match,\n}, {\n    name: '$console-log',\n    fn: ops.$consoleLog,\n}, {\n    name: '$console-error',\n    fn: ops.$consoleError,\n}, {\n    name: '$console-trace',\n    fn: ops.$consoleTrace,\n}, {\n    name: '$console-time',\n    fn: ops.$consoleTime,\n}, {\n    name: '$console-time-end',\n    fn: ops.$consoleTimeEnd,\n}, {\n    name: '$console-time-log',\n    fn: ops.$consoleTimeLog,\n}];\n\n\nexport const compilationOperators: SxFuncInfo[] = [{\n    name: '$$__lambda',\n    fn: ops.$comp$__lambda,\n}, {\n    name: '$$__defun',\n    fn: ops.$comp$__defun,\n}];\n\n\n// for backword compatibility\nexport default ([] as SxFuncInfo[]).concat(operators, compilationOperators);\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxMacroInfo,\n         SxParserState }     from '../../types';\nimport { isSymbol,\n         quote }             from '../../ast';\nimport { checkParamsLength } from '../../errors';\n\n\n\nexport const macros: SxMacroInfo[] = [{\n    name: '$scope',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($scope isBlockLocal returnMultiple ((name value) | name ...) expr ... expr)\n        //  -> S expr  : ($__scope isBlockLocal returnMultiple '((name value) | name ...) 'expr ... 'expr)\n        return [{symbol: '$__scope'},\n            list[1],\n            list[2],\n            ...(list.slice(3).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$local',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($local ((name value) | name ...) expr ... expr)\n        //  -> S expr  : ($__scope isBlockLocal=true returnMultiple=false '((name value) | name ...) 'expr ... 'expr)\n        return [{symbol: '$__scope'},\n            true,\n            false,\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$global',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($__global expr1 ... exprN)\n        //  -> S expr  : ($__global returnMultiple=false 'expr ... 'expr)\n        return [{symbol: '$__global'},\n            false,\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$clisp-let', // alias of $local\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($clisp-let ((name value) | name ...) expr ... expr)\n        //  -> S expr  : ($__scope isBlockLocal=true returnMultiple=false '((name value) | name ...) 'expr ... 'expr)\n        return [{symbol: '$__scope'},\n            true,\n            false,\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$capture',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($capture (sym1 ... symN) expr ... expr)\n        //  -> S expr  : ($__capture '(sym1 ... symN) 'expr ... 'expr)\n        return [{symbol: '$__capture'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$closure',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($closure (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\n        //  -> S expr  : ($__capture '(u-sym1 ... u-symM) ($__lambda '(sym1 ... symN) 'expr ... 'expr) )\n        const symUse = isSymbol(list[2], 'use');\n        if (! symUse) {\n            throw new Error(`[SX] $closure: Invalid syntax: missing 'use' keyword.`);\n        }\n        return [{symbol: '$__capture'}, quote(state, list[3]), quote(state, [{symbol: '$__lambda'},\n            quote(state, list[1]),\n            ...(list.slice(4).map(x => quote(state, x))),\n        ])];\n    },\n}, {\n    name: '|->',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: (|-> (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\n        //  -> S expr  : ($closure (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\n        return [{symbol: '$closure'},\n            ...list.slice(1),\n        ];\n    },\n}, {\n    name: '$lambda',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($lambda (sym1 ... symN) expr ... expr)\n        //  -> S expr  : ($__lambda '(sym1 ... symN) 'expr ... 'expr)\n        return [{symbol: '$__lambda'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '->',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($lambda (sym1 ... symN) expr ... expr)\n        //  -> S expr  : ($__lambda '(sym1 ... symN) 'expr ... 'expr)\n        return [{symbol: '$__lambda'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$defun',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($defun name (sym1 ... symN) expr ... expr)\n        //  -> S expr  : ($__defun 'name '(sym1 ... symN) 'expr ... 'expr)\n        return [{symbol: '$__defun'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$refun',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($refun name)\n        //  -> S expr  : ($__refun 'name)\n        return [{symbol: '$__refun'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '<-',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: (<- name)\n        //  -> S expr  : ($__refun 'name)\n        return [{symbol: '$__refun'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$defmacro',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($defmacro name (sym1 ... symN) expr ... expr)\n        //  -> S expr  : ($__defmacro 'name '(sym1 ... symN) 'expr ... 'expr)\n        return [{symbol: '$__defmacro'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$call',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($call thisArg symbol arg1 ... argN)\n        //  -> S expr  : ($__call thisArg 'symbol arg1 ... argN)\n        checkParamsLength('$call', list, 3);\n\n        return [{symbol: '$__call'},\n            list[1],\n            quote(state, list[2]),\n            ...(list.slice(3)),\n        ];\n    },\n}, {\n    name: '$try',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($try expr catch-expr)\n        //  -> S expr  : ($__try 't-expr 'catch-expr)\n        return [{symbol: '$__try'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$if',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($if cond t-expr f-expr)\n        //  -> S expr  : ($__if cond 't-expr 'f-expr)\n        return [{symbol: '$__if'},\n            list[1],\n            ...(list.slice(2).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$if-null',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($if-null cond null-expr)\n        //  -> S expr  : ($__if-null cont 'null-expr)\n        return [{symbol: '$__if-null'},\n            list[1],\n            ...(list.slice(2).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '??',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: (?? cond null-expr)\n        //  -> S expr  : ($__if-null cont 'null-expr)\n        return [{symbol: '$__if-null'},\n            list[1],\n            ...(list.slice(2).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$cond',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($cond cond1 expr1 ... condN exprN)\n        //  -> S expr  : ($__cond 'cond1 'expr1 ... 'condN 'exprN)\n        return [{symbol: '$__cond'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$while',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($while condition expr1 exprN)\n        //  -> S expr  : ($__while 'condition 'expr1 'exprN)\n        return [{symbol: '$__while'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$do-while',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($do-while condition expr1 exprN)\n        //  -> S expr  : ($__do-while 'condition 'expr1 'exprN)\n        return [{symbol: '$__do-while'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$until',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($until condition expr1 exprN)\n        //  -> S expr  : ($__until 'condition 'expr1 'exprN)\n        return [{symbol: '$__until'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$do-until',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($do-until condition expr1 exprN)\n        //  -> S expr  : ($__do-until 'condition 'expr1 'exprN)\n        return [{symbol: '$__do-until'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$repeat',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($repeat i of n-times expr1 exprN)\n        //  -> S expr  : ($__repeat 'i n-times 'expr1 'exprN)\n        const symOf = isSymbol(list[2], 'of');\n        if (! symOf) {\n            throw new Error(`[SX] $repeat: Invalid syntax: missing 'of' keyword.`);\n        }\n        return [{symbol: '$__repeat'},\n            quote(state, list[1]),\n            list[3],\n            ...(list.slice(4).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$for',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($for x of list expr1 exprN)\n        //  -> S expr  : ($__for 'x list 'expr1 'exprN)\n        const symOf = isSymbol(list[2], 'of');\n        if (! symOf) {\n            throw new Error(`[SX] $for: Invalid syntax: missing 'of' keyword.`);\n        }\n        return [{symbol: '$__for'},\n            quote(state, list[1]),\n            list[3],\n            ...(list.slice(4).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$get',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($get nameOrIndex1 ... nameOrIndexN)\n        //  -> S expr  : ($__get 'nameOrIndex1 ... 'nameOrIndexN)\n        return [{symbol: '$__get'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$let',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($let nameStrOrSymbol expr)\n        //  -> S expr  : ($__let 'nameStrOrSymbol expr)\n        checkParamsLength('$let', list, 3, 3);\n\n        return [{symbol: '$__let'},\n            quote(state, list[1]),\n            list[2],\n        ];\n    },\n}, {\n    name: '$clisp-defvar',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($let nameStrOrSymbol expr)\n        //  -> S expr  : ($__let 'nameStrOrSymbol expr)\n        checkParamsLength('$clisp-defvar', list, 3, 3);\n\n        return [{symbol: '$global'},\n            [{symbol: '$__let'},\n                quote(state, list[1]),\n                list[2]\n            ],\n        ];\n    },\n}, {\n    name: '$set',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($set nameOrListOfNameOrIndex expr)\n        //  -> S expr  : ($__set 'nameOrListOfNameOrIndex expr)\n        checkParamsLength('$set', list, 3, 3);\n\n        return [{symbol: '$__set'},\n            quote(state, list[1]),\n            list[2],\n        ];\n    },\n}, {\n    name: '$clisp-setq', // alias of $set\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($clisp-setq symbol expr)\n        //  -> S expr  : ($__set 'symbol expr)\n        checkParamsLength('$clisp-setq', list, 3, 3);\n\n        return [{symbol: '$__set'},\n            quote(state, list[1]),\n            list[2],\n        ];\n    },\n}, {\n    name: '$and',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($and expr1 ... exprN)\n        //  -> S expr  : ($__and 'expr1 ... 'exprN)\n        return [{symbol: '$__and'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$or',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($or expr1 ... exprN)\n        //  -> S expr  : ($__or 'expr1 ... 'exprN)\n        return [{symbol: '$__or'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$gensym',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($gensym)\n        // S expression: ($gensym name)\n        //  -> S expr  : ($__gensym 'name)\n        return [\n            {symbol: '$__gensym'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '#',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: (# (name value...)...)\n        //  -> S expr  : ($__# '(name value...)...)\n        return [\n            {symbol: '$__#'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}];\n\n\nexport const compilationMacros: SxMacroInfo[] = [{\n    name: '$$closure',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($$closure (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\n        //  -> S expr  : ($__capture '(u-sym1 ... u-symM) ($$__lambda '(sym1 ... symN) 'expr ... 'expr) )\n        const symUse = isSymbol(list[2], 'use');\n        if (! symUse) {\n            throw new Error(`[SX] $closure: Invalid syntax: missing 'use' keyword.`);\n        }\n        return [{symbol: '$__capture'}, quote(state, list[3]), quote(state, [{symbol: '$$__lambda'},\n            quote(state, list[1]),\n            ...(list.slice(4).map(x => quote(state, x))),\n        ])];\n    },\n}, {\n    name: '|=>',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: (|-> (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\n        //  -> S expr  : ($closure (sym1 ... symN) use (u-sym1 ... u-symM) expr ... expr)\n        return [{symbol: '$$closure'},\n            ...list.slice(1),\n        ];\n    },\n}, {\n    name: '$$lambda',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($$lambda (sym1 ... symN) expr ... expr)\n        //  -> S expr  : ($$__lambda '(sym1 ... symN) 'expr ... 'expr)\n        return [{symbol: '$$__lambda'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '=>',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($$lambda (sym1 ... symN) expr ... expr)\n        //  -> S expr  : ($$__lambda '(sym1 ... symN) 'expr ... 'expr)\n        return [{symbol: '$$__lambda'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$$defun',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($$defun name (sym1 ... symN) expr ... expr)\n        //  -> S expr  : ($$__defun 'name '(sym1 ... symN) 'expr ... 'expr)\n        return [{symbol: '$$__defun'},\n            ...(list.slice(1).map(x => quote(state, x))),\n        ];\n    },\n}];\n\n\n// for backword compatibility\nexport default ([] as SxMacroInfo[]).concat(macros, compilationMacros);\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserState,\n         SxSymbolInfo } from '../../types';\n\n\n\nexport const symbols: SxSymbolInfo[] = [\n    {name: 'nil', fn: (state: SxParserState, name: string) => []},\n    {name: 'null', fn: (state: SxParserState, name: string) => null},\n\n    {name: 'undefined', fn: (state: SxParserState, name: string) => void 0},\n\n    {name: 'true', fn: (state: SxParserState, name: string) => true},\n    {name: '#true', fn: (state: SxParserState, name: string) => true},\n    {name: '#t', fn: (state: SxParserState, name: string) => true},\n\n    {name: 'false', fn: (state: SxParserState, name: string) => false},\n    {name: '#false', fn: (state: SxParserState, name: string) => false},\n    {name: '#f', fn: (state: SxParserState, name: string) => false},\n\n    {name: '#Number:Infinity', fn: (state: SxParserState, name: string) => Number.POSITIVE_INFINITY},\n    {name: '+Infinity', fn: (state: SxParserState, name: string) => Number.POSITIVE_INFINITY},\n    {name: '-Infinity', fn: (state: SxParserState, name: string) => Number.NEGATIVE_INFINITY},\n\n    {name: '#Number:Epsilon', fn: (state: SxParserState, name: string) => Number.EPSILON},\n    {name: '#Number:MaxValue', fn: (state: SxParserState, name: string) => Number.MAX_VALUE},\n    {name: '#Number:MinValue', fn: (state: SxParserState, name: string) => Number.MIN_VALUE},\n    {name: '#Number:MinSafeInteger', fn: (state: SxParserState, name: string) => Number.MAX_SAFE_INTEGER},\n    {name: '#Number:MinSafeInteger', fn: (state: SxParserState, name: string) => Number.MIN_SAFE_INTEGER},\n\n    {name: 'NaN', fn: (state: SxParserState, name: string) => Number.NaN},\n];\n\n\nexport default symbols;\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserConfig }       from '../../types';\nimport { operators,\n         compilationOperators } from './core.operator';\nimport { macros,\n         compilationMacros }    from './core.macro';\nimport symbols                  from './core.symbol';\n\n\n\nexport default function install(config: SxParserConfig): SxParserConfig {\n    config.funcs = (config.funcs || [])\n        .concat(operators)\n        .concat(config.enableCompilationOperators ? compilationOperators : []);\n    config.macros = (config.macros || [])\n        .concat(macros)\n        .concat(config.enableCompilationOperators ? compilationMacros : []);\n    config.symbols = (config.symbols || []).concat(symbols);\n    return config;\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserState }     from '../../types';\nimport { toNumber }          from '../../evaluate';\nimport { checkParamsLength } from '../../errors';\nimport { $$first,\n         $$firstAndSecond }  from '../core/core.fn';\n\n\n\nexport const $bitLShift = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: (<< number shift)\n    //  -> S expr  : number\n    checkParamsLength('$bitLShift', args, 2, 2);\n\n    let {car, cdr} = $$firstAndSecond(...args);\n    car = toNumber(car);\n    cdr = toNumber(cdr);\n\n    if (0 <= cdr) {\n        return cdr < 32 ? car << cdr : 0;\n    } else {\n        return cdr > -32 ? car >>> (-cdr) : 0;\n    }\n};\nexport const $$bitLShift = $bitLShift(null as any, null as any);\n\n\nexport const $bitSRShift = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: (>> number shift)\n    //  -> S expr  : number\n    checkParamsLength('$bitSRShift', args, 2, 2);\n\n    let {car, cdr} = $$firstAndSecond(...args);\n    car = toNumber(car);\n    cdr = toNumber(cdr);\n\n    if (0 <= cdr) {\n        return cdr < 32 ? car >> cdr : (car & 0x080000000) ? -1 : 0;\n    } else {\n        return cdr > -32 ? car << (-cdr) : 0;\n    }\n};\nexport const $$bitSRShift = $bitSRShift(null as any, null as any);\n\n\nexport const $bitURShift = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: (>>> number shift)\n    //  -> S expr  : number\n    checkParamsLength('$bitURShift', args, 2, 2);\n\n    let {car, cdr} = $$firstAndSecond(...args);\n    car = toNumber(car);\n    cdr = toNumber(cdr);\n\n    if (0 <= cdr) {\n        return cdr < 32 ? car >>> cdr : 0;\n    } else {\n        return cdr > -32 ? car << (-cdr) : 0;\n    }\n};\nexport const $$bitURShift = $bitURShift(null as any, null as any);\n\n\nexport const $bitNot = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($bit-not number)\n    //  -> S expr  : number\n    checkParamsLength('$bitNot', args, 1, 1);\n\n    const car = $$first(...args);\n    return ~toNumber(car);\n};\nexport const $$bitNot = $bitNot(null as any, null as any);\n\n\nexport const $bitAnd = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($bit-and numberA numberB)\n    //  -> S expr  : number\n    checkParamsLength('$bitAnd', args, 2);\n\n    const car = $$first(...args);\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) & toNumber(curr), toNumber(car));\n};\nexport const $$bitAnd = $bitAnd(null as any, null as any);\n\n\nexport const $bitOr = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($bit-or numberA numberB)\n    //  -> S expr  : number\n    checkParamsLength('$bitOr', args, 2);\n\n    const car = $$first(...args);\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) | toNumber(curr), toNumber(car));\n};\nexport const $$bitOr = $bitOr(null as any, null as any);\n\n\nexport const $bitXor = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($bit-xor numberA numberB)\n    //  -> S expr  : number\n    checkParamsLength('$bitXor', args, 2);\n\n    const car = $$first(...args);\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) ^ toNumber(curr), toNumber(car));\n};\nexport const $$bitXor = $bitXor(null as any, null as any);\n\n\nexport const $add = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: (+ number1 ... numberN)\n    //  -> S expr  : number\n    checkParamsLength('$add', args, 1);\n\n    return args.reduce((prev, curr) => toNumber(prev) + toNumber(curr), 0);\n};\nexport const $$add = $add(null as any, null as any);\n\n\nexport const $sub = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: (- number1 ... numberN)\n    //  -> S expr  : number\n    checkParamsLength('$sub', args, 1);\n\n    const car = $$first(...args);\n    const last = args.slice(1);\n    if (last.length === 0) {\n        // negate\n        return -toNumber(car);\n    } else {\n        // subtract\n        return args.slice(1).reduce((prev, curr) => toNumber(prev) - toNumber(curr), toNumber(car));\n    }\n};\nexport const $$sub = $sub(null as any, null as any);\n\n\nexport const $mul = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: (* number1 ... numberN)\n    //  -> S expr  : number\n    checkParamsLength('$mul', args, 2);\n\n    const car = $$first(...args);\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) * toNumber(curr), toNumber(car));\n};\nexport const $$mul = $mul(null as any, null as any);\n\n\nexport const $sup = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: (** number1 ... numberN)\n    //  -> S expr  : number\n    checkParamsLength('$sup', args, 2);\n\n    const car = $$first(...args);\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) ** toNumber(curr), toNumber(car));\n};\nexport const $$sup = $sup(null as any, null as any);\n\n\nexport const $div = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: (/ number1 ... numberN)\n    //  -> S expr  : number\n    checkParamsLength('$div', args, 2);\n\n    const car = $$first(...args);\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) / toNumber(curr), toNumber(car));\n};\nexport const $$div = $div(null as any, null as any);\n\n\nexport const $mod = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: (% number1 ... numberN)\n    //  -> S expr  : number\n    checkParamsLength('$mod', args, 2);\n\n    const car = $$first(...args);\n    return args.slice(1).reduce((prev, curr) => toNumber(prev) % toNumber(curr), toNumber(car));\n};\nexport const $$mod = $mod(null as any, null as any);\n\n\nexport const $max = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($max val1 ... valN)\n    //  -> S expr  : value\n    return Math.max(...(args.map(x => toNumber(x))));\n};\nexport const $$max = $max(null as any, null as any);\n\n\nexport const $min = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($min val1 ... valN)\n    //  -> S expr  : value\n    return Math.min(...(args.map(x => toNumber(x))));\n};\nexport const $$min = $min(null as any, null as any);\n\n\nexport const $avg = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($avg val1 ... valN)\n    //  -> S expr  : value\n    const a = args.map(x => toNumber(x));\n    return a.length > 0 ? a.reduce((prev, curr) => prev + curr, 0) / a.length : NaN;\n};\nexport const $$avg = $avg(null as any, null as any);\n\n\nexport const $floor = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($floor number)\n    //  -> S expr  : number\n    checkParamsLength('$floor', args, 1, 1);\n\n    return Math.floor(toNumber($$first(...args)));\n};\nexport const $$floor = $floor(null as any, null as any);\n\n\nexport const $ceil = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($ceil number)\n    //  -> S expr  : number\n    checkParamsLength('$ceil', args, 1, 1);\n\n    return Math.ceil(toNumber($$first(...args)));\n};\nexport const $$ceil = $ceil(null as any, null as any);\n\n\nexport const $round = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($round number)\n    //  -> S expr  : number\n    checkParamsLength('$round', args, 1, 1);\n\n    return Math.round(toNumber($$first(...args)));\n};\nexport const $$round = $round(null as any, null as any);\n\n\nexport const $abs = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($abs number)\n    //  -> S expr  : number\n    checkParamsLength('$abs', args, 1, 1);\n\n    return Math.abs(toNumber($$first(...args)));\n};\nexport const $$abs = $abs(null as any, null as any);\n\n\nexport const $sign = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($sign number)\n    //  -> S expr  : number\n    checkParamsLength('$sign', args, 1, 1);\n\n    return Math.sign(toNumber($$first(...args)));\n};\nexport const $$sign = $sign(null as any, null as any);\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxFuncInfo } from '../../types';\nimport * as ops       from './arithmetic.fn';\n\n\n\nexport const funcs: SxFuncInfo[] = [{\n    name: '<<',\n    fn: ops.$bitLShift,\n}, {\n    name: '$bit-l-shift',\n    fn: ops.$bitLShift,\n}, {\n    name: '>>',\n    fn: ops.$bitSRShift,\n}, {\n    name: '$bit-sr-shift',\n    fn: ops.$bitSRShift,\n}, {\n    name: '>>>',\n    fn: ops.$bitURShift,\n}, {\n    name: '$bit-ur-shift',\n    fn: ops.$bitURShift,\n}, {\n    name: '$bit-not',\n    fn: ops.$bitNot,\n}, {\n    name: '$bit-and',\n    fn: ops.$bitAnd,\n}, {\n    name: '$bit-or',\n    fn: ops.$bitOr,\n}, {\n    name: '$bit-xor',\n    fn: ops.$bitXor,\n}, {\n    name: '+',\n    fn: ops.$add,\n}, {\n    name: '$add',\n    fn: ops.$add,\n}, {\n    name: '$sum',\n    fn: ops.$add,\n}, {\n    name: '-',\n    fn: ops.$sub,\n}, {\n    name: '$sub',\n    fn: ops.$sub,\n}, {\n    name: '$neg',\n    fn: ops.$sub,\n}, {\n    name: '*',\n    fn: ops.$mul,\n}, {\n    name: '$mul',\n    fn: ops.$mul,\n}, {\n    name: '**',\n    fn: ops.$sup,\n}, {\n    name: '$sup',\n    fn: ops.$sup,\n}, {\n    name: '/',\n    fn: ops.$div,\n}, {\n    name: '$div',\n    fn: ops.$div,\n}, {\n    name: '%',\n    fn: ops.$mod,\n}, {\n    name: '$mod',\n    fn: ops.$mod,\n}, {\n    name: '$max',\n    fn: ops.$max,\n}, {\n    name: '$min',\n    fn: ops.$min,\n}, {\n    name: '$avg',\n    fn: ops.$avg,\n}, {\n    name: '$floor',\n    fn: ops.$floor,\n}, {\n    name: '$ceil',\n    fn: ops.$ceil,\n}, {\n    name: '$round',\n    fn: ops.$round,\n}, {\n    name: '$abs',\n    fn: ops.$abs,\n}, {\n    name: '$sign',\n    fn: ops.$sign,\n}];\n\n\nexport default funcs;\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxMacroInfo,\n         SxParserState }     from '../../types';\nimport { isSymbol,\n         quote }             from '../../ast';\nimport { checkParamsLength } from '../../errors';\n\n\n\nexport const macros: SxMacroInfo[] = [{\n    name: '$incl',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($incl name)\n        //  -> S expr  : ($set name ($add name 1))\n        checkParamsLength('$incl', list, 2, 2);\n\n        return [{symbol: '$set'},\n            list[1],\n            [{symbol: '$add'}, list[1], 1],\n        ];\n    },\n}, {\n    name: '++',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: (++ name)\n        //  -> S expr  : ($set name ($add name 1))\n        checkParamsLength('++', list, 2, 2);\n\n        return [{symbol: '$set'},\n            list[1],\n            [{symbol: '$add'}, list[1], 1],\n        ];\n    },\n}, {\n    name: '$decl',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($decl name)\n        //  -> S expr  : ($set name ($add name -1))\n        checkParamsLength('$decl', list, 2, 2);\n\n        return [{symbol: '$set'},\n            list[1],\n            [{symbol: '$add'}, list[1], -1],\n        ];\n    },\n}, {\n    name: '--',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: (-- name)\n        //  -> S expr  : ($set name ($add name -1))\n        checkParamsLength('--', list, 2, 2);\n\n        return [{symbol: '$set'},\n            list[1],\n            [{symbol: '$add'}, list[1], -1],\n        ];\n    },\n}, {\n    name: '$incln',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($incln name v)\n        //  -> S expr  : ($set name ($add name v))\n        checkParamsLength('$incln', list, 3, 3);\n        if (typeof list[2] !== 'number') {\n            throw new Error(`[SX] $incln: Invalid parameter: arg(1) is not number.`);\n        }\n\n        return [{symbol: '$set'},\n            list[1],\n            [{symbol: '$add'}, list[1], list[2]],\n        ];\n    },\n}, {\n    name: '+=',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: (++ name v)\n        //  -> S expr  : ($set name ($add name v))\n        checkParamsLength('+=', list, 3, 3);\n        if (typeof list[2] !== 'number') {\n            throw new Error(`[SX] +=: Invalid parameter: arg(1) is not number.`);\n        }\n\n        return [{symbol: '$set'},\n            list[1],\n            [{symbol: '$add'}, list[1], list[2]],\n        ];\n    },\n}, {\n    name: '$decln',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($decln name v)\n        //  -> S expr  : ($set name ($add name -v))\n        checkParamsLength('$decln', list, 3, 3);\n        if (typeof list[2] !== 'number') {\n            throw new Error(`[SX] $decln: Invalid parameter: arg(1) is not number.`);\n        }\n\n        return [{symbol: '$set'},\n            list[1],\n            [{symbol: '$add'}, list[1], -(list[2] as number)],\n        ];\n    },\n}, {\n    name: '-=',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: (-- name)\n        //  -> S expr  : ($set name ($add name -v))\n        checkParamsLength('-=', list, 3, 3);\n        if (typeof list[2] !== 'number') {\n            throw new Error(`[SX] -=: Invalid parameter: arg(1) is not number.`);\n        }\n\n        return [{symbol: '$set'},\n            list[1],\n            [{symbol: '$add'}, list[1], -(list[2] as number)],\n        ];\n    },\n}];\n\n\nexport default macros;\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxSymbolInfo } from '../../types';\n\n\n\nexport const symbols: SxSymbolInfo[] = [];\n\n\nexport default symbols;\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserConfig } from '../../types';\nimport operators          from './arithmetic.operator';\nimport macros             from './arithmetic.macro';\nimport symbols            from './arithmetic.symbol';\n\n\n\nexport default function install(config: SxParserConfig): SxParserConfig {\n    config.funcs = (config.funcs || []).concat(operators);\n    config.macros = (config.macros || []).concat(macros);\n    config.symbols = (config.symbols || []).concat(symbols);\n    return config;\n}\n","// Copyright (c) 2017, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\n\nexport class Query<T> {\n    public constructor(public data: T[]) {\n    }\n\n    public orderBy(condition: Array<string | string[/* colName: string, ('asc' | 'desc') */]> | ((a: T, b: T) => number)): Query<T> {\n        let fn: (a: T, b: T) => number;\n        if (Array.isArray(condition)) {\n            fn = (x: T, y: T) => {\n                for (const c of condition) {\n                    if (typeof c === 'string') {\n                        if (x[c] > y[c]) return 1;\n                        if (x[c] < y[c]) return -1;\n                    } else {\n                        const desc = c[1] === 'desc' ? -1 : 1;\n                        if (x[c[0]] > y[c[0]]) return 1 * desc;\n                        if (x[c[0]] < y[c[0]]) return -1 * desc;\n                    }\n                }\n                return 0;\n            };\n        } else {\n            fn = condition;\n        }\n        return new Query(this.data.slice(0).sort(fn));\n    }\n\n    public groupBy(condition: string[/* colName: string */] | ((a: T, b: T, index: number, array: T[]) => boolean)): Query<T[]> {\n        let fn: (a: T, b: T, index: number, array: T[]) => boolean;\n        if (Array.isArray(condition)) {\n            fn = (x: T, y: T) => {\n                for (const c of condition) {\n                    if (x[c] !== y[c]) return false;\n                }\n                return true;\n            };\n        } else{\n            fn = condition;\n        }\n        const r: T[][] = [];\n        let start = 0;\n        let i = 1;\n        for (; i < this.data.length; i++) {\n            if (! fn(this.data[start], this.data[i], i, this.data)) {\n                r.push(this.data.slice(start, i));\n                start = i;\n            }\n        }\n        r.push(this.data.slice(start, i));\n        return new Query(r);\n    }\n\n    public groupEvery(n: number | {single: number, first?: number, intermediate: number, last?: number}): Query<T[]> {\n        if (typeof n === 'number') {\n            return this.groupBy((a, b, index, array) => {\n                if ((index % n) === 0) return false;\n                return true;\n            });\n        } else {\n            const w = Object.assign({first: n.intermediate, last: n.intermediate}, n);\n            const r = this.groupBy((a, b, index, array) => {\n                if (w.single >= array.length) {\n                    if ((index % w.single) === 0) return false;\n                    return true;\n                } else if (index <= w.first) {\n                    if ((index % w.first) === 0) return false;\n                    return true;\n                } else {\n                    if (((index - w.first) % w.intermediate) === 0) return false;\n                    return true;\n                }\n            });\n            if (r.data.length === 1) {\n                if (w.single < r.data[0].length) {\n                    r.data.push([]);\n                }\n            } else {\n                if (w.first < r.data[0].length) {\n                    // case of w.first === 0\n                    r.data.unshift([]);\n                }\n            }\n            if (r.data.length > 1) {\n                if (r.data[r.data.length - 1].length > w.last) {\n                    r.data.push([]);\n                }\n            }\n            return r;\n        }\n    }\n\n    public where(fn: (value: T, index: number, array: T[]) => boolean): Query<T> {\n        return new Query(this.data.filter(fn));\n    }\n\n    public select(): T[];\n    public select<R>(fn: (value: T, index: number, array: T[]) => R): R[];\n    public select<R>(fn?: (value: T, index: number, array: T[]) => R): Array<R | T> {\n        return fn ? this.data.map(fn) : this.data as any;\n    }\n}\n\n\n\nexport function query<T>(data: T[]): Query<T> {\n    return new Query<T>(data);\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserState }     from '../../types';\nimport { toNumber,\n         evaluate }          from '../../evaluate';\nimport { checkParamsLength } from '../../errors';\nimport { $$first,\n         $$firstAndSecond }  from '../core/core.fn';\nimport { query }             from '../../../lib/data';\n\n\n\nexport const $range = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($range start end)\n    // S expression: ($range start end step)\n    //  -> S expr  : list\n    checkParamsLength('$range', args, 2, 3);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    const start = toNumber(car) || 0;\n    const stop = toNumber(cdr) || 0;\n\n    const step = (args.length > 2 ? toNumber(args[2]) || 0 : 0) || (start <= stop ? 1 : -1);\n    const n = Math.sign(stop - start) + Math.sign(step) !== 0 ?\n        (Math.floor((Math.abs(stop - start) / Math.abs(step))) + 1) : 0;\n\n    state.evalCount += n;\n    evaluate(state, 0);\n    return Array.from({length: n}, (x, i) => start + i * step);\n};\n\n\nexport const $length = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($length listOrString)\n    //  -> S expr  : number\n    checkParamsLength('$length', args, 1, 1);\n\n    const car = $$first(...args);\n    switch (typeof car) {\n    case 'object':\n        if (! ('length' in car)) {\n            break;\n        }\n        // FALL_THRU\n    case 'string':\n        return car.length;\n    }\n    throw new Error(`[SX] $length: Invalid argument type: object has no property 'length'.`);\n};\nexport const $$length = $length(null as any, null as any);\n\n\nexport const $trim = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($trim string)\n    //  -> S expr  : string\n    checkParamsLength('$trim', args, 1, 1);\n\n    const car = $$first(...args);\n    if (typeof car === 'string') {\n        return car.trim();\n    }\n    throw new Error(`[SX] $trim: Invalid argument type: args[0] is not string.`);\n};\nexport const $$trim = $trim(null as any, null as any);\n\n\nexport const $trimHead = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($trim-head string)\n    //  -> S expr  : string\n    checkParamsLength('$trimHead', args, 1, 1);\n\n    const car = $$first(...args);\n    if (typeof car === 'string') {\n        return car.trimLeft();\n    }\n    throw new Error(`[SX] $trimHead: Invalid argument type: args[0] is not string.`);\n};\nexport const $$trimHead = $trimHead(null as any, null as any);\n\n\nexport const $trimTail = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($trim-tail string)\n    //  -> S expr  : string\n    checkParamsLength('$trimTail', args, 1, 1);\n\n    const car = $$first(...args);\n    if (typeof car === 'string') {\n        return car.trimRight();\n    }\n    throw new Error(`[SX] $trimTail: Invalid argument type: args[0] is not string.`);\n};\nexport const $$trimTail = $trimTail(null as any, null as any);\n\n\nexport const $replaceAll = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($replace-all src-string match-string replacement-string)\n    //  -> S expr  : string\n    checkParamsLength('$replaceAll', args, 3, 3);\n\n    if (typeof args[0] === 'string' && typeof args[1] === 'string' && typeof args[2] === 'string') {\n        return args[0].split(args[1]).join(args[2]);\n    }\n    throw new Error(`[SX] $replaceAll: Invalid argument type: args[0] or [1] or [2] is not string.`);\n};\nexport const $$replaceAll = $replaceAll(null as any, null as any);\n\n\nexport const $split = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($split src-string match-string)\n    //  -> S expr  : (string ... string)\n    checkParamsLength('$split', args, 2, 2);\n\n    if (typeof args[0] === 'string' && typeof args[1] === 'string') {\n        return args[0].split(args[1]);\n    }\n    throw new Error(`[SX] $split: Invalid argument type: args[0] or [1] is not string.`);\n};\nexport const $$split = $split(null as any, null as any);\n\n\nexport const $join = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($join '(str1 ... strN) separator)\n    //  -> S expr  : (string ... string)\n    checkParamsLength('$join', args, 1, 2);\n\n    if (typeof Array.isArray(args[0])) {\n        if (args.length > 1) {\n            if (typeof args[1] === 'string') {\n                return args[0].join(args[1]);\n            }\n            throw new Error(`[SX] $join: Invalid argument type: args[1] is not string.`);\n        } else {\n            return args[0].join();\n        }\n    }\n    throw new Error(`[SX] $join: Invalid argument type: args[0] is not array.`);\n};\nexport const $$join = $join(null as any, null as any);\n\n\nexport const $concat = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($concat listOrString1 ... listOrStringN)\n    //  -> S expr  : listOrString\n    checkParamsLength('$concat', args, 1);\n\n    const car = $$first(...args);\n    switch (typeof car) {\n    case 'object':\n        if (! ('concat' in car)) {\n            break;\n        }\n        // FALL_THRU\n    case 'string':\n        return car.concat(...args.slice(1));\n    }\n    throw new Error(`[SX] $concat: Invalid argument type: object has no property 'concat'.`);\n};\nexport const $$concat = $concat(null as any, null as any);\n\n\nexport const $slice = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($slice start end listOrString)\n    // S expression: ($slice start listOrString)\n    //  -> S expr  : listOrString\n    checkParamsLength('$slice', args, 2, 3);\n\n    if (args.length === 3) {\n        if (typeof args[2] === 'string' || Array.isArray(args[2])) {\n            return args[2].slice(toNumber(args[0]), toNumber(args[1]));\n        }\n    }\n    if (args.length === 2) {\n        if (typeof args[1] === 'string' || Array.isArray(args[1])) {\n            return args[1].slice(toNumber(args[0]));\n        }\n    }\n    throw new Error(`[SX] $slice: Invalid argument type: args[${args.length - 1}] is not string or array.`);\n};\nexport const $$slice = $slice(null as any, null as any);\n\n\nexport const $top = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($top n listOrString)\n    //  -> S expr  : listOrString\n    checkParamsLength('$top', args, 2, 2);\n\n    if (typeof args[1] === 'string' || Array.isArray(args[1])) {\n        return args[1].slice(0, toNumber(args[0]));\n    }\n    throw new Error(`[SX] $top: Invalid argument type: args[1] is not string or array.`);\n};\nexport const $$top = $top(null as any, null as any);\n\n\nexport const $tail = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($tail n listOrString)\n    //  -> S expr  : listOrString\n    checkParamsLength('$tail', args, 2, 2);\n\n    if (typeof args[1] === 'string' || Array.isArray(args[1])) {\n        const n = -toNumber(args[0]);\n        return args[1].slice(n >= 0 || Number.isNaN(n) ? args[1].length : n);\n    }\n    throw new Error(`[SX] $tail: Invalid argument type: args[1] is not string or array.`);\n};\nexport const $$tail = $tail(null as any, null as any);\n\n\nexport const $push = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($push list value)\n    //  -> S expr  : list\n    checkParamsLength('$push', args, 2, 2);\n\n    if (typeof Array.isArray(args[0])) {\n        args[0].push(args[1]);\n        return args[0];\n    }\n    throw new Error(`[SX] $push: Invalid argument type: args[1] is not array.`);\n};\nexport const $$push = $push(null as any, null as any);\n\n\nexport const $pop = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($pop list)\n    //  -> S expr  : value\n    checkParamsLength('$pop', args, 1, 1);\n\n    if (typeof Array.isArray(args[0])) {\n        const v = args[0].pop();\n        return v;\n    }\n    throw new Error(`[SX] $pop: Invalid argument type: args[1] is not array.`);\n};\nexport const $$pop = $pop(null as any, null as any);\n\n\n// tslint:disable-next-line:variable-name\nexport const $__at = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__at index listOrString)\n    //  -> S expr  : any\n    checkParamsLength('$__at', args, 2, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    return cdr[car];\n};\n// tslint:disable-next-line:variable-name\nexport const $$__at = $__at(null as any, null as any);\n\n\nexport const $reverse = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($reverse listOrString)\n    //  -> S expr  : listOrString\n    checkParamsLength('$reverse', args, 1, 1);\n\n    const car = $$first(...args);\n    if (Array.isArray(car)) {\n        return car.slice(0).reverse();\n    }\n    throw new Error(`[SX] $reverse: Invalid argument type: args[0] is not array.`);\n};\nexport const $$reverse = $reverse(null as any, null as any);\n\n\nexport const $reverseDestructive = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($reverse! listOrString)\n    //  -> S expr  : listOrString\n    checkParamsLength('$reverse!', args, 1, 1);\n\n    const car = $$first(...args);\n    if (Array.isArray(car)) {\n        return car.reverse();\n    }\n    throw new Error(`[SX] $reverse!: Invalid argument type: args[0] is not array.`);\n};\nexport const $$reverseDestructive = $reverseDestructive(null as any, null as any);\n\n\nexport const $find = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($find list (lambda (v index array) (... boolean)))\n    //  -> S expr  : list\n    checkParamsLength('$find', args, 2, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    if (Array.isArray(car)) {\n        return car.find(cdr);\n    }\n    throw new Error(`[SX] $find: Invalid argument type: args[0] is not array.`);\n};\nexport const $$find = $find(null as any, null as any);\n\n\nexport const $filter = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($filter list (lambda (v index array) (... boolean)))\n    //  -> S expr  : list\n    checkParamsLength('$filter', args, 2, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    if (Array.isArray(car)) {\n        return car.filter(cdr);\n    }\n    throw new Error(`[SX] $filter: Invalid argument type: args[0] is not array.`);\n};\nexport const $$filter = $filter(null as any, null as any);\n\n\nexport const $map = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($map list (lambda (v index array) (... any)))\n    //  -> S expr  : list\n    checkParamsLength('$map', args, 2, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    if (Array.isArray(car)) {\n        return car.map(cdr);\n    }\n    throw new Error(`[SX] $map: Invalid argument type: args[0] is not array.`);\n};\nexport const $$map = $map(null as any, null as any);\n\n\nexport const $reduce = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($reduce list (lambda (acc v index array) (... any)) initial-value)\n    // S expression: ($reduce list (lambda (acc v index array) (... any)))\n    //  -> S expr  : list\n    checkParamsLength('$reduce', args, 2, 3);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    if (Array.isArray(car)) {\n        if (args.length < 3) {\n            return car.reduce(cdr);\n        } else {\n            return car.reduce(cdr, args[2]);\n        }\n    }\n    throw new Error(`[SX] $reduce: Invalid argument type: args[0] is not array.`);\n};\nexport const $$reduce = $reduce(null as any, null as any);\n\n\nexport const $reduceFromTail = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($reduce-from-tail list (lambda (acc v index array) (... any)) initial-value)\n    // S expression: ($reduce-from-tail list (lambda (acc v index array) (... any)))\n    //  -> S expr  : list\n    checkParamsLength('$reduceFromTail', args, 2, 3);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    if (Array.isArray(car)) {\n        if (args.length < 3) {\n            return car.reduceRight(cdr);\n        } else {\n            return car.reduceRight(cdr, args[2]);\n        }\n    }\n    throw new Error(`[SX] $reduceFromTail: Invalid argument type: args[0] is not array.`);\n};\nexport const $$reduceFromTail = $reduceFromTail(null as any, null as any);\n\n\nexport const $sort = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($sort list (lambda (a b) (... number_a-b)))\n    //  -> S expr  : list\n    checkParamsLength('$sort', args, 2, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    if (Array.isArray(car)) {\n        return car.slice(0).sort(cdr);\n    }\n    throw new Error(`[SX] $sort: Invalid argument type: args[0] is not array.`);\n};\nexport const $$sort = $sort(null as any, null as any);\n\n\nexport const $sortDestructive = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($sort! list (lambda (a b) (... number_a-b)))\n    //  -> S expr  : list\n    checkParamsLength('$sort!', args, 2, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    if (Array.isArray(car)) {\n        return car.sort(cdr);\n    }\n    throw new Error(`[SX] $sort!: Invalid argument type: args[0] is not array.`);\n};\nexport const $$sortDestructive = $sortDestructive(null as any, null as any);\n\n\nexport const $groupEvery = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($group-every optionsOrNumber (x1 ... xN))\n    //  -> S expr  : ((x1 ... ) ... ( ... xN))\n    checkParamsLength('$group-every', args, 2, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    if (! Array.isArray(cdr)) {\n        throw new Error(`[SX] $group-every: Invalid argument type: args[1] is not array.`);\n    }\n\n    return query(cdr as any[]).groupEvery(car).select();\n};\nexport const $$groupEvery = $groupEvery(null as any, null as any);\n\n\nexport const $groupBy = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($group-by conditions (x1 ... xN))\n    //  -> S expr  : ((x1 ... ) ... ( ... xN))\n    checkParamsLength('$group-by', args, 2, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    if (! Array.isArray(cdr)) {\n        throw new Error(`[SX] $group-by: Invalid argument type: args[1] is not array.`);\n    }\n\n    return query(cdr as any[]).groupBy(car).select();\n};\nexport const $$groupBy = $groupBy(null as any, null as any);\n\n\nexport const $orderBy = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($order-by conditions (x1 ... xN))\n    //  -> S expr  : (x1 ... xN)\n    checkParamsLength('$order-by', args, 2, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    if (! Array.isArray(cdr)) {\n        throw new Error(`[SX] $order-by: Invalid argument type: args[1] is not array.`);\n    }\n\n    return query(cdr as any[]).orderBy(car).select();\n};\nexport const $$orderBy = $orderBy(null as any, null as any);\n\n\nexport const $where = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($where (-> (v index array) ... boolean) (x1 ... xN))\n    //  -> S expr  : (x'1 ... x'M)\n    checkParamsLength('$where', args, 2, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    if (typeof args[0] !== 'function') {\n        throw new Error(`[SX] $where: Invalid argument type: args[0] is not function.`);\n    }\n    if (! Array.isArray(cdr)) {\n        throw new Error(`[SX] $where: Invalid argument type: args[1] is not array.`);\n    }\n\n    return query(cdr as any[]).where(car).select();\n};\nexport const $$where = $where(null as any, null as any);\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxFuncInfo } from '../../types';\nimport * as ops       from './sequence.fn';\n\n\n\nexport const funcs: SxFuncInfo[] = [{\n    name: '$range',\n    fn: ops.$range,\n}, {\n    name: '$length',\n    fn: ops.$length,\n}, {\n    name: '$trim',\n    fn: ops.$trim,\n}, {\n    name: '$trim-head',\n    fn: ops.$trimHead,\n}, {\n    name: '$trim-tail',\n    fn: ops.$trimTail,\n}, {\n    name: '$replace-all',\n    fn: ops.$replaceAll,\n}, {\n    name: '$split',\n    fn: ops.$split,\n}, {\n    name: '$join',\n    fn: ops.$join,\n}, {\n    name: '$concat',\n    fn: ops.$concat,\n}, {\n    name: '$slice',\n    fn: ops.$slice,\n}, {\n    name: '$top',\n    fn: ops.$top,\n}, {\n    name: '$tail',\n    fn: ops.$tail,\n}, {\n    name: '$push',\n    fn: ops.$push,\n}, {\n    name: '$pop',\n    fn: ops.$pop,\n}, {\n    name: '$__at',\n    fn: ops.$__at,\n}, {\n    name: '$reverse',\n    fn: ops.$reverse,\n}, {\n    name: '$reverse!',\n    fn: ops.$reverseDestructive,\n}, {\n    name: '$find',\n    fn: ops.$find,\n}, {\n    name: '$filter',\n    fn: ops.$filter,\n}, {\n    name: '$map',\n    fn: ops.$map,\n}, {\n    name: '$reduce',\n    fn: ops.$reduce,\n}, {\n    name: '$reduce-from-head',\n    fn: ops.$reduce,\n}, {\n    name: '$reduce-from-tail',\n    fn: ops.$reduceFromTail,\n}, {\n    name: '$sort',\n    fn: ops.$sort,\n}, {\n    name: '$sort!',\n    fn: ops.$sortDestructive,\n}, {\n    name: '$group-every',\n    fn: ops.$groupEvery,\n}, {\n    name: '$group-by',\n    fn: ops.$groupBy,\n}, {\n    name: '$order-by',\n    fn: ops.$orderBy,\n}, {\n    name: '$where',\n    fn: ops.$where,\n}];\n\n\nexport default funcs;\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxMacroInfo,\n         SxParserState } from '../../types';\nimport { isSymbol }      from '../../ast';\n\n\n\nexport const macros: SxMacroInfo[] = [{\n    name: '$[',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($[ index ] listOrObject)\n        //  -> S expr  : ($__at listOrObject)\n        const symOf = isSymbol(list[2], ']');\n        if (! symOf) {\n            throw new Error(`[SX] $repeat: Invalid syntax: missing ']' keyword.`);\n        }\n        return [{symbol: '$__at'},\n            list[1],\n            list[3],\n        ];\n    },\n}];\n\n\nexport default macros;\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxSymbolInfo } from '../../types';\n\n\n\nexport const symbols: SxSymbolInfo[] = [];\n\n\nexport default symbols;\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserConfig } from '../../types';\nimport operators          from './sequence.operator';\nimport macros             from './sequence.macro';\nimport symbols            from './sequence.symbol';\n\n\n\nexport default function install(config: SxParserConfig): SxParserConfig {\n    config.funcs = (config.funcs || []).concat(operators);\n    config.macros = (config.macros || []).concat(macros);\n    config.symbols = (config.symbols || []).concat(symbols);\n    return config;\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserState }     from '../../types';\nimport { checkParamsLength } from '../../errors';\nimport { $__let,\n         $__set  }           from '../core/core.fn';\n\n\n\n// tslint:disable-next-line:variable-name\nexport const $__letAsync = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__let-async 'nameStrOrSymbol promise)\n    //  -> S expr  : promise\n    checkParamsLength('$__letAsync', args, 2, 2);\n\n    let promise: Promise<any> = args[1];\n    if (typeof promise !== 'object' || typeof promise.then !== 'function') {\n        promise = Promise.resolve(promise);\n    }\n    promise = promise.then(v => {\n        try {\n            $__let(state, '')(args[0], v);\n            return v;\n        } catch (e) {\n            return Promise.reject(e);\n        }\n    });\n    return promise;\n};\n// tslint:disable-next-line:variable-name\nexport const $$__letAsync = $__letAsync(null as any, null as any);\n\n\n// tslint:disable-next-line:variable-name\nexport const $__setAsync = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__set-async 'nameOrListOfNameOrIndex promise)\n    //  -> S expr  : promise\n    checkParamsLength('$__setAsync', args, 2, 2);\n\n    let promise: Promise<any> = args[1];\n    if (typeof promise !== 'object' || typeof promise.then !== 'function') {\n        promise = Promise.resolve(promise);\n    }\n    promise = promise.then(v => {\n        try {\n            $__set(state, '')(args[0], v);\n            return v;\n        } catch (e) {\n            return Promise.reject(e);\n        }\n    });\n    return promise;\n};\n// tslint:disable-next-line:variable-name\nexport const $$__setAsync = $__setAsync(null as any, null as any);\n\n\nexport const $then = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($then promise (lambda (val) ...) (lambda (err) ...))\n    //  -> S expr  : promise\n    checkParamsLength('$then', args, 2, 3);\n\n    let promise: Promise<any> = args[0];\n    if (typeof promise !== 'object' || typeof promise.then !== 'function') {\n        promise = Promise.resolve(promise);\n    }\n    if (typeof args[2] === 'function') {\n        promise = promise.then(args[1], args[2]);\n    } else {\n        if (typeof args[1] !== 'function') {\n            throw new Error(`[SX] $then: Invalid argument(s): args[1] is not function.`);\n        }\n        promise = promise.then(args[1]);\n    }\n    return promise;\n};\nexport const $$then = $then(null as any, null as any);\n\n\nexport const $resolveAll = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($resolve-all promise1 ... promiseN)\n    //  -> S expr  : promise\n    const promises: Array<Promise<any>> = args.slice(0);\n    for (let i = 0; i < promises.length; i++) {\n        if (typeof promises[i] !== 'object' || typeof (promises[i] as any).then !== 'function') {\n            promises[i] = Promise.resolve(promises[i]);\n        }\n    }\n    return Promise.all(promises);\n};\nexport const $$resolveAll = $resolveAll(null as any, null as any);\n\n\nexport const $resolveAny = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($resolve-any promise1 ... promiseN)\n    //  -> S expr  : promise\n    const promises: Array<Promise<any>> = args.slice(0);\n    for (let i = 0; i < promises.length; i++) {\n        if (typeof promises[i] !== 'object' || typeof (promises[i] as any).then !== 'function') {\n            promises[i] = Promise.resolve(promises[i]);\n        }\n    }\n\n    // https://stackoverflow.com/questions/39940152/get-first-fulfilled-promise\n    // firstOf: This will return the value of the first fulfilled promise,\n    //          or if all reject, an array of rejection reasons.\n    const invert  = (p: Promise<any>) => new Promise((res, rej) => p.then(rej, res));\n    const firstOf = (ps: Array<Promise<any>>) => invert(Promise.all(ps.map(invert)));\n\n    return firstOf(promises);\n};\nexport const $$resolveAny = $resolveAny(null as any, null as any);\n\n\nexport const $resolvePipe = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($resolve-pipe promise<val1> (lambda (val1) ... promiseOrVal2) (lambda (val2) ... promiseOrVal3) ... (lambda (valN-1) ... promiseOrValN))\n    //  -> S expr  : promise\n    // remarks: If the formal argument lambda is a non-lambda value, the value is then piped as is.\n    checkParamsLength('$resolvePipe', args, 1);\n\n    let promise: Promise<any> = args[0];\n    if (typeof promise !== 'object' || typeof promise.then !== 'function') {\n        promise = Promise.resolve(promise);\n    }\n    const lambdas = args.slice(1);\n    for (let i = 0; i < lambdas.length; i++) {\n        if (typeof lambdas[i] !== 'function') {\n            const v = lambdas[i];\n            lambdas[i] = () => v;\n        }\n    }\n    let p = promise;\n    for (const l of lambdas) {\n        p = p.then(l);\n    }\n    return p;\n};\nexport const $$resolvePipe = $resolvePipe(null as any, null as any);\n\n\nexport const $resolveFork = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($resolve-fork promise<val1> (lambda (val1) ... promiseOrVal2a) ... (lambda (val1) ... promiseOrVal2z))\n    //  -> S expr  : (promise<val2a> ... promise<val2z>)\n    // remarks: If the formal argument lambda is a non-lambda value, the value is then piped as is.\n    checkParamsLength('$resolveFork', args, 1);\n\n    let promise: Promise<any> = args[0];\n    if (typeof promise !== 'object' || typeof promise.then !== 'function') {\n        promise = Promise.resolve(promise);\n    }\n    const lambdas = args.slice(1);\n    for (let i = 0; i < lambdas.length; i++) {\n        if (typeof lambdas[i] !== 'function') {\n            const v = lambdas[i];\n            lambdas[i] = () => v;\n        }\n    }\n\n    const resolvers = new Array(lambdas.length);\n    const rejectors = new Array(lambdas.length);\n\n    const pa: Array<Promise<any>> = [];\n    for (let i = 0; i < lambdas.length; i++) {\n        pa.push(new Promise<any>((resolve: any, reject: any) => {\n            resolvers[i] = (v: any) => {\n                let lp: Promise<any> = lambdas[i](v);\n                if (typeof lp !== 'object' || typeof lp.then !== 'function') {\n                    lp = Promise.resolve(lp);\n                }\n\n                lp\n                .then(x => resolve(x))\n                .catch(e => reject(e));\n            };\n            rejectors[i] = reject;\n        }));\n    }\n\n    promise.then(\n        v => resolvers.forEach(f => f(v)),\n        e => rejectors.forEach(f => f(e))\n    );\n\n    return pa;\n};\nexport const $$resolveFork = $resolveFork(null as any, null as any);\n\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxFuncInfo } from '../../types';\nimport * as ops       from './concurrent.fn';\n\n\n\nexport const funcs: SxFuncInfo[] = [{\n    name: '$__let-async',\n    fn: ops.$__letAsync,\n}, {\n    name: '$__set-async',\n    fn: ops.$__setAsync,\n}, {\n    name: '$then',\n    fn: ops.$then,\n}, {\n    name: '$resolve-all',\n    fn: ops.$resolveAll,\n}, {\n    name: '$resolve-any',\n    fn: ops.$resolveAny,\n}, {\n    name: '$resolve-pipe',\n    fn: ops.$resolvePipe,\n}, {\n    name: '$resolve-fork',\n    fn: ops.$resolveFork,\n}];\n\n\nexport default funcs;\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxMacroInfo,\n         SxParserState }     from '../../types';\nimport { quote }             from '../../ast';\nimport { checkParamsLength } from '../../errors';\n\n\n\nexport const macros: SxMacroInfo[] = [{\n    name: '$let-async',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($let-async nameStrOrSymbol promise)\n        //  -> S expr  : ($__let-async 'nameStrOrSymbol promise)\n        checkParamsLength('$let-async', list, 3, 3);\n\n        return [{symbol: '$__let-async'},\n            quote(state, list[1]),\n            list[2],\n        ];\n    },\n}, {\n    name: '$set-async',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($set-async nameOrListOfNameOrIndex promise)\n        //  -> S expr  : ($__set-async 'nameOrListOfNameOrIndex promise)\n        checkParamsLength('$set-async', list, 3, 3);\n\n        return [{symbol: '$__set-async'},\n            quote(state, list[1]),\n            list[2],\n        ];\n    },\n}];\n\n\nexport default macros;\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxSymbolInfo } from '../../types';\n\n\n\nexport const symbols: SxSymbolInfo[] = [];\n\n\nexport default symbols;\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserConfig } from '../../types';\nimport operators          from './concurrent.operator';\nimport macros             from './concurrent.macro';\nimport symbols            from './concurrent.symbol';\n\n\n\nexport default function install(config: SxParserConfig): SxParserConfig {\n    config.funcs = (config.funcs || []).concat(operators);\n    config.macros = (config.macros || []).concat(macros);\n    config.symbols = (config.symbols || []).concat(symbols);\n    return config;\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserConfig }   from '../../types';\nimport installCore          from '../../operators/core';\nimport installArithmetic    from '../../operators/arithmetic';\nimport installSequence      from '../../operators/sequence';\nimport installConcurrent    from '../../operators/concurrent';\nimport { SExpression,\n         SExpressionAsync } from '../../interpreters';\nimport { defaultConfig }    from '../../defaults';\n\n\n\nexport const L = (() => {\n    let config: SxParserConfig = Object.assign({}, defaultConfig);\n    config.reservedNames = Object.assign({}, config.reservedNames, {\n        Template: '$concat',\n    });\n\n    config = installCore(config);\n    config = installArithmetic(config);\n    config = installSequence(config);\n    config = installConcurrent(config);\n\n    config.stripComments = true;\n\n    return SExpression(config);\n})();\n\nexport const LS = L;\nexport const lisp = L;\n\n\n\n// tslint:disable-next-line:variable-name\nexport const L_async = (() => {\n    let config: SxParserConfig = Object.assign({}, defaultConfig);\n    config.reservedNames = Object.assign({}, config.reservedNames, {\n        Template: '$concat',\n    });\n\n    config = installCore(config);\n    config = installArithmetic(config);\n    config = installSequence(config);\n    config = installConcurrent(config);\n\n    config.stripComments = true;\n\n    return SExpressionAsync(config);\n})();\n\n// tslint:disable-next-line:variable-name\nexport const LS_async = L_async;\n// tslint:disable-next-line:variable-name\nexport const lisp_async = L_async;\n\n\n\nexport const LM = (() => {\n    let config: SxParserConfig = Object.assign({}, defaultConfig);\n    config.reservedNames = Object.assign({}, config.reservedNames, {\n        Template: '$concat',\n    });\n\n    config = installCore(config);\n    config = installArithmetic(config);\n    config = installSequence(config);\n    config = installConcurrent(config);\n\n    config.stripComments = true;\n    config.returnMultipleRoot = true;\n\n    return SExpression(config);\n})();\n\n\n\n// tslint:disable-next-line:variable-name\nexport const LM_async = (() => {\n    let config: SxParserConfig = Object.assign({}, defaultConfig);\n    config.reservedNames = Object.assign({}, config.reservedNames, {\n        Template: '$concat',\n    });\n\n    config = installCore(config);\n    config = installArithmetic(config);\n    config = installSequence(config);\n    config = installConcurrent(config);\n\n    config.stripComments = true;\n    config.returnMultipleRoot = true;\n\n    return SExpressionAsync(config);\n})();\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserState,\n         SxToken }               from '../../types';\nimport { isSymbol,\n         quote }                 from '../../ast';\nimport { evaluate,\n         getScope }              from '../../evaluate';\nimport { checkParamsLength,\n         checkUnsafeVarNamesEx } from '../../errors';\nimport { $$first,\n         $$firstAndSecond,\n         $__scope,\n         $$boolean }             from '../core/core.fn';\n\n\n\n// tslint:disable-next-line:variable-name\nexport const $__outputIf = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__outputIf cond 'expr)\n    //  -> (if cond is true ) S expr  : expr\n    //  -> (if cond is false) S expr  : ()\n    checkParamsLength('$__outputIf', args, 2);\n\n    const {car, cdr} = $$firstAndSecond(...args);\n    let r: SxToken = [];\n    if ($$boolean(car)) {\n        if (2 < args.length) {\n            r.push({symbol: state.config.reservedNames.Template}, ...args.slice(1));\n            r = evaluate(state, r);\n        } else {\n            r = evaluate(state, cdr);\n        }\n    }\n    return r;\n};\n\n\n// tslint:disable-next-line:variable-name\nexport const $__outputForOf = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: ($__outputForOf list 'expr)\n    //  -> S expr  : (Template expr ... expr)\n    checkParamsLength('$__outputForOf', args, 2);\n\n    const car = $$first(...args);\n    const r: SxToken[] = [];\n    if (Array.isArray(car)) {\n        for (let i = 0; i < car.length; i++) {\n            const x = car[i];\n            const v = $__scope(state, name)(true, true, [\n                ['$data', quote(state, x)],\n                ['$index', i],\n                ['$array', quote(state, car)],\n                ['$parent', quote(state, getScope(state).scope)],\n            ], ...args.slice(1));\n\n            if (2 < args.length && Array.isArray(v)) {\n                r.push(...v);\n            } else {\n                r.push(v);\n            }\n        }\n    } else {\n        throw new Error(`[SX] $__outputForOf: Invalid argument(s): args[0] is not array.`);\n    }\n    // All of r items are already evaluated.\n    return evaluate(state,\n        ([{symbol: state.config.reservedNames.Template}] as SxToken[])\n        .concat(r.map(z => [{symbol: state.config.reservedNames.quote}, z])));\n};\n\n\nexport const $jsxProps = (state: SxParserState, name: string) => (...args: any[]) => {\n    // S expression: (@ (name value...)...)\n    //  -> JSON    : {name: value, ...}\n    const r: any = {};\n    for (const x of args) {\n        if (Array.isArray(x) && 0 < x.length) {\n            const sym = isSymbol(x[0]);\n            const keyName =\n                sym ? sym.symbol :\n                String(evaluate(state, x[0]));\n            switch (keyName) {\n            case 'style':\n                {\n                    if (x.length === 1) {\n                        // S expression: (@ ... (style) ...)\n                        //  -> JSON    : {..., style: \"\", ...}\n                        r[keyName] = \"\";\n                    } else if (x.length >= 2) {\n                        // S expression: (@ ... (style \"styleName1: styleValue1; ...\" ...) ...)\n                        // S expression: (@ ... (style (styleName1 styleValue1) ...) ...)\n                        //  -> JSON    : {..., style: {styleName1: styleValue1}, ...}\n                        const styles: object = {};\n                        for (const s of x.slice(1)) {\n                            if (Array.isArray(s) && 1 < s.length) {\n                                const styleName = String(evaluate(state, s[0]));\n                                checkUnsafeVarNamesEx('$jsxProps', styles, styleName);\n                                styles[styleName] = String(evaluate(state, s[1]));\n                            } else if (typeof s === 'string') {\n                                for (const v of s.split(';')) {\n                                    const matched = /^\\s*(\\S+)\\s*:\\s*(.*?)\\s*$/.exec(v);\n                                    if (matched) {\n                                        checkUnsafeVarNamesEx('$jsxProps', styles, matched[1]);\n                                        styles[matched[1]] = matched[2];\n                                    }\n                                }\n                            }\n                        }\n                        r[keyName] = styles;\n                    }\n                }\n                break;\n            case 'class': case 'styleClass':\n                {\n                    if (x.length === 1) {\n                        // S expression: (@ ... (class) ...)\n                        //  -> JSON    : {..., class: [], ...}\n                        r[keyName] = [];\n                    } else if (x.length >= 2) {\n                        // S expression: (@ ... (class \"className1 className2 ...\") ...)\n                        // S expression: (@ ... (class (className1 className2 ...)) ...)\n                        //  -> JSON    : {..., class: [className1 className2 ...], ...}\n                        let classes: any[] = [];\n                        for (const c of x.slice(1)) {\n                            if (Array.isArray(c)) {\n                                classes = classes.concat(c.map(z => evaluate(state, z)));\n                            } else if (typeof c === 'string') {\n                                classes = classes.concat(c.split(' '));\n                            }\n                        }\n                        const cs: string[] = [];\n                        const fn: (a: any[]) => void = (a) => a\n                            .forEach(c => (c === null || c === void 0) ?\n                                void 0 :\n                                (Array.isArray(c) ? fn(c) : cs.push(String(c))));\n                        fn(classes);\n                        r[keyName] = cs;\n                    }\n                }\n                break;\n            case 'className':\n                {\n                    if (x.length === 1) {\n                        // S expression: (@ ... (class) ...)\n                        //  -> JSON    : {..., class: \"\", ...}\n                        r[keyName] = '';\n                    } else if (x.length >= 2) {\n                        // S expression: (@ ... (class \"className1 className2 ...\") ...)\n                        // S expression: (@ ... (class (className1 className2 ...)) ...)\n                        //  -> JSON    : {..., class: \"className1 className2 ...\", ...}\n                        let classes: string = '';\n                        for (const c of x.slice(1)) {\n                            let fragment = '';\n                            if (Array.isArray(c)) {\n                                const cs: string[] = [];\n                                const fn: (a: any[]) => void = (a) => a\n                                    .map(z => evaluate(state, z))\n                                    .forEach(z => (z === null || z === void 0) ?\n                                        void 0 :\n                                        (Array.isArray(z) ? fn(z) : cs.push(String(z))));\n                                fn(c);\n                                fragment = cs.join(' ');\n                            } else if (typeof c === 'string') {\n                                fragment = c;\n                            }\n                            if (0 < classes.length) classes += ' ' + fragment;\n                            else classes = fragment;\n                        }\n                        r[keyName] = classes;\n                    }\n                }\n                break;\n            case 'dangerouslySetInnerHTML':\n                {\n                    if (x.length === 1) {\n                        r[keyName] = {__html: ''};\n                    } else if (x.length >= 2) {\n                        r[keyName] = {__html: evaluate(state, x[1])};\n                    } else {\n                        r[keyName] = {__html:\n                            evaluate(state, ([{symbol: state.config.reservedNames.list}] as SxToken[])\n                            .concat(x.slice(1)))\n                        };\n                    }\n                }\n                break;\n            case 'setInnerText':\n                {\n                    if (x.length === 1) {\n                        r[keyName] = {__text: ''};\n                    } else if (x.length >= 2) {\n                        r[keyName] = {__text: evaluate(state, x[1])};\n                    } else {\n                        r[keyName] = {__text:\n                            evaluate(state, ([{symbol: state.config.reservedNames.list}] as SxToken[])\n                            .concat(x.slice(1)))\n                        };\n                    }\n                }\n                break;\n            default:\n                {\n                    checkUnsafeVarNamesEx('$jsxProps', r, keyName);\n                    if (x.length === 1) {\n                        // S expression: (@ ... (keyName) ...)\n                        //  -> JSON    : {..., keyName: true, ...}\n                        r[keyName] = true;\n                    } else if (x.length === 2) {\n                        // S expression: (@ ... (keyName value) ...)\n                        //  -> JSON    : {..., keyName: value, ...}\n                        r[keyName] = evaluate(state, x[1]);\n                    } else {\n                        // S expression: (@ ... (keyName value1 value2 ...) ...)\n                        //  -> JSON    : {..., keyName: [value1, value2, ], ...}\n                        r[keyName] =\n                            evaluate(state, ([{symbol: state.config.reservedNames.list}] as SxToken[])\n                            .concat(x.slice(1)));\n                    }\n                }\n                break;\n            }\n        } else {\n            throw new Error(`[SX] $jsxProps: Invalid argument(s): args[?] is not array.`);\n        }\n    }\n    return r;\n};\n\n\nfunction getJsxTagsParams(state: SxParserState, ...args: any[]) {\n    let children = args;\n    let props: any = {};\n    if (0 < args.length && Array.isArray(args[0])) {\n        const sym = isSymbol(args[0][0], '@');\n\n        if (sym) {\n            props = $jsxProps(state, '')(...args[0].slice(1));\n            children = children.slice(1);\n        }\n    }\n    return {props, children};\n}\n\n\nexport const $jsxStandardTag = (state: SxParserState, name: string) => (...args: any[]) => {\n    const {props, children} = getJsxTagsParams(state, ...args);\n    return (state.config.jsx as any)(name, props, ...children);\n};\n\n\nexport const $jsxComponentTag = (component: any) => (state: SxParserState, name: string) => (...args: any[]) => {\n    const {props, children} = getJsxTagsParams(state, ...args);\n    return (state.config.jsx as any)(component, props, ...children);\n};\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxFuncInfo } from '../../types';\nimport * as ops       from './jsx.fn';\n\n\n\nexport const funcs: SxFuncInfo[] = [{\n    name: '$=__if',\n    fn: ops.$__outputIf,\n}, {\n    name: '$=__for',\n    fn: ops.$__outputForOf,\n}];\n\n\nexport default funcs;\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxMacroInfo,\n         SxParserState } from '../../types';\nimport { quote }         from '../../ast';\n\n\n\nexport const macros: SxMacroInfo[] = [{\n    name: '@',\n    fn: (state: SxParserState, name: string) => (list) => {\n        return quote(state, list);\n    },\n}, {\n    name: '$=if',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($=if cond expr)\n        //  -> S expr  : ($=__if cond 'expr)\n        return [\n            {symbol: '$=__if'},\n            list[1],\n            ...(list.slice(2).map(x => quote(state, x))),\n        ];\n    },\n}, {\n    name: '$=for',\n    fn: (state: SxParserState, name: string) => (list) => {\n        // S expression: ($=for list expr)\n        //  -> S expr  : ($=__for list 'expr)\n        return [\n            {symbol: '$=__for'},\n            list[1],\n            ...(list.slice(2).map(x => quote(state, x))),\n        ];\n    },\n}];\n\n\nexport default macros;\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxSymbolInfo } from '../../types';\n\n\n\nexport const symbols: SxSymbolInfo[] = [];\n\n\nexport default symbols;\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserConfig,\n         LsxConfig }        from '../../types';\nimport operators            from './jsx.operator';\nimport macros               from './jsx.macro';\nimport symbols              from './jsx.symbol';\n\nimport { $jsxStandardTag,\n         $jsxComponentTag } from './jsx.fn';\n\n\n\nexport default function install(config: SxParserConfig, lsxConf: LsxConfig): SxParserConfig {\n    config.funcs = (config.funcs || []).concat(operators);\n    config.macros = (config.macros || []).concat(macros);\n    config.symbols = (config.symbols || []).concat(symbols);\n\n    const components =\n        Object.entries(lsxConf.components)\n        .map(x => ({name: x[0], fn: $jsxComponentTag(x[1])}));\n\n    config.funcs = config.funcs.concat(\n        {name: config.reservedNames.Template, fn: $jsxComponentTag(lsxConf.jsxFlagment)},\n        ...components\n    );\n\n    config.funcSymbolResolverFallback = $jsxStandardTag;\n    config.jsx = lsxConf.jsx;\n    config.JsxFragment = lsxConf.jsxFlagment;\n\n    return config;\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SxParserConfig,\n         SxToken,\n         LsxConfig,\n         SExpressionTemplateFn,\n         SExpressionAsyncTemplateFn } from '../../types';\nimport installCore          from '../../operators/core';\nimport installArithmetic    from '../../operators/arithmetic';\nimport installSequence      from '../../operators/sequence';\nimport installJsx           from '../../operators/jsx';\nimport installConcurrent    from '../../operators/concurrent';\nimport { SExpression,\n         SExpressionAsync } from '../../interpreters';\nimport { defaultConfig }    from '../../defaults';\n\n\n\nexport function LSX<R = SxToken>(lsxConf: LsxConfig): SExpressionTemplateFn<R> {\n    let config: SxParserConfig = Object.assign({}, defaultConfig);\n\n    config = installCore(config);\n    config = installArithmetic(config);\n    config = installSequence(config);\n    config = installConcurrent(config);\n    config = installJsx(config, lsxConf);\n\n    config.stripComments = true;\n\n    return SExpression(config) as any;\n}\n\n\n\nexport function LSX_async<R = SxToken>(lsxConf: LsxConfig): SExpressionAsyncTemplateFn<R> {\n    let config: SxParserConfig = Object.assign({}, defaultConfig);\n\n    config = installCore(config);\n    config = installArithmetic(config);\n    config = installSequence(config);\n    config = installConcurrent(config);\n    config = installJsx(config, lsxConf);\n\n    config.stripComments = true;\n\n    return SExpressionAsync(config) as any;\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nimport { SExpressionTemplateFn,\n         SExpressionAsyncTemplateFn } from './types';\n\n\n\nexport function runScriptTags(lisp: SExpressionTemplateFn | SExpressionAsyncTemplateFn, globals?: object, contentType = 'text/lisp') {\n    const codes = document.querySelectorAll(`script[type=\"${contentType}\"]`);\n    const cs = [];\n    for (let i = 0; i < codes.length; i++) {\n        cs.push(codes[i].innerHTML);\n    }\n    lisp = lisp.appendGlobals(globals || {});\n    return lisp(cs.join('\\n'));\n}\n","// Copyright (c) 2018, Shellyl_N and Authors\n// license: ISC\n// https://github.com/shellyln\n\n\nexport * from './s-exp/types';\nexport * from './s-exp/ast';\nexport * from './s-exp/s-expression';\nexport * from './s-exp/browser';\n\n\nexport { default as installCore }         from './s-exp/operators/core';\nexport { default as installArithmetic }   from './s-exp/operators/arithmetic';\nexport { default as installSequence }     from './s-exp/operators/sequence';\nexport { default as installJsx }          from './s-exp/operators/jsx';\nexport { default as installConcurrent }   from './s-exp/operators/concurrent';\n\n\nimport { default as coreOperators }       from './s-exp/operators/core/core.operator';\nimport { default as coreMacros }          from './s-exp/operators/core/core.macro';\nimport { default as coreSymbols }         from './s-exp/operators/core/core.symbol';\n\nimport { default as arithmeticOperators } from './s-exp/operators/arithmetic/arithmetic.operator';\nimport { default as arithmeticMacros }    from './s-exp/operators/arithmetic/arithmetic.macro';\nimport { default as arithmeticSymbols }   from './s-exp/operators/arithmetic/arithmetic.symbol';\n\nimport { default as sequenceOperators }   from './s-exp/operators/sequence/sequence.operator';\nimport { default as sequenceMacros }      from './s-exp/operators/sequence/sequence.macro';\nimport { default as sequenceSymbols }     from './s-exp/operators/sequence/sequence.symbol';\n\nimport { default as jsxOperators }        from './s-exp/operators/jsx/jsx.operator';\nimport { default as jsxMacros }           from './s-exp/operators/jsx/jsx.macro';\nimport { default as jsxSymbols }          from './s-exp/operators/jsx/jsx.symbol';\n\nimport { default as concurrentOperators } from './s-exp/operators/concurrent/concurrent.operator';\nimport { default as concurrentMacros }    from './s-exp/operators/concurrent/concurrent.macro';\nimport { default as concurrentSymbols }   from './s-exp/operators/concurrent/concurrent.symbol';\n\n\nexport const builtinOperators = {\n    core: coreOperators,\n    arithmetic: arithmeticOperators,\n    sequence: sequenceOperators,\n    jsx: jsxOperators,\n    concurrent: concurrentOperators,\n};\n\nexport const builtinMacros = {\n    core: coreMacros,\n    arithmetic: arithmeticMacros,\n    sequence: sequenceMacros,\n    jsx: jsxMacros,\n    concurrent: concurrentMacros,\n};\n\nexport const builtinSymbols = {\n    core: coreSymbols,\n    arithmetic: arithmeticSymbols,\n    sequence: sequenceSymbols,\n    jsx: jsxSymbols,\n    concurrent: concurrentSymbols,\n};\n"],"sourceRoot":""}